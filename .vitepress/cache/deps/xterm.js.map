{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/webpack/universalModuleDefinition", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/AccessibilityManager.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/Clipboard.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/ColorContrastCache.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/Dom.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/Lifecycle.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/Linkifier2.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/LocalizableStrings.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/OscLinkProvider.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/RenderDebouncer.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/ScreenDprMonitor.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/Terminal.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/TimeBasedDebouncer.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/Viewport.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/BufferDecorationRenderer.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/ColorZoneStore.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/OverviewRulerRenderer.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/input/CompositionHelper.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/input/Mouse.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/input/MoveToCell.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRenderer.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/shared/Constants.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/shared/RendererUtils.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/selection/SelectionModel.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/CharSizeService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/CharacterJoinerService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/CoreBrowserService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/MouseService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/RenderService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/SelectionService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/Services.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/services/ThemeService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/CircularList.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/Clone.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/Color.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/CoreTerminal.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/EventEmitter.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/InputHandler.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/Lifecycle.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/MultiKeyMap.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/Platform.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/SortedList.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/TaskQueue.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/WindowsMode.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/AttributeData.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Buffer.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferLine.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferRange.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferReflow.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferSet.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/CellData.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Constants.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Marker.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/data/Charsets.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/data/EscapeSequences.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/input/Keyboard.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/input/TextDecoder.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/input/UnicodeV6.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/input/WriteBuffer.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/input/XParseColor.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/parser/Constants.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/parser/DcsParser.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/parser/EscapeSequenceParser.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/parser/OscParser.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/parser/Params.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/public/AddonManager.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferApiView.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferLineApiView.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferNamespaceApi.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/public/ParserApi.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/public/UnicodeApi.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/BufferService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/CharsetService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/CoreMouseService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/CoreService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/DecorationService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/InstantiationService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/LogService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/OptionsService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/OscLinkService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/ServiceRegistry.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/Services.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/common/services/UnicodeService.ts", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/webpack/bootstrap", "../../../node_modules/.pnpm/xterm@5.1.0/node_modules/xterm/lib/webpack:/xterm/src/browser/public/Terminal.ts"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { isMac } from 'common/Platform';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderService } from 'browser/services/Services';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\nexport class AccessibilityManager extends Disposable {\n  private _accessibilityTreeRoot: HTMLElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n\n  private _renderRowsDebouncer: IRenderDebouncer;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityTreeRoot = document.createElement('div');\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\n    this._accessibilityTreeRoot.tabIndex = 0;\n\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\n\n    this._renderRowsDebouncer = new TimeBasedDebouncer(this._renderRows.bind(this));\n    this._refreshRows();\n\n    this._liveRegion = document.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\n\n    this.register(this._renderRowsDebouncer);\n    this.register(this._terminal.onResize(e => this._handleResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._handleChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._handleChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._handleTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._handleKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n\n    this._screenDprMonitor = new ScreenDprMonitor(window);\n    this.register(this._screenDprMonitor);\n    this._screenDprMonitor.setListener(() => this._refreshRowsDimensions());\n    // This shouldn't be needed on modern browsers but is present in case the\n    // media query that drives the ScreenDprMonitor isn't supported\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\n    this.register(toDisposable(() => {\n      removeElementFromParent(this._accessibilityTreeRoot);\n      this._rowElements.length = 0;\n    }));\n  }\n\n  private _handleBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _handleResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = document.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n\n  private _handleTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._handleChar(' ');\n    }\n  }\n\n  private _handleChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n\n      // Only detach/attach on mac as otherwise messages can go unaccounced\n      if (isMac) {\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n          setTimeout(() => {\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\n          }, 0);\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n\n    // Only detach/attach on mac as otherwise messages can go unaccounced\n    if (isMac) {\n      removeElementFromParent(this._liveRegion);\n    }\n  }\n\n  private _handleKey(keyChar: string): void {\n    this._clearLiveRegion();\n    // Only add the char if there is no control character.\n    if (!/\\p{Control}/u.test(keyChar)) {\n      this._charsToConsume.push(keyChar);\n    }\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._renderRowsDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n        } else {\n          element.textContent = lineData;\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.css.cell.height) {\n      return;\n    }\n    this._accessibilityTreeRoot.style.width = `${this._renderService.dimensions.css.canvas.width}px`;\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._handleResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.css.cell.height}px`;\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\nimport { TwoKeyMap } from 'common/MultiKeyMap';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: TwoKeyMap</* bg */number, /* fg */number, IColor | null> = new TwoKeyMap();\n  private _css: TwoKeyMap</* bg */number, /* fg */number, string | null> = new TwoKeyMap();\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    this._css.set(bg, fg, value);\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._css.get(bg, fg);\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    this._color.set(bg, fg, value);\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color.get(bg, fg);\n  }\n\n  public clear(): void {\n    this._color.clear();\n    this._css.clear();\n  }\n}\n", "/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function removeElementFromParent(...elements: (HTMLElement | undefined)[]): void {\n  for (const e of elements) {\n    e?.parentElement?.removeChild(e);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param node The node to add a listener to.\n * @param type The event type.\n * @param handler The handler for the listener.\n * @param options The boolean or options object to pass on to the event\n * listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifier2, ILinkProvider, IBufferCellPosition, ILink, ILinkifierEvent, ILinkDecorations, ILinkWithState } from 'browser/Types';\nimport { IDisposable } from 'common/Types';\nimport { IMouseService, IRenderService } from './services/Services';\nimport { IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable, getDisposeArrayDisposable, disposeArray, toDisposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\n\nexport class Linkifier2 extends Disposable implements ILinkifier2 {\n  private _element: HTMLElement | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _linkProviders: ILinkProvider[] = [];\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _mouseDownLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private readonly _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onShowLinkUnderline = this._onShowLinkUnderline.event;\n  private readonly _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onHideLinkUnderline = this._onHideLinkUnderline.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n    this.register(toDisposable(() => {\n      this._lastMouseEvent = undefined;\n    }));\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this._linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this._linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public attachToDom(element: HTMLElement, mouseService: IMouseService, renderService: IRenderService): void {\n    this._element = element;\n    this._mouseService = mouseService;\n    this._renderService = renderService;\n\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._handleMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mousedown', this._handleMouseDown.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mouseup', this._handleMouseUp.bind(this)));\n  }\n\n  private _handleMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    if (!this._element || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._handleHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _handleHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    for (const [i, linkProvider] of this._linkProviders.entries()) {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    }\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _handleMouseDown(): void {\n    this._mouseDownLink = this._currentLink;\n  }\n\n  private _handleMouseUp(event: MouseEvent): void {\n    if (!this._element || !this._mouseService || !this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n\n    if (this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._element || !this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._element || !this._lastMouseEvent || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element?.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Add listener for rerendering\n      if (this._renderService) {\n        this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(e => {\n          // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n          // cleared.\n          const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n          const oldEvent = this._currentLink ? this._lastMouseEvent : undefined;\n          this._clearCurrentLink(start, e.end + 1 + this._bufferService.buffer.ydisp);\n          if (oldEvent && this._element) {\n            // re-eval previously active link after changes\n            const position = this._positionFromMouseEvent(oldEvent, this._element, this._mouseService!);\n            if (position) {\n              this._askForLink(position, false);\n            }\n          }\n        }));\n      }\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const lower = link.range.start.y * this._bufferService.cols + link.range.start.x;\n    const upper = link.range.end.y * this._bufferService.cols + link.range.end.x;\n    const current = position.y * this._bufferService.cols + position.x;\n    return (lower <= current && current <= upper);\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// This file contains strings that get exported in the API so they can be localized\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILink, ILinkProvider } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IOptionsService, IOscLinkService } from 'common/services/Services';\n\nexport class OscLinkProvider implements ILinkProvider {\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IOscLinkService private readonly _oscLinkService: IOscLinkService\n  ) {\n  }\n\n  public provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void {\n    const line = this._bufferService.buffer.lines.get(y - 1);\n    if (!line) {\n      callback(undefined);\n      return;\n    }\n\n    const result: ILink[] = [];\n    const linkHandler = this._optionsService.rawOptions.linkHandler;\n    const cell = new CellData();\n    const lineLength = line.getTrimmedLength();\n    let currentLinkId = -1;\n    let currentStart = -1;\n    let finishLink = false;\n    for (let x = 0; x < lineLength; x++) {\n      // Minor optimization, only check for content if there isn't a link in case the link ends with\n      // a null cell\n      if (currentStart === -1 && !line.hasContent(x)) {\n        continue;\n      }\n\n      line.loadCell(x, cell);\n      if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n        if (currentStart === -1) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n          continue;\n        } else {\n          finishLink = cell.extended.urlId !== currentLinkId;\n        }\n      } else {\n        if (currentStart !== -1) {\n          finishLink = true;\n        }\n      }\n\n      if (finishLink || (currentStart !== -1 && x === lineLength - 1)) {\n        const text = this._oscLinkService.getLinkData(currentLinkId)?.uri;\n        if (text) {\n          // These ranges are 1-based\n          const range: IBufferRange = {\n            start: {\n              x: currentStart + 1,\n              y\n            },\n            end: {\n              // Offset end x if it's a link that ends on the last cell in the line\n              x: x + (!finishLink && x === lineLength - 1 ? 1 : 0),\n              y\n            }\n          };\n\n          let ignoreLink = false;\n          if (!linkHandler?.allowNonHttpProtocols) {\n            try {\n              const parsed = new URL(text);\n              if (!['http:', 'https:'].includes(parsed.protocol)) {\n                ignoreLink = true;\n              }\n            } catch (e) {\n              // Ignore invalid URLs to prevent unexpected behaviors\n              ignoreLink = true;\n            }\n          }\n\n          if (!ignoreLink) {\n            // OSC links always use underline and pointer decorations\n            result.push({\n              text,\n              range,\n              activate: (e, text) => (linkHandler ? linkHandler.activate(e, text, range) : defaultActivate(e, text)),\n              hover: (e, text) => linkHandler?.hover?.(e, text, range),\n              leave: (e, text) => linkHandler?.leave?.(e, text, range)\n            });\n          }\n        }\n        finishLink = false;\n\n        // Clear link or start a new link if one starts immediately\n        if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n        } else {\n          currentStart = -1;\n          currentLinkId = -1;\n        }\n      }\n    }\n\n    // TODO: Handle fetching and returning other link ranges to underline other links with the same id\n    callback(result);\n  }\n}\n\nfunction defaultActivate(e: MouseEvent, uri: string): void {\n  const answer = confirm(`Do you want to navigate to ${uri}?\\n\\nWARNING: This link could potentially be dangerous`);\n  if (answer) {\n    const newWindow = window.open();\n    if (newWindow) {\n      try {\n        newWindow.opener = null;\n      } catch {\n        // no-op, Electron can throw\n      }\n      newWindow.location.href = uri;\n    } else {\n      console.warn('Opening link blocked as opener could not be cleared');\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncerWithCallback {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n  private _refreshCallbacks: FrameRequestCallback[] = [];\n\n  constructor(\n    private _parentWindow: Window,\n    private _renderCallback: (start: number, end: number) => void\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      this._parentWindow.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    this._refreshCallbacks.push(callback);\n    if (!this._animationFrame) {\n      this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n    }\n    return this._animationFrame;\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    this._animationFrame = undefined;\n\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      this._runRefreshCallbacks();\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n    this._runRefreshCallbacks();\n  }\n\n  private _runRefreshCallbacks(): void {\n    for (const callback of this._refreshCallbacks) {\n      callback(0);\n    }\n    this._refreshCallbacks = [];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable, toDisposable } from 'common/Lifecycle';\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _listener: ScreenDprListener | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n\n  constructor(private _parentWindow: Window) {\n    super();\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this.register(toDisposable(() => {\n      this.clearListener();\n    }));\n  }\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      if (!this._listener) {\n        return;\n      }\n      this._listener(this._parentWindow.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this._resolutionMediaMatchList = this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._listener = undefined;\n    this._outerListener = undefined;\n  }\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { ICompositionHelper, ITerminal, IBrowser, CustomKeyEventHandler, IViewport, ILinkifier2, CharacterJoinerHandler, IBufferRange } from 'browser/Types';\nimport { IRenderer } from 'browser/renderer/shared/Types';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { Viewport } from 'browser/Viewport';\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, handlePasteEvent, copyHandler, paste } from 'browser/Clipboard';\nimport { C0, C1_ESCAPED } from 'common/data/EscapeSequences';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport * as Browser from 'common/Platform';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { AccessibilityManager } from './AccessibilityManager';\nimport { ITheme, IMarker, IDisposable, ILinkProvider, IDecorationOptions, IDecoration } from 'xterm';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { KeyboardResultType, CoreMouseEventType, CoreMouseButton, CoreMouseAction, ITerminalOptions, ScrollSource, IColorEvent, ColorIndex, ColorRequestType } from 'common/Types';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { RenderService } from 'browser/services/RenderService';\nimport { ICharSizeService, IRenderService, IMouseService, ISelectionService, ICoreBrowserService, ICharacterJoinerService, IThemeService } from 'browser/services/Services';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { IBuffer } from 'common/buffer/Types';\nimport { MouseService } from 'browser/services/MouseService';\nimport { Linkifier2 } from 'browser/Linkifier2';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { color, rgba } from 'common/Color';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { toRgbString } from 'common/input/XParseColor';\nimport { BufferDecorationRenderer } from 'browser/decorations/BufferDecorationRenderer';\nimport { OverviewRulerRenderer } from 'browser/decorations/OverviewRulerRenderer';\nimport { DecorationService } from 'common/services/DecorationService';\nimport { IDecorationService } from 'common/services/Services';\nimport { OscLinkProvider } from 'browser/OscLinkProvider';\nimport { toDisposable } from 'common/Lifecycle';\nimport { ThemeService } from 'browser/services/ThemeService';\n\n// Let it work inside Node.js for automated testing purposes.\nconst document: Document = (typeof window !== 'undefined') ? window.document : null as any;\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  private _overviewRulerRenderer: OverviewRulerRenderer | undefined;\n\n  // private _visualBellTimer: number;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n\n  // browser services\n  private _decorationService: DecorationService;\n  private _charSizeService: ICharSizeService | undefined;\n  private _coreBrowserService: ICoreBrowserService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _themeService: IThemeService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether a keydown event has occured since the last keyup event, i.e. whether a key\n   * is currently \"pressed\".\n   */\n  private _keyDownSeen: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public linkifier2: ILinkifier2;\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _accessibilityManager: AccessibilityManager | undefined;\n\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onKey = this.register(new EventEmitter<{ key: string, domEvent: KeyboardEvent }>());\n  public readonly onKey = this._onKey.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onBell = this.register(new EventEmitter<void>());\n  public readonly onBell = this._onBell.event;\n\n  private _onFocus = this.register(new EventEmitter<void>());\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = this.register(new EventEmitter<void>());\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = this.register(new EventEmitter<string>());\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = this.register(new EventEmitter<number>());\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n  private _onWillOpen = this.register(new EventEmitter<HTMLElement>());\n  public get onWillOpen(): IEvent<HTMLElement> { return this._onWillOpen.event; }\n\n  /**\n   * Creates a new `Terminal` object.\n   *\n   * @param options An object containing a set of options, the available options are:\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\n   *\n   * @public\n   * @class Xterm Xterm\n   * @alias module:xterm/src/xterm\n   */\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this.linkifier2 = this.register(this._instantiationService.createInstance(Linkifier2));\n    this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(OscLinkProvider));\n    this._decorationService = this._instantiationService.createInstance(DecorationService);\n    this._instantiationService.setService(IDecorationService, this._decorationService);\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this._onBell.fire()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n\n    this.register(toDisposable(() => {\n      this._customKeyEventHandler = undefined;\n      this.element?.parentNode?.removeChild(this.element);\n    }));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._themeService) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi';\n      let ident = '';\n      switch (req.index) {\n        case ColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case ColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case ColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      switch (req.type) {\n        case ColorRequestType.REPORT:\n          const channels = color.toColorRGB(acc === 'ansi'\n            ? this._themeService.colors.ansi[req.index]\n            : this._themeService.colors[acc]);\n          this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(channels)}${C1_ESCAPED.ST}`);\n          break;\n        case ColorRequestType.SET:\n          if (acc === 'ansi') {\n            this._themeService.modifyColors(colors => colors.ansi[req.index] = rgba.toColor(...req.color));\n          } else {\n            const narrowedAcc = acc;\n            this._themeService.modifyColors(colors => colors[narrowedAcc] = rgba.toColor(...req.color));\n          }\n          break;\n        case ColorRequestType.RESTORE:\n          this._themeService.restoreColor(req.index);\n          break;\n      }\n    }\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  private _handleScreenReaderModeOptionChange(value: boolean): void {\n    if (value) {\n      if (!this._accessibilityManager && this._renderService) {\n        this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n      }\n    } else {\n      this._accessibilityManager?.dispose();\n      this._accessibilityManager = undefined;\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _handleTextAreaFocus(ev: KeyboardEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.updateCursorStyle(ev);\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _handleTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.css.cell.height;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.css.cell.width * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.css.cell.height;\n    const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    this._document = parent.ownerDocument!;\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    this.element.setAttribute('tabindex', '0');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = document.createDocumentFragment();\n    this._viewportElement = document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n\n    this._viewportScrollArea = document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    if (!Browser.isChromeOS) {\n      // ChromeVox on ChromeOS does not like this. See\n      // https://issuetracker.google.com/issues/260170397\n      this.textarea.setAttribute('aria-multiline', 'false');\n    }\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n\n    // Register the core browser service before the generic textarea handlers are registered so it\n    // handles them first. Otherwise the renderers may use the wrong focus state.\n    this._coreBrowserService = this._instantiationService.createInstance(CoreBrowserService, this.textarea, this._document.defaultView ?? window);\n    this._instantiationService.setService(ICoreBrowserService, this._coreBrowserService);\n\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._handleTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._handleTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._themeService = this._instantiationService.createInstance(ThemeService);\n    this._instantiationService.setService(IThemeService, this._themeService);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedViewportChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    try {\n      this._onWillOpen.fire(this.element);\n    }\n    catch { /* fails to load addon for some reason */ }\n    if (!this._renderService.hasRenderer()) {\n      this._renderService.setRenderer(this._createRenderer());\n    }\n\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.viewport = this._instantiationService.createInstance(Viewport,\n      (amount: number) => this.scrollLines(amount, true, ScrollSource.VIEWPORT),\n      this._viewportElement,\n      this._viewportScrollArea\n    );\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.handleCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.handleResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.handleBlur()));\n    this.register(this.onFocus(() => this._renderService!.handleFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier2\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.handleSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService);\n    this.register(this._instantiationService.createInstance(BufferDecorationRenderer, this.screenElement));\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.handleMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n    }\n    this.register(this.optionsService.onSpecificOptionChange('screenReaderMode', e => this._handleScreenReaderModeOptionChange(e)));\n\n    if (this.options.overviewRulerWidth) {\n      this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n    }\n    this.optionsService.onSpecificOptionChange('overviewRulerWidth', value => {\n      if (!this._overviewRulerRenderer && value && this._viewportElement && this.screenElement) {\n        this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n      }\n    });\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    return this._instantiationService.createInstance(DomRenderer, this.element!, this.screenElement!, this._viewportElement!, this.linkifier2);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getMouseReportCoords(ev, self.screenElement!);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          const amount = self.viewport!.getLinesScrolled(ev as WheelEvent);\n\n          if (amount === 0) {\n            return false;\n          }\n\n          action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.col,\n        row: pos.row,\n        x: pos.x,\n        y: pos.y,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.handleWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.handleTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.handleTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    super.scrollLines(disp, suppressScrollEvent, source);\n    this.refresh(0, this.rows - 1);\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService);\n  }\n\n  /**\n   * Attaches a custom key event handler which is run before keys are processed,\n   * giving consumers of xterm.js ultimate control as to what keys should be\n   * processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns whether\n   * the event should be processed by xterm.js.\n   */\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this.linkifier2.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    return this._decorationService.registerDecoration(decorationOptions);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): IBufferRange | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      start: {\n        x: this._selectionService.selectionStart![0],\n        y: this._selectionService.selectionStart![1]\n      },\n      end: {\n        x: this._selectionService.selectionEnd![0],\n        y: this._selectionService.selectionEnd![1]\n      }\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown [KeyboardEvent].\n   *\n   * [KeyboardEvent]: https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n    this._keyDownSeen = true;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    // Ignore composing with Alt key on Mac when macOptionIsMeta is enabled\n    const shouldIgnoreComposition = this.browser.isMac && this.options.macOptionIsMeta && event.altKey;\n\n    if (!shouldIgnoreComposition && !this._compositionHelper!.keydown(event)) {\n      if (this.options.scrollOnUserInput && this.buffer.ybase !== this.buffer.ydisp) {\n        this._bufferService.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (!shouldIgnoreComposition && (event.key === 'Dead' || event.key === 'AltGraph')) {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    // HACK: Process A-Z in the keypress event to fix an issue with macOS IMEs where lower case\n    // letters cannot be input while caps lock is on.\n    if (event.key && !event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n      if (event.key.charCodeAt(0) >= 65 && event.key.charCodeAt(0) <= 90) {\n        return true;\n      }\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, we don't cancel them (unless ctrl or alt\n    // is also depressed) so that the cursor textarea can be updated, which triggers the screen\n    // reader to read it.\n    if (!this.optionsService.rawOptions.screenReaderMode || event.altKey || event.ctrlKey) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    this._keyDownSeen = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    // Based on these event traces: https://github.com/xtermjs/xterm.js/issues/3679\n    if (ev.data && ev.inputType === 'insertText' && (!ev.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.clearAllMarkers();\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this.refresh(0, this.rows - 1);\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n    this._decorationService.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n    this.viewport?.syncScrollArea();\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.css.canvas.width.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.css.canvas.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.css.cell.width.toFixed(0);\n        const cellHeight = this._renderService.dimensions.css.cell.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IViewport, ReadonlyColorSet } from 'browser/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\ninterface ISmoothScrollState {\n  startTime: number;\n  origin: number;\n  target: number;\n}\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentDeviceCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n  private _smoothScrollState: ISmoothScrollState = {\n    startTime: 0,\n    origin: -1,\n    target: -1\n  };\n\n  constructor(\n    private readonly _scrollLines: (amount: number) => void,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\n    // therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._handleScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    this._handleThemeChange(themeService.colors);\n    this.register(themeService.onChangeColors(e => this._handleThemeChange(e)));\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.syncScrollArea()));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  private _handleThemeChange(colors: ReadonlyColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderService.dimensions.device.cell.height / this._coreBrowserService.dpr;\n      this._currentDeviceCellHeight = this._renderService.dimensions.device.cell.height;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.css.canvas.height);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.css.canvas.height) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.device.cell.height !== this._currentDeviceCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _handleScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._scrollLines(0);\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._scrollLines(diff);\n  }\n\n  private _smoothScroll(): void {\n    // Check valid state\n    if (this._isDisposed || this._smoothScrollState.origin === -1 || this._smoothScrollState.target === -1) {\n      return;\n    }\n\n    // Calculate position complete\n    const percent = this._smoothScrollPercent();\n    this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(percent * (this._smoothScrollState.target - this._smoothScrollState.origin));\n\n    // Continue or finish smooth scroll\n    if (percent < 1) {\n      this._coreBrowserService.window.requestAnimationFrame(() => this._smoothScroll());\n    } else {\n      this._clearSmoothScrollState();\n    }\n  }\n\n  private _smoothScrollPercent(): number {\n    if (!this._optionsService.rawOptions.smoothScrollDuration || !this._smoothScrollState.startTime) {\n      return 1;\n    }\n    return Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0);\n  }\n\n  private _clearSmoothScrollState(): void {\n    this._smoothScrollState.startTime = 0;\n    this._smoothScrollState.origin = -1;\n    this._smoothScrollState.target = -1;\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public handleWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._viewportElement.scrollTop += amount;\n    } else {\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        if (this._smoothScrollState.target === -1) {\n          this._smoothScrollState.target = this._viewportElement.scrollTop + amount;\n        } else {\n          this._smoothScrollState.target += amount;\n        }\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n    return this._bubbleScroll(ev, amount);\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public handleTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public handleTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration } from 'common/services/Services';\n\nexport class BufferDecorationRenderer extends Disposable {\n  private readonly _container: HTMLElement;\n  private readonly _decorationElements: Map<IInternalDecoration, HTMLElement> = new Map();\n\n  private _animationFrame: number | undefined;\n  private _altBufferIsActive: boolean = false;\n  private _dimensionsChanged: boolean = false;\n\n  constructor(\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    this._container = document.createElement('div');\n    this._container.classList.add('xterm-decoration-container');\n    this._screenElement.appendChild(this._container);\n\n    this.register(this._renderService.onRenderedViewportChange(() => this._doRefreshDecorations()));\n    this.register(this._renderService.onDimensionsChange(() => {\n      this._dimensionsChanged = true;\n      this._queueRefresh();\n    }));\n    this.register(addDisposableDomListener(window, 'resize', () => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n    }));\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh()));\n    this.register(this._decorationService.onDecorationRemoved(decoration => this._removeDecoration(decoration)));\n    this.register(toDisposable(() => {\n      this._container.remove();\n      this._decorationElements.clear();\n    }));\n  }\n\n  private _queueRefresh(): void {\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._renderService.addRefreshCallback(() => {\n      this._doRefreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n\n  private _doRefreshDecorations(): void {\n    for (const decoration of this._decorationService.decorations) {\n      this._renderDecoration(decoration);\n    }\n    this._dimensionsChanged = false;\n  }\n\n  private _renderDecoration(decoration: IInternalDecoration): void {\n    this._refreshStyle(decoration);\n    if (this._dimensionsChanged) {\n      this._refreshXPosition(decoration);\n    }\n  }\n\n  private _createElement(decoration: IInternalDecoration): HTMLElement {\n    const element = document.createElement('div');\n    element.classList.add('xterm-decoration');\n    element.style.width = `${Math.round((decoration.options.width || 1) * this._renderService.dimensions.css.cell.width)}px`;\n    element.style.height = `${(decoration.options.height || 1) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.top = `${(decoration.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.lineHeight = `${this._renderService.dimensions.css.cell.height}px`;\n\n    const x = decoration.options.x ?? 0;\n    if (x && x > this._bufferService.cols) {\n      // exceeded the container width, so hide\n      element.style.display = 'none';\n    }\n    this._refreshXPosition(decoration, element);\n\n    return element;\n  }\n\n  private _refreshStyle(decoration: IInternalDecoration): void {\n    const line = decoration.marker.line - this._bufferService.buffers.active.ydisp;\n    if (line < 0 || line >= this._bufferService.rows) {\n      // outside of viewport\n      if (decoration.element) {\n        decoration.element.style.display = 'none';\n        decoration.onRenderEmitter.fire(decoration.element);\n      }\n    } else {\n      let element = this._decorationElements.get(decoration);\n      if (!element) {\n        element = this._createElement(decoration);\n        decoration.element = element;\n        this._decorationElements.set(decoration, element);\n        this._container.appendChild(element);\n      }\n      element.style.top = `${line * this._renderService.dimensions.css.cell.height}px`;\n      element.style.display = this._altBufferIsActive ? 'none' : 'block';\n      decoration.onRenderEmitter.fire(element);\n    }\n  }\n\n  private _refreshXPosition(decoration: IInternalDecoration, element: HTMLElement | undefined = decoration.element): void {\n    if (!element) {\n      return;\n    }\n    const x = decoration.options.x ?? 0;\n    if ((decoration.options.anchor || 'left') === 'right') {\n      element.style.right = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    } else {\n      element.style.left = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    }\n  }\n\n  private _removeDecoration(decoration: IInternalDecoration): void {\n    this._decorationElements.get(decoration)?.remove();\n    this._decorationElements.delete(decoration);\n    decoration.dispose();\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInternalDecoration } from 'common/services/Services';\n\nexport interface IColorZoneStore {\n  readonly zones: IColorZone[];\n  clear(): void;\n  addDecoration(decoration: IInternalDecoration): void;\n  /**\n   * Sets the amount of padding in lines that will be added between zones, if new lines intersect\n   * the padding they will be merged into the same zone.\n   */\n  setPadding(padding: { [position: string]: number }): void;\n}\n\nexport interface IColorZone {\n  /** Color in a format supported by canvas' fillStyle. */\n  color: string;\n  position: 'full' | 'left' | 'center' | 'right' | undefined;\n  startBufferLine: number;\n  endBufferLine: number;\n}\n\ninterface IMinimalDecorationForColorZone {\n  marker: Pick<IInternalDecoration['marker'], 'line'>;\n  options: Pick<IInternalDecoration['options'], 'overviewRulerOptions'>;\n}\n\nexport class ColorZoneStore implements IColorZoneStore {\n  private _zones: IColorZone[] = [];\n\n  // The zone pool is used to keep zone objects from being freed between clearing the color zone\n  // store and fetching the zones. This helps reduce GC pressure since the color zones are\n  // accumulated on potentially every scroll event.\n  private _zonePool: IColorZone[] = [];\n  private _zonePoolIndex = 0;\n\n  private _linePadding: { [position: string]: number } = {\n    full: 0,\n    left: 0,\n    center: 0,\n    right: 0\n  };\n\n  public get zones(): IColorZone[] {\n    // Trim the zone pool to free unused memory\n    this._zonePool.length = Math.min(this._zonePool.length, this._zones.length);\n    return this._zones;\n  }\n\n  public clear(): void {\n    this._zones.length = 0;\n    this._zonePoolIndex = 0;\n  }\n\n  public addDecoration(decoration: IMinimalDecorationForColorZone): void {\n    if (!decoration.options.overviewRulerOptions) {\n      return;\n    }\n    for (const z of this._zones) {\n      if (z.color === decoration.options.overviewRulerOptions.color &&\n          z.position === decoration.options.overviewRulerOptions.position) {\n        if (this._lineIntersectsZone(z, decoration.marker.line)) {\n          return;\n        }\n        if (this._lineAdjacentToZone(z, decoration.marker.line, decoration.options.overviewRulerOptions.position)) {\n          this._addLineToZone(z, decoration.marker.line);\n          return;\n        }\n      }\n    }\n    // Create using zone pool if possible\n    if (this._zonePoolIndex < this._zonePool.length) {\n      this._zonePool[this._zonePoolIndex].color = decoration.options.overviewRulerOptions.color;\n      this._zonePool[this._zonePoolIndex].position = decoration.options.overviewRulerOptions.position;\n      this._zonePool[this._zonePoolIndex].startBufferLine = decoration.marker.line;\n      this._zonePool[this._zonePoolIndex].endBufferLine = decoration.marker.line;\n      this._zones.push(this._zonePool[this._zonePoolIndex++]);\n      return;\n    }\n    // Create\n    this._zones.push({\n      color: decoration.options.overviewRulerOptions.color,\n      position: decoration.options.overviewRulerOptions.position,\n      startBufferLine: decoration.marker.line,\n      endBufferLine: decoration.marker.line\n    });\n    this._zonePool.push(this._zones[this._zones.length - 1]);\n    this._zonePoolIndex++;\n  }\n\n  public setPadding(padding: { [position: string]: number }): void {\n    this._linePadding = padding;\n  }\n\n  private _lineIntersectsZone(zone: IColorZone, line: number): boolean {\n    return (\n      line >= zone.startBufferLine &&\n      line <= zone.endBufferLine\n    );\n  }\n\n  private _lineAdjacentToZone(zone: IColorZone, line: number, position: IColorZone['position']): boolean {\n    return (\n      (line >= zone.startBufferLine - this._linePadding[position || 'full']) &&\n      (line <= zone.endBufferLine + this._linePadding[position || 'full'])\n    );\n  }\n\n  private _addLineToZone(zone: IColorZone, line: number): void {\n    zone.startBufferLine = Math.min(zone.startBufferLine, line);\n    zone.endBufferLine = Math.max(zone.endBufferLine, line);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorZoneStore, IColorZone, IColorZoneStore } from 'browser/decorations/ColorZoneStore';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\n// Helper objects to avoid excessive calculation and garbage collection during rendering. These are\n// static values for each render and can be accessed using the decoration position as the key.\nconst drawHeight = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawWidth = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawX = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\n\nexport class OverviewRulerRenderer extends Disposable {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _colorZoneStore: IColorZoneStore = new ColorZoneStore();\n  private get _width(): number {\n    return this._optionsService.options.overviewRulerWidth || 0;\n  }\n  private _animationFrame: number | undefined;\n\n  private _shouldUpdateDimensions: boolean | undefined = true;\n  private _shouldUpdateAnchor: boolean | undefined = true;\n  private _lastKnownBufferLength: number = 0;\n\n  private _containerHeight: number | undefined;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowseService: ICoreBrowserService\n  ) {\n    super();\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add('xterm-decoration-overview-ruler');\n    this._refreshCanvasDimensions();\n    this._viewportElement.parentElement?.insertBefore(this._canvas, this._viewportElement);\n    const ctx = this._canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Ctx cannot be null');\n    } else {\n      this._ctx = ctx;\n    }\n    this._registerDecorationListeners();\n    this._registerBufferChangeListeners();\n    this._registerDimensionChangeListeners();\n    this.register(toDisposable(() => {\n      this._canvas?.remove();\n    }));\n  }\n\n  /**\n   * On decoration add or remove, redraw\n   */\n  private _registerDecorationListeners(): void {\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(undefined, true)));\n    this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(undefined, true)));\n  }\n\n  /**\n   * On buffer change, redraw\n   * and hide the canvas if the alt buffer is active\n   */\n  private _registerBufferChangeListeners(): void {\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._canvas!.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? 'none' : 'block';\n    }));\n    this.register(this._bufferService.onScroll(() => {\n      if (this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length) {\n        this._refreshDrawHeightConstants();\n        this._refreshColorZonePadding();\n      }\n    }));\n  }\n  /**\n   * On dimension change, update canvas dimensions\n   * and then redraw\n   */\n  private _registerDimensionChangeListeners(): void {\n    // container height changed\n    this.register(this._renderService.onRender((): void => {\n      if (!this._containerHeight || this._containerHeight !== this._screenElement.clientHeight) {\n        this._queueRefresh(true);\n        this._containerHeight = this._screenElement.clientHeight;\n      }\n    }));\n    // overview ruler width changed\n    this.register(this._optionsService.onSpecificOptionChange('overviewRulerWidth', () => this._queueRefresh(true)));\n    // device pixel ratio changed\n    this.register(addDisposableDomListener(this._coreBrowseService.window, 'resize', () => this._queueRefresh(true)));\n    // set the canvas dimensions\n    this._queueRefresh(true);\n  }\n\n  private _refreshDrawConstants(): void {\n    // width\n    const outerWidth = Math.floor(this._canvas.width / 3);\n    const innerWidth = Math.ceil(this._canvas.width / 3);\n    drawWidth.full = this._canvas.width;\n    drawWidth.left = outerWidth;\n    drawWidth.center = innerWidth;\n    drawWidth.right = outerWidth;\n    // height\n    this._refreshDrawHeightConstants();\n    // x\n    drawX.full = 0;\n    drawX.left = 0;\n    drawX.center = drawWidth.left;\n    drawX.right = drawWidth.left + drawWidth.center;\n  }\n\n  private _refreshDrawHeightConstants(): void {\n    drawHeight.full = Math.round(2 * this._coreBrowseService.dpr);\n    // Calculate actual pixels per line\n    const pixelsPerLine = this._canvas.height / this._bufferService.buffer.lines.length;\n    // Clamp actual pixels within a range\n    const nonFullHeight = Math.round(Math.max(Math.min(pixelsPerLine, 12), 6) * this._coreBrowseService.dpr);\n    drawHeight.left = nonFullHeight;\n    drawHeight.center = nonFullHeight;\n    drawHeight.right = nonFullHeight;\n  }\n\n  private _refreshColorZonePadding(): void {\n    this._colorZoneStore.setPadding({\n      full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.full),\n      left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.left),\n      center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.center),\n      right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.right)\n    });\n    this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n  }\n\n  private _refreshCanvasDimensions(): void {\n    this._canvas.style.width = `${this._width}px`;\n    this._canvas.width = Math.round(this._width * this._coreBrowseService.dpr);\n    this._canvas.style.height = `${this._screenElement.clientHeight}px`;\n    this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowseService.dpr);\n    this._refreshDrawConstants();\n    this._refreshColorZonePadding();\n  }\n\n  private _refreshDecorations(): void {\n    if (this._shouldUpdateDimensions) {\n      this._refreshCanvasDimensions();\n    }\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._colorZoneStore.clear();\n    for (const decoration of this._decorationService.decorations) {\n      this._colorZoneStore.addDecoration(decoration);\n    }\n    this._ctx.lineWidth = 1;\n    const zones = this._colorZoneStore.zones;\n    for (const zone of zones) {\n      if (zone.position !== 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    for (const zone of zones) {\n      if (zone.position === 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    this._shouldUpdateDimensions = false;\n    this._shouldUpdateAnchor = false;\n  }\n\n  private _renderColorZone(zone: IColorZone): void {\n    this._ctx.fillStyle = zone.color;\n    this._ctx.fillRect(\n      /* x */ drawX[zone.position || 'full'],\n      /* y */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        (zone.startBufferLine / this._bufferService.buffers.active.lines.length) - drawHeight[zone.position || 'full'] / 2\n      ),\n      /* w */ drawWidth[zone.position || 'full'],\n      /* h */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        ((zone.endBufferLine - zone.startBufferLine) / this._bufferService.buffers.active.lines.length) + drawHeight[zone.position || 'full']\n      )\n    );\n  }\n\n  private _queueRefresh(updateCanvasDimensions?: boolean, updateAnchor?: boolean): void {\n    this._shouldUpdateDimensions = updateCanvasDimensions || this._shouldUpdateDimensions;\n    this._shouldUpdateAnchor = updateAnchor || this._shouldUpdateAnchor;\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._coreBrowseService.window.requestAnimationFrame(() => {\n      this._refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\nimport { C0 } from 'common/data/EscapeSequences';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @returns Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n\n        const diff = newValue.replace(oldValue, '');\n\n        this._dataAlreadySent = diff;\n\n        if (newValue.length > oldValue.length) {\n          this._coreService.triggerDataEvent(diff, true);\n        } else if (newValue.length < oldValue.length) {\n          this._coreService.triggerDataEvent(`${C0.DEL}`, true);\n        } else if ((newValue.length === oldValue.length) && (newValue !== oldValue)) {\n          this._coreService.triggerDataEvent(newValue, true);\n        }\n\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.css.cell.height;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.css.cell.height;\n      const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  const elementStyle = window.getComputedStyle(element);\n  const leftPadding = parseInt(elementStyle.getPropertyValue('padding-left'));\n  const topPadding = parseInt(elementStyle.getPropertyValue('padding-top'));\n  return [\n    event.clientX - rect.left - leftPadding,\n    event.clientY - rect.top - topPadding\n  ];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param window The window object the element belongs to.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param hasValidCharSize Whether there is a valid character size available.\n * @param cssCellWidth The cell width device pixel render dimensions.\n * @param cssCellHeight The cell height device pixel render dimensions.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(window: Pick<Window, 'getComputedStyle'>, event: Pick<MouseEvent, 'clientX' | 'clientY'>, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, cssCellWidth: number, cssCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(window, event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? cssCellWidth / 2 : 0)) / cssCellWidth);\n  coords[1] = Math.ceil(coords[1] / cssCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(startY, bufferService), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(currentRow: number, bufferService: IBufferService): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param str The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { removeElementFromParent } from 'browser/Dom';\nimport { BOLD_CLASS, CURSOR_BLINK_CLASS, CURSOR_CLASS, CURSOR_STYLE_BAR_CLASS, CURSOR_STYLE_BLOCK_CLASS, CURSOR_STYLE_UNDERLINE_CLASS, DomRendererRowFactory, ITALIC_CLASS } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { createRenderDimensions } from 'browser/renderer/shared/RendererUtils';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ILinkifier2, ILinkifierEvent, ReadonlyColorSet } from 'browser/Types';\nimport { color } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IInstantiationService, IOptionsService } from 'common/services/Services';\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n  private _cellToRowElements: Int16Array[] = [];\n\n  public dimensions: IRenderDimensions;\n\n  public readonly onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>()).event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = createRenderDimensions();\n    this._updateDimensions();\n    this.register(this._optionsService.onOptionChange(() => this._handleOptionsChanged()));\n\n    this.register(themeService.onChangeColors(e => this._injectCss(e)));\n    this._injectCss(themeService.colors);\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this.register(this._linkifier2.onShowLinkUnderline(e => this._handleLinkHover(e)));\n    this.register(this._linkifier2.onHideLinkUnderline(e => this._handleLinkLeave(e)));\n\n    this.register(toDisposable(() => {\n      this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n      // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n      // https://github.com/xtermjs/xterm.js/issues/2960\n      removeElementFromParent(this._rowContainer, this._selectionContainer, this._themeStyleElement, this._dimensionsStyleElement);\n    }));\n  }\n\n  private _updateDimensions(): void {\n    const dpr = this._coreBrowserService.dpr;\n    this.dimensions.device.char.width = this._charSizeService.width * dpr;\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * dpr);\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.device.char.left = 0;\n    this.dimensions.device.char.top = 0;\n    this.dimensions.device.canvas.width = this.dimensions.device.cell.width * this._bufferService.cols;\n    this.dimensions.device.canvas.height = this.dimensions.device.cell.height * this._bufferService.rows;\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / dpr);\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / dpr);\n    this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols;\n    this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.css.canvas.width}px`;\n      element.style.height = `${this.dimensions.css.cell.height}px`;\n      element.style.lineHeight = `${this.dimensions.css.cell.height}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      ` width: ${this.dimensions.css.cell.width}px` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;\n  }\n\n  private _injectCss(colors: ReadonlyColorSet): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    styles +=\n      `@keyframes blink_box_shadow` + `_` + this._terminalClass + ` {` +\n      ` 50% {` +\n      `  box-shadow: none;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes blink_block` + `_` + this._terminalClass + ` {` +\n      ` 0% {` +\n      `  background-color: ${colors.cursor.css};` +\n      `  color: ${colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: ${colors.cursorAccent.css};` +\n      `  color: ${colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}:not(.${FOCUS_CLASS}) .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` outline: 1px solid ${colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}:not(.${CURSOR_STYLE_BLOCK_CLASS}) {` +\n      ` animation: blink_box_shadow` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: blink_block` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${colors.cursor.css};` +\n      ` color: ${colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` box-shadow: 0 -1px 0 ${colors.cursor.css} inset;` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector}.focus .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionBackgroundOpaque.css};` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionInactiveBackgroundOpaque.css};` +\n      `}`;\n    // Colors\n    for (const [i, c] of colors.ansi.entries()) {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    }\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(colors.background).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    this._updateDimensions();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n  }\n\n  public handleCharSizeChanged(): void {\n    this._updateDimensions();\n  }\n\n  public handleBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n  }\n\n  public handleFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    while (this._selectionContainer.children.length) {\n      this._selectionContainer.removeChild(this._selectionContainer.children[0]);\n    }\n\n    this._rowFactory.handleSelectionChanged(start, end, columnSelectMode);\n    this.renderRows(0, this._bufferService.rows - 1);\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      const isXFlipped = start[0] > end[0];\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, isXFlipped ? end[0] : start[0], isXFlipped ? start[0] : end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = document.createElement('div');\n    element.style.height = `${rowCount * this.dimensions.css.cell.height}px`;\n    element.style.top = `${row * this.dimensions.css.cell.height}px`;\n    element.style.left = `${colStart * this.dimensions.css.cell.width}px`;\n    element.style.width = `${this.dimensions.css.cell.width * (colEnd - colStart)}px`;\n    return element;\n  }\n\n  public handleCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  private _handleOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      /**\n       * NOTE: This used to be `e.innerText = '';` but that doesn't work when using `jsdom` and `@testing-library/react`\n       *\n       * references:\n       * - https://github.com/testing-library/react-testing-library/issues/1146\n       * - https://github.com/jsdom/jsdom/issues/1245\n       */\n      e.replaceChildren();\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const cursorAbsoluteY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n\n    for (let y = start; y <= end; y++) {\n      const rowElement = this._rowElements[y];\n      const row = y + this._bufferService.buffer.ydisp;\n      const lineData = this._bufferService.buffer.lines.get(row);\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      if (!this._cellToRowElements[y] || this._cellToRowElements[y].length !== this._bufferService.cols) {\n        this._cellToRowElements[y] = new Int16Array(this._bufferService.cols);\n      }\n      rowElement.replaceChildren(this._rowFactory.createRow(lineData!, row, row === cursorAbsoluteY, cursorStyle, cursorX, cursorBlink, this.dimensions.css.cell.width, this._bufferService.cols, this._cellToRowElements[y]));\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _handleLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _handleLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    x = this._cellToRowElements[y][x];\n    x2 = this._cellToRowElements[y2][x2];\n\n    if (x === -1 || x2 === -1) {\n      return;\n    }\n\n    while (x !== x2 || y !== y2) {\n      const row = this._rowElements[y];\n      if (!row) {\n        return;\n      }\n      const span = row.children[x] as HTMLElement;\n      if (span) {\n        span.style.textDecoration = enabled ? 'underline' : 'none';\n      }\n      if (++x >= cols) {\n        x = 0;\n        y++;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, IColor } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { color, rgba } from 'common/Color';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { excludeFromContrastRatioDemands } from 'browser/renderer/shared/RendererUtils';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\nexport const BOLD_CLASS = 'xterm-bold';\nexport const DIM_CLASS = 'xterm-dim';\nexport const ITALIC_CLASS = 'xterm-italic';\nexport const UNDERLINE_CLASS = 'xterm-underline';\nexport const STRIKETHROUGH_CLASS = 'xterm-strikethrough';\nexport const CURSOR_CLASS = 'xterm-cursor';\nexport const CURSOR_BLINK_CLASS = 'xterm-cursor-blink';\nexport const CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\nexport const CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\nexport const CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  constructor(\n    private readonly _document: Document,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IThemeService private readonly _themeService: IThemeService\n  ) {}\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public createRow(lineData: IBufferLine, row: number, isCursorRow: boolean, cursorStyle: string | undefined, cursorX: number, cursorBlink: boolean, cellWidth: number, cols: number, cellMap: Int16Array): DocumentFragment {\n    // NOTE: `cellMap` maps cell positions to a span element index in a row.\n    // All positions should be updated, even skipped ones after wide chars or left overs at the end,\n    // otherwise the mouse hover logic might mark the wrong elements as underlined.\n\n    const fragment = this._document.createDocumentFragment();\n\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    // Find the line length first, this prevents the need to output a bunch of\n    // empty cells at the end. This cannot easily be integrated into the main\n    // loop below because of the colCount feature (which can be removed after we\n    // properly support reflow and disallow data to go beyond the right-side of\n    // the viewport).\n    let lineLength = 0;\n    for (let x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\n      if (lineData.loadCell(x, this._workCell).getCode() !== NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\n        lineLength = x + 1;\n        break;\n      }\n    }\n\n    const colors = this._themeService.colors;\n    let elemIndex = -1;\n\n    let x = 0;\n    for (; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      // still have to update cellMap with current element index\n      if (width === 0) {\n        cellMap[x] = elemIndex;\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const charElement = this._document.createElement('span');\n      if (width > 1) {\n        charElement.style.width = `${cellWidth * width}px`;\n      }\n\n      if (isJoined) {\n        // Ligatures in the DOM renderer must use display inline, as they may not show with\n        // inline-block if they are outside the bounds of the element\n        charElement.style.display = 'inline';\n\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorRow && x === cursorX) {\n        charElement.classList.add(CURSOR_CLASS);\n\n        if (cursorBlink) {\n          charElement.classList.add(CURSOR_BLINK_CLASS);\n        }\n\n        switch (cursorStyle) {\n          case 'bar':\n            charElement.classList.add(CURSOR_STYLE_BAR_CLASS);\n            break;\n          case 'underline':\n            charElement.classList.add(CURSOR_STYLE_UNDERLINE_CLASS);\n            break;\n          default:\n            charElement.classList.add(CURSOR_STYLE_BLOCK_CLASS);\n            break;\n        }\n      }\n\n      if (cell.isBold()) {\n        charElement.classList.add(BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        charElement.classList.add(ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        charElement.classList.add(DIM_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        charElement.textContent = WHITESPACE_CELL_CHAR;\n      } else {\n        charElement.textContent = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isUnderline()) {\n        charElement.classList.add(`${UNDERLINE_CLASS}-${cell.extended.underlineStyle}`);\n        if (charElement.textContent === ' ') {\n          charElement.textContent = '\\xa0'; // = &nbsp;\n        }\n        if (!cell.isUnderlineColorDefault()) {\n          if (cell.isUnderlineColorRGB()) {\n            charElement.style.textDecorationColor = `rgb(${AttributeData.toColorRGB(cell.getUnderlineColor()).join(',')})`;\n          } else {\n            let fg = cell.getUnderlineColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            charElement.style.textDecorationColor = colors.ansi[fg].css;\n          }\n        }\n      }\n\n      if (cell.isStrikethrough()) {\n        charElement.classList.add(STRIKETHROUGH_CLASS);\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Apply any decoration foreground/background overrides, this must happen after inverse has\n      // been applied\n      let bgOverride: IColor | undefined;\n      let fgOverride: IColor | undefined;\n      let isTop = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        if (d.options.layer !== 'top' && isTop) {\n          return;\n        }\n        if (d.backgroundColorRGB) {\n          bgColorMode = Attributes.CM_RGB;\n          bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          bgOverride = d.backgroundColorRGB;\n        }\n        if (d.foregroundColorRGB) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          fgOverride = d.foregroundColorRGB;\n        }\n        isTop = d.options.layer === 'top';\n      });\n\n      // Apply selection foreground if applicable\n      const isInSelection = this._isCellInSelection(x, row);\n      if (!isTop) {\n        if (colors.selectionForeground && isInSelection) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n          fgOverride = colors.selectionForeground;\n        }\n      }\n\n      // If in the selection, force the element to be above the selection to improve contrast and\n      // support opaque selections\n      if (isInSelection) {\n        bgOverride = this._coreBrowserService.isFocused ? colors.selectionBackgroundOpaque : colors.selectionInactiveBackgroundOpaque;\n        isTop = true;\n      }\n\n      // If it's a top decoration, render above the selection\n      if (isTop) {\n        charElement.classList.add(`xterm-decoration-top`);\n      }\n\n      // Background\n      let resolvedBg: IColor;\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          resolvedBg = colors.ansi[bg];\n          charElement.classList.add(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          resolvedBg = rgba.toColor(bg >> 16, bg >> 8 & 0xFF, bg & 0xFF);\n          this._addStyle(charElement, `background-color:#${padStart((bg >>> 0).toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            resolvedBg = colors.foreground;\n            charElement.classList.add(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          } else {\n            resolvedBg = colors.background;\n          }\n      }\n\n      // If there is no background override by now it's the original color, so apply dim if needed\n      if (!bgOverride) {\n        if (cell.isDim()) {\n          bgOverride = color.multiplyOpacity(resolvedBg, 0.5);\n        }\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.ansi[fg], cell, bgOverride, undefined)) {\n            charElement.classList.add(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = rgba.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, resolvedBg, color, cell, bgOverride, fgOverride)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.foreground, cell, bgOverride, undefined)) {\n            if (isInverse) {\n              charElement.classList.add(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      fragment.appendChild(charElement);\n      cellMap[x] = ++elemIndex;\n\n      x = lastCharX;\n    }\n\n    // since the loop above might exit early not handling all cells,\n    // also set remaining cell positions to last element index\n    if (x < cols - 1) {\n      cellMap.subarray(x).fill(++elemIndex);\n    }\n\n    return fragment;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor, cell: ICellData, bgOverride: IColor | undefined, fgOverride: IColor | undefined): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode())) {\n      return false;\n    }\n\n    // Try get from cache first, only use the cache when there are no decoration overrides\n    let adjustedColor: IColor | undefined | null = undefined;\n    if (!bgOverride && !fgOverride) {\n      adjustedColor = this._themeService.colors.contrastCache.getColor(bg.rgba, fg.rgba);\n    }\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      adjustedColor = color.ensureContrastRatio(bgOverride || bg, fgOverride || fg, this._optionsService.rawOptions.minimumContrastRatio);\n      this._themeService.colors.contrastCache.setColor((bgOverride || bg).rgba, (fgOverride || fg).rgba, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      if (start[0] <= end[0]) {\n        return x >= start[0] && y >= start[1] &&\n          x < end[0] && y <= end[1];\n      }\n      return x < start[0] && y >= start[1] &&\n        x >= end[0] && y <= end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDimensions, IOffset, IRenderDimensions } from 'browser/renderer/shared/Types';\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n\nexport function createRenderDimensions(): IRenderDimensions {\n  return {\n    css: {\n      canvas: createDimension(),\n      cell: createDimension()\n    },\n    device: {\n      canvas: createDimension(),\n      cell: createDimension(),\n      char: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    }\n  };\n}\n\nfunction createDimension(): IDimensions {\n  return {\n    width: 0,\n    height: 0\n  };\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        // Keep the whole wrapped word/line selected if the content wraps multiple lines\n        const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n        if (startPlusLength > this._bufferService.cols) {\n          return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n        }\n        return [Math.max(startPlusLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @returns Whether a refresh is necessary.\n   */\n  public handleTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\nimport { ITerminalOptions } from 'common/Types';\n\nexport class CharSizeService extends Disposable implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private readonly _onCharSizeChange = this.register(new EventEmitter<void>());\n  public readonly onCharSizeChange = this._onCharSizeChange.event;\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._measureStrategy = new DomMeasureStrategy(document, parentElement, this._optionsService);\n    this.register(this._optionsService.onMultipleOptionChange(['fontFamily', 'fontSize'], () => this.measure()));\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): IReadonlyMeasureResult;\n}\n\ninterface IReadonlyMeasureResult {\n  readonly width: number;\n  readonly height: number;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\n// TODO: For supporting browsers we should also provide a CanvasCharDimensionsProvider that uses ctx.measureText\nclass DomMeasureStrategy implements IMeasureStrategy {\n  private _result: IMeasureResult = { width: 0, height: 0 };\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W';\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): IReadonlyMeasureResult {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    const geometry = this._measureElement.getBoundingClientRect();\n\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (geometry.width !== 0 && geometry.height !== 0) {\n      this._result.width = geometry.width;\n      this._result.height = Math.ceil(geometry.height);\n    }\n\n    return this._result;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from './Services';\n\nexport class CoreBrowserService implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  private _isFocused = false;\n  private _cachedIsFocused: boolean | undefined = undefined;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement,\n    public readonly window: Window & typeof globalThis\n  ) {\n    this._textarea.addEventListener('focus', () => this._isFocused = true);\n    this._textarea.addEventListener('blur', () => this._isFocused = false);\n  }\n\n  public get dpr(): number {\n    return this.window.devicePixelRatio;\n  }\n\n  public get isFocused(): boolean {\n    if (this._cachedIsFocused === undefined) {\n      this._cachedIsFocused = this._isFocused && this._textarea.ownerDocument.hasFocus();\n      queueMicrotask(() => this._cachedIsFocused = undefined);\n    }\n    return this._cachedIsFocused;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getCoordsRelativeToElement } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      window,\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.css.cell.width,\n      this._renderService.dimensions.css.cell.height,\n      isSelection\n    );\n  }\n\n  public getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined {\n    const coords = getCoordsRelativeToElement(window, event, element);\n\n    // due to rounding issues in zoom states pixel values might be negative or overflow actual canvas\n    // ignore those events effectively narrowing mouse area a tiny bit at the edges\n    if (!this._charSizeService.hasValidSize\n      || coords[0] < 0\n      || coords[1] < 0\n      || coords[0] >= this._renderService.dimensions.css.canvas.width\n      || coords[1] >= this._renderService.dimensions.css.canvas.height) {\n      return undefined;\n    }\n\n    return {\n      col: Math.floor(coords[0] / this._renderService.dimensions.css.cell.width),\n      row: Math.floor(coords[1] / this._renderService.dimensions.css.cell.height),\n      x: Math.floor(coords[0]),\n      y: Math.floor(coords[1])\n    };\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IRenderDebouncerWithCallback, ReadonlyColorSet } from 'browser/Types';\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { DebouncedIdleTask } from 'common/TaskQueue';\nimport { ThemeService } from 'browser/services/ThemeService';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderer: IRenderer | undefined;\n  private _renderDebouncer: IRenderDebouncerWithCallback;\n  private _screenDprMonitor: ScreenDprMonitor;\n  private _pausedResizeTask = new DebouncedIdleTask();\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private readonly _onDimensionsChange = this.register(new EventEmitter<IRenderDimensions>());\n  public readonly onDimensionsChange =  this._onDimensionsChange.event;\n  private readonly _onRenderedViewportChange = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRenderedViewportChange = this._onRenderedViewportChange.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onRefreshRequest = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRefreshRequest = this._onRefreshRequest.event;\n\n  public get dimensions(): IRenderDimensions { return this._renderer!.dimensions; }\n\n  constructor(\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IDecorationService decorationService: IDecorationService,\n    @IBufferService bufferService: IBufferService,\n    @ICoreBrowserService coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    this.register({ dispose: () => this._renderer?.dispose() });\n\n    this._renderDebouncer = new RenderDebouncer(coreBrowserService.window, (start, end) => this._renderRows(start, end));\n    this.register(this._renderDebouncer);\n\n    this._screenDprMonitor = new ScreenDprMonitor(coreBrowserService.window);\n    this._screenDprMonitor.setListener(() => this.handleDevicePixelRatioChange());\n    this.register(this._screenDprMonitor);\n\n    this.register(bufferService.onResize(() => this._fullRefresh()));\n    this.register(bufferService.buffers.onBufferActivate(() => this._renderer?.clear()));\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.handleCharSizeChanged()));\n\n    // Do a full refresh whenever any decoration is added or removed. This may not actually result\n    // in changes but since decorations should be used sparingly or added/removed all in the same\n    // frame this should have minimal performance impact.\n    this.register(decorationService.onDecorationRegistered(() => this._fullRefresh()));\n    this.register(decorationService.onDecorationRemoved(() => this._fullRefresh()));\n\n    // Clear the renderer when the a change that could affect glyphs occurs\n    this.register(optionsService.onMultipleOptionChange([\n      'customGlyphs',\n      'drawBoldTextInBrightColors',\n      'letterSpacing',\n      'lineHeight',\n      'fontFamily',\n      'fontSize',\n      'fontWeight',\n      'fontWeightBold',\n      'minimumContrastRatio'\n    ], () => {\n      this.clear();\n      this.handleResize(bufferService.cols, bufferService.rows);\n      this._fullRefresh();\n    }));\n\n    // Refresh the cursor line when the cursor changes\n    this.register(optionsService.onMultipleOptionChange([\n      'cursorBlink',\n      'cursorStyle'\n    ], () => this.refreshRows(bufferService.buffer.y, bufferService.buffer.y, true)));\n\n    // dprchange should handle this case, we need this as well for browsers that don't support the\n    // matchMedia query.\n    this.register(addDisposableDomListener(coreBrowserService.window, 'resize', () => this.handleDevicePixelRatioChange()));\n\n    this.register(themeService.onChangeColors(() => this._fullRefresh()));\n\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in coreBrowserService.window) {\n      const observer = new coreBrowserService.window.IntersectionObserver(e => this._handleIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this.register({ dispose: () => observer.disconnect() });\n    }\n  }\n\n  private _handleIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this._pausedResizeTask.flush();\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    if (!this._renderer) {\n      return;\n    }\n    this._renderer.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.handleSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRenderedViewportChange.fire({ start, end });\n    }\n    this._onRender.fire({ start, end });\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  private _handleOptionsChanged(): void {\n    if (!this._renderer) {\n      return;\n    }\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    if (!this._renderer) {\n      return;\n    }\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.dimensions.css.canvas.width === this._canvasWidth && this._renderer.dimensions.css.canvas.height === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.dimensions);\n  }\n\n  public hasRenderer(): boolean {\n    return !!this._renderer;\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    // TODO: RenderService should be the only one to dispose the renderer\n    this._renderer?.dispose();\n    this._renderer = renderer;\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // Force a refresh\n    this._needsSelectionRefresh = true;\n    this._fullRefresh();\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    return this._renderDebouncer.addRefreshCallback(callback);\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    if (!this._renderer) {\n      return;\n    }\n    this._renderer.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    if (!this._renderer) {\n      return;\n    }\n    this._renderer.handleDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    if (!this._renderer) {\n      return;\n    }\n    if (this._isPaused) {\n      this._pausedResizeTask.set(() => this._renderer!.handleResize(cols, rows));\n    } else {\n      this._renderer.handleResize(cols, rows);\n    }\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public handleCharSizeChanged(): void {\n    this._renderer?.handleCharSizeChanged();\n  }\n\n  public handleBlur(): void {\n    this._renderer?.handleBlur();\n  }\n\n  public handleFocus(): void {\n    this._renderer?.handleFocus();\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer?.handleSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public handleCursorMove(): void {\n    this._renderer?.handleCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer?.clear();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport * as Browser from 'common/Platform';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { CellData } from 'common/buffer/CellData';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IMouseService, ISelectionService, IRenderService, ICoreBrowserService } from 'browser/services/Services';\nimport { IBufferRange, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService } from 'common/services/Services';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { getRangeLength } from 'common/buffer/BufferRange';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private readonly _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public readonly onLinuxMouseSelection = this._onLinuxMouseSelection.event;\n  private readonly _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public readonly onRequestRedraw = this._onRedrawRequest.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public readonly onRequestScrollLines = this._onRequestScrollLines.event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._handleMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._handleMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._handleTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._handleBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n\n    this.register(toDisposable(() => {\n      this._removeMouseDownListeners();\n    }));\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      // For column selection it's not enough to rely on final selection's swapping of reversed\n      // values, it also needs the x coordinates to swap independently of the y coordinate is needed\n      const startCol = start[0] < end[0] ? start[0] : end[0];\n      const endCol = start[0] < end[0] ? end[0] : start[0];\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, startCol, endCol);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  public isCellInSelection(x: number, y: number): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return this._areCoordsInSelection([x, y], start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _handleTrim(amount: number): void {\n    const needsRefresh = this._model.handleTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(this._coreBrowserService.window, event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.css.canvas.height;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public handleMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._handleIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._handleSingleClick(event);\n      } else if (event.detail === 2) {\n        this._handleDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._handleTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _handleIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _handleSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _handleDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _handleTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _handleMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _handleMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.rawOptions.altClickMovesCursor) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _handleBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._handleTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column (0 to cols - 1) to the character index on the\n   * buffer line, the latter takes into account wide and null characters.\n   * @param bufferLine The buffer line to use.\n   * @param x The x index in the buffer line to convert.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, x: number): number {\n    let charIndex = x;\n    for (let i = 0; x >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && x !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n    this._fireEventIfSelectionChanged();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords[0]);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param cell The cell to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    const range: IBufferRange = {\n      start: { x: 0, y: wrappedRange.first },\n      end: { x: this._bufferService.cols - 1, y: wrappedRange.last }\n    };\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = undefined;\n    this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/shared/Types';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { ColorIndex, IDisposable } from 'common/Types';\nimport { ITheme } from 'common/services/Services';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n  /**\n   * Parent window that the terminal is rendered into. DOM and rendering APIs\n   * (e.g. requestAnimationFrame) should be invoked in the context of this\n   * window.\n   */\n  readonly window: Window & typeof globalThis;\n  /**\n   * Helper for getting the devicePixelRatio of the parent window.\n   */\n  readonly dpr: number;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedViewportChange: IEvent<{ start: number, end: number }>;\n  /**\n   * Fires on render\n   */\n  onRender: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  addRefreshCallback(callback: FrameRequestCallback): number;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  hasRenderer(): boolean;\n  setRenderer(renderer: IRenderer): void;\n  handleDevicePixelRatioChange(): void;\n  handleResize(cols: number, rows: number): void;\n  handleCharSizeChanged(): void;\n  handleBlur(): void;\n  handleFocus(): void;\n  handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  handleCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  handleMouseDown(event: MouseEvent): void;\n  isCellInSelection(x: number, y: number): boolean;\n}\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n\nexport const IThemeService = createDecorator<IThemeService>('ThemeService');\nexport interface IThemeService {\n  serviceBrand: undefined;\n\n  readonly colors: ReadonlyColorSet;\n\n  readonly onChangeColors: IEvent<ReadonlyColorSet>;\n\n  restoreColor(slot?: ColorIndex): void;\n  /**\n   * Allows external modifying of colors in the theme, this is used instead of {@link colors} to\n   * prevent accidental writes.\n   */\n  modifyColors(callback: (colors: IColorSet) => void): void;\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { IThemeService } from 'browser/services/Services';\nimport { IColorContrastCache, IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { channels, color, css, NULL_COLOR } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IOptionsService, ITheme } from 'common/services/Services';\nimport { ColorIndex, IColor } from 'common/Types';\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\nexport class ThemeService extends Disposable implements IThemeService {\n  public serviceBrand: undefined;\n\n  private _colors: IColorSet;\n  private _contrastCache: IColorContrastCache;\n  private _restoreColors!: IRestoreColorSet;\n\n  public get colors(): ReadonlyColorSet { return this._colors; }\n\n  private readonly _onChangeColors = this.register(new EventEmitter<ReadonlyColorSet>());\n  public readonly onChangeColors = this._onChangeColors.event;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    this._contrastCache = new ColorContrastCache();\n    this._colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionForeground: undefined,\n      selectionBackgroundTransparent: DEFAULT_SELECTION,\n      selectionBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionInactiveBackgroundTransparent: DEFAULT_SELECTION,\n      selectionInactiveBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache\n    };\n    this._updateRestoreColors();\n    this._setTheme(this._optionsService.rawOptions.theme);\n\n    this.register(this._optionsService.onSpecificOptionChange('minimumContrastRatio', () => this._contrastCache.clear()));\n    this.register(this._optionsService.onSpecificOptionChange('theme', () => this._setTheme(this._optionsService.rawOptions.theme)));\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  private _setTheme(theme: ITheme = {}): void {\n    const colors = this._colors;\n    colors.foreground = parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    colors.background = parseColor(theme.background, DEFAULT_BACKGROUND);\n    colors.cursor = parseColor(theme.cursor, DEFAULT_CURSOR);\n    colors.cursorAccent = parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT);\n    colors.selectionBackgroundTransparent = parseColor(theme.selectionBackground, DEFAULT_SELECTION);\n    colors.selectionBackgroundOpaque = color.blend(colors.background, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundTransparent = parseColor(theme.selectionInactiveBackground, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundOpaque = color.blend(colors.background, colors.selectionInactiveBackgroundTransparent);\n    colors.selectionForeground = theme.selectionForeground ? parseColor(theme.selectionForeground, NULL_COLOR) : undefined;\n    if (colors.selectionForeground === NULL_COLOR) {\n      colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(colors.selectionBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionBackgroundTransparent = color.opacity(colors.selectionBackgroundTransparent, opacity);\n    }\n    if (color.isOpaque(colors.selectionInactiveBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionInactiveBackgroundTransparent = color.opacity(colors.selectionInactiveBackgroundTransparent, opacity);\n    }\n    colors.ansi = DEFAULT_ANSI_COLORS.slice();\n    colors.ansi[0] = parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    colors.ansi[1] = parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    colors.ansi[2] = parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    colors.ansi[3] = parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    colors.ansi[4] = parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    colors.ansi[5] = parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    colors.ansi[6] = parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    colors.ansi[7] = parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    colors.ansi[8] = parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    colors.ansi[9] = parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    colors.ansi[10] = parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    colors.ansi[11] = parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    colors.ansi[12] = parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    colors.ansi[13] = parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    colors.ansi[14] = parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    colors.ansi[15] = parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    if (theme.extendedAnsi) {\n      const colorCount = Math.min(colors.ansi.length - 16, theme.extendedAnsi.length);\n      for (let i = 0; i < colorCount; i++) {\n        colors.ansi[i + 16] = parseColor(theme.extendedAnsi[i], DEFAULT_ANSI_COLORS[i + 16]);\n      }\n    }\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._updateRestoreColors();\n    this._onChangeColors.fire(this.colors);\n  }\n\n  public restoreColor(slot?: ColorIndex): void {\n    this._restoreColor(slot);\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _restoreColor(slot: ColorIndex | undefined): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this._colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case ColorIndex.FOREGROUND:\n        this._colors.foreground = this._restoreColors.foreground;\n        break;\n      case ColorIndex.BACKGROUND:\n        this._colors.background = this._restoreColors.background;\n        break;\n      case ColorIndex.CURSOR:\n        this._colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this._colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  public modifyColors(callback: (colors: IColorSet) => void): void {\n    callback(this._colors);\n    // Assume the change happened\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this._colors.foreground,\n      background: this._colors.background,\n      cursor: this._colors.cursor,\n      ansi: this._colors.ansi.slice()\n    };\n  }\n}\n\nfunction parseColor(\n  cssString: string | undefined,\n  fallback: IColor\n): IColor {\n  if (cssString !== undefined) {\n    try {\n      return css.toColor(cssString);\n    } catch {\n      // no-op\n    }\n  }\n  return fallback;\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> extends Disposable implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public readonly onDeleteEmitter = this.register(new EventEmitter<IDeleteEvent>());\n  public readonly onDelete = this.onDeleteEmitter.event;\n  public readonly onInsertEmitter = this.register(new EventEmitter<IInsertEvent>());\n  public readonly onInsert = this.onInsertEmitter.event;\n  public readonly onTrimEmitter = this.register(new EventEmitter<number>());\n  public readonly onTrim = this.onTrimEmitter.event;\n\n  constructor(\n    private _maxLength: number\n  ) {\n    super();\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @returns The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @returns The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  if (!isNode) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, LogLevelEnum, ITerminalOptions, IOscLinkService } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IAttributeData, ICoreTerminal, IScrollEvent, ScrollSource } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\nimport { OscLinkService } from 'common/services/OscLinkService';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _oscLinkService: IOscLinkService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsMode: IDisposable | undefined;\n\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  protected _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  protected readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  protected _onScroll = this.register(new EventEmitter<IScrollEvent, void>());\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = this.register(new EventEmitter<number, void>());\n      this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      });\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): Required<ITerminalOptions> { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = this.register(new OptionsService(options));\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this.register(this._instantiationService.createInstance(LogService));\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this.register(this._instantiationService.createInstance(CoreMouseService));\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this.unicodeService = this.register(this._instantiationService.createInstance(UnicodeService));\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n    this._oscLinkService = this._instantiationService.createInstance(OscLinkService);\n    this._instantiationService.setService(IOscLinkService, this._oscLinkService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = this.register(new InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService));\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.coreService.onRequestScrollToBottom(() => this.scrollToBottom()));\n    this.register(this.coreService.onUserInput(() =>  this._writeBuffer.handleUserInput()));\n    this.register(this.optionsService.onSpecificOptionChange('windowsMode', e => this._handleWindowsModeOptionChange(e)));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = this.register(new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult)));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n\n    this.register(toDisposable(() => {\n      this._windowsMode?.dispose();\n      this._windowsMode = undefined;\n    }));\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this._bufferService.scrollPages(pageCount);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this._bufferService.scrollToTop();\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this._bufferService.scrollToBottom();\n  }\n\n  public scrollToLine(line: number): void {\n    this._bufferService.scrollToLine(line);\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    if (this.optionsService.rawOptions.windowsMode) {\n      this._enableWindowsMode();\n    }\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n  private _handleWindowsModeOptionChange(value: boolean): void {\n    if (value) {\n      this._enableWindowsMode();\n    } else {\n      this._windowsMode?.dispose();\n      this._windowsMode = undefined;\n    }\n  }\n\n  protected _enableWindowsMode(): void {\n    if (!this._windowsMode) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsMode = {\n        dispose: () => {\n          for (const d of disposables) {\n            d.dispose();\n          }\n        }\n      };\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { StringToUtf32, stringFromCodePoint, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { IParsingState, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum, IOscLinkService } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document xterm VT features here that are currently unsupported\n */\n// @vt: #E[Supported via xterm-addon-image.]  DCS   SIXEL       \"SIXEL Graphics\"          \"DCS Ps ; Ps ; Ps ; q \tPt ST\"  \"Draw SIXEL image.\"\n// @vt: #N  DCS   DECUDK      \"User Defined Keys\"       \"DCS Ps ; Ps \\| Pt ST\"           \"Definitions for user-defined keys.\"\n// @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\" \"DCS + q Pt ST\"                 \"Request Terminfo String.\"\n// @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"       \"DCS + p Pt ST\"                 \"Set Terminfo Data.\"\n// @vt: #N  OSC   1           \"Set Icon Name\"           \"OSC 1 ; Pt BEL\"                \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n// Work variables to avoid garbage collection\nlet $temp = 0;\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  private _dirtyRowTracker: IDirtyRowTracker;\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  public getAttrData(): IAttributeData { return this._curAttrData; }\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private readonly _onRequestBell = this.register(new EventEmitter<void>());\n  public readonly onRequestBell = this._onRequestBell.event;\n  private readonly _onRequestRefreshRows = this.register(new EventEmitter<number, number>());\n  public readonly onRequestRefreshRows = this._onRequestRefreshRows.event;\n  private readonly _onRequestReset = this.register(new EventEmitter<void>());\n  public readonly onRequestReset = this._onRequestReset.event;\n  private readonly _onRequestSendFocus = this.register(new EventEmitter<void>());\n  public readonly onRequestSendFocus = this._onRequestSendFocus.event;\n  private readonly _onRequestSyncScrollBar = this.register(new EventEmitter<void>());\n  public readonly onRequestSyncScrollBar = this._onRequestSyncScrollBar.event;\n  private readonly _onRequestWindowsOptionsReport = this.register(new EventEmitter<WindowsOptionsReportType>());\n  public readonly onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event;\n\n  private readonly _onA11yChar = this.register(new EventEmitter<string>());\n  public readonly onA11yChar = this._onA11yChar.event;\n  private readonly _onA11yTab = this.register(new EventEmitter<number>());\n  public readonly onA11yTab = this._onA11yTab.event;\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onColor = this.register(new EventEmitter<IColorEvent>());\n  public readonly onColor = this._onColor.event;\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _oscLinkService: IOscLinkService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n    this._dirtyRowTracker = new DirtyRowTracker(this._bufferService);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params, true));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params, true));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\"', final: 'q' }, params => this.selectProtected(params));\n    this._parser.registerCsiHandler({ intermediates: '$', final: 'p' }, params => this.requestMode(params, true));\n    this._parser.registerCsiHandler({ prefix: '?', intermediates: '$', final: 'p' }, params => this.requestMode(params, false));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //   8 - create hyperlink (not in xterm spec, see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)\n    this._parser.registerOscHandler(8, new OscHandler(data => this.setHyperlink(data)));\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DcsHandler((data, params) => this.requestStatusString(data, params)));\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  private _getCurrentLinkId(): number {\n    return this._curAttrData.extended.urlId;\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with\n   *   same chunk and the promise resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order and\n   * proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowTracker.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowTracker.start, this._dirtyRowTracker.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n      if (this._getCurrentLinkId()) {\n        this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y);\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once before\n          // early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps \" q  Select Character Protection Attribute (DECSCA).\n   *\n   * @vt: #Y CSI DECSCA   \"Select Character Protection Attribute\"  \"CSI Ps \" q\"  \"Whether DECSED and DECSEL can erase (0=default, 2) or not (1).\"\n   */\n  public selectProtected(params: IParams): boolean {\n    const p = params.params[0];\n    if (p === 1) this._curAttrData.bg |= BgFlags.PROTECTED;\n    if (p === 2 || p === 0) this._curAttrData.bg &= ~BgFlags.PROTECTED;\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y The row index relative to the viewport.\n   * @param start The start x index of the range to be erased.\n   * @param end The end x index of the range to be erased (exclusive).\n   * @param clearWrap clear the isWrapped flag\n   * @param respectProtect Whether to respect the protection attribute (DECSCA).\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData(),\n      respectProtect\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), respectProtect);\n    this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n    line.isWrapped = false;\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #Y CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Same as ED with respecting protection flag.\"\n   */\n  public eraseInDisplay(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true, respectProtect);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowTracker.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #Y CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Same as EL with respecting protecting flag.\"\n   */\n  public eraseInLine(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, respectProtect);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, respectProtect);\n        break;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the blank characters.\n   * Text between the cursor and right margin moves to the right. Characters moved past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n   * Character attributes move with the characters. The terminal adds blank characters at the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll margins,\n   * moving content to the right. Content at the right margin is lost.\n   * DECIC has no effect outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty,\n   * the preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is set.\n   * REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM).               | #Y      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1016  | Enable SGR-Pixels Mouse Mode.                           | #Y      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'SGR_PIXELS';\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM).                 | #Y      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1016  | Disable SGR-Pixels Mouse Mode.                          | #Y      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps $ p Request ANSI Mode (DECRQM).\n   *\n   * Reports CSI Ps; Pm $ y (DECRPM), where Ps is the mode number as in SM/RM,\n   * and Pm is the mode value:\n   *    0 - not recognized\n   *    1 - set\n   *    2 - reset\n   *    3 - permanently set\n   *    4 - permanently reset\n   *\n   * @vt: #Y  CSI   DECRQM  \"Request Mode\"  \"CSI Ps $p\"  \"Request mode state.\"\n   * Returns a report as `CSI Ps; Pm $ y` (DECRPM), where `Ps` is the mode number as in SM/RM\n   * or DECSET/DECRST, and `Pm` is the mode value:\n   * - 0: not recognized\n   * - 1: set\n   * - 2: reset\n   * - 3: permanently set\n   * - 4: permanently reset\n   *\n   * For modes not understood xterm.js always returns `notRecognized`. In general this means,\n   * that a certain operation mode is not implemented and cannot be used.\n   *\n   * Modes changing the active terminal buffer (47, 1047, 1049) are not subqueried\n   * and only report, whether the alternate buffer is set.\n   *\n   * Mouse encodings and mouse protocols are handled mutual exclusive,\n   * thus only one of each of those can be set at a given time.\n   *\n   * There is a chance, that some mode reports are not fully in line with xterm.js' behavior,\n   * e.g. if the default implementation already exposes a certain behavior. If you find\n   * discrepancies in the mode reports, please file a bug.\n   */\n  public requestMode(params: IParams, ansi: boolean): boolean {\n    // return value as in DECRPM\n    const enum V {\n      NOT_RECOGNIZED = 0,\n      SET = 1,\n      RESET = 2,\n      PERMANENTLY_SET = 3,\n      PERMANENTLY_RESET = 4\n    }\n\n    // access helpers\n    const dm = this._coreService.decPrivateModes;\n    const { activeProtocol: mouseProtocol, activeEncoding: mouseEncoding } = this._coreMouseService;\n    const cs = this._coreService;\n    const { buffers, cols } = this._bufferService;\n    const { active, alt } = buffers;\n    const opts = this._optionsService.rawOptions;\n\n    const f = (m: number, v: V): boolean => {\n      cs.triggerDataEvent(`${C0.ESC}[${ansi ? '' : '?'}${m};${v}$y`);\n      return true;\n    };\n    const b2v = (value: boolean): V => value ? V.SET : V.RESET;\n\n    const p = params.params[0];\n\n    if (ansi) {\n      if (p === 2) return f(p, V.PERMANENTLY_SET);\n      if (p === 4) return f(p, b2v(cs.modes.insertMode));\n      if (p === 12) return f(p, V.PERMANENTLY_RESET);\n      if (p === 20) return f(p, b2v(opts.convertEol));\n      return f(p, V.NOT_RECOGNIZED);\n    }\n\n    if (p === 1) return f(p, b2v(dm.applicationCursorKeys));\n    if (p === 3) return f(p, opts.windowOptions.setWinLines ? (cols === 80 ? V.RESET : cols === 132 ? V.SET : V.NOT_RECOGNIZED) : V.NOT_RECOGNIZED);\n    if (p === 6) return f(p, b2v(dm.origin));\n    if (p === 7) return f(p, b2v(dm.wraparound));\n    if (p === 8) return f(p, V.PERMANENTLY_SET);\n    if (p === 9) return f(p, b2v(mouseProtocol === 'X10'));\n    if (p === 12) return f(p, b2v(opts.cursorBlink));\n    if (p === 25) return f(p, b2v(!cs.isCursorHidden));\n    if (p === 45) return f(p, b2v(dm.reverseWraparound));\n    if (p === 66) return f(p, b2v(dm.applicationKeypad));\n    if (p === 1000) return f(p, b2v(mouseProtocol === 'VT200'));\n    if (p === 1002) return f(p, b2v(mouseProtocol === 'DRAG'));\n    if (p === 1003) return f(p, b2v(mouseProtocol === 'ANY'));\n    if (p === 1004) return f(p, b2v(dm.sendFocus));\n    if (p === 1005) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1006) return f(p, b2v(mouseEncoding === 'SGR'));\n    if (p === 1015) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1016) return f(p, b2v(mouseEncoding === 'SGR_PIXELS'));\n    if (p === 1048) return f(p, V.SET); // xterm always returns SET here\n    if (p === 47 || p === 1047 || p === 1049) return f(p, b2v(active === alt));\n    if (p === 2004) return f(p, b2v(dm.bracketedPasteMode));\n    return f(p, V.NOT_RECOGNIZED);\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  private _processSGR0(attr: IAttributeData): void {\n    attr.fg = DEFAULT_ATTR_DATA.fg;\n    attr.bg = DEFAULT_ATTR_DATA.bg;\n    attr.extended = attr.extended.clone();\n    // Reset underline style and color. Note that we don't want to reset other\n    // fields such as the url id.\n    attr.extended.underlineStyle = UnderlineStyle.NONE;\n    attr.extended.underlineColor &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #Y      |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 58        | Underline color: Extended color.                         | #P[Support for RGB and indexed colors, see below.] |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #Y      |\n   * | 3      | Curly underline.                                              | #Y      |\n   * | 4      | Dotted underline.                                             | #Y      |\n   * | 5      | Dashed underline.                                             | #Y      |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38), background (Ps=48) and underline (Ps=58) as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._processSGR0(this._curAttrData);\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        this._processSGR0(attr);\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n        this._processUnderline(UnderlineStyle.NONE, attr);\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full terminal bootstrap,\n   * DECSTR only resets certain attributes. For most needs DECSTR should be sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from `XParseColor` (see OSC 10 for supported formats).\n   * There may be multipe `c ; spec` pairs present in the same instruction.\n   * If `spec` contains `?` the terminal returns a sequence with the currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (0 <= index && index < 256) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 8 ; <params> ; <uri> ST - create hyperlink\n   * OSC 8 ; ; ST - finish hyperlink\n   *\n   * Test case:\n   *\n   * ```sh\n   * printf '\\e]8;;http://example.com\\e\\\\This is a link\\e]8;;\\e\\\\\\n'\n   * ```\n   *\n   * @vt: #Y    OSC    8    \"Create hyperlink\"   \"OSC 8 ; params ; uri BEL\" \"Create a hyperlink to `uri` using `params`.\"\n   * `uri` is a hyperlink starting with `http://`, `https://`, `ftp://`, `file://` or `mailto://`. `params` is an\n   * optional list of key=value assignments, separated by the : character. Example: `id=xyz123:foo=bar:baz=quux`.\n   * Currently only the id key is defined. Cells that share the same ID and URI share hover feedback.\n   * Use `OSC 8 ; ; BEL` to finish the current hyperlink.\n   */\n  public setHyperlink(data: string): boolean {\n    const args = data.split(';');\n    if (args.length < 2) {\n      return false;\n    }\n    if (args[1]) {\n      return this._createHyperlink(args[0], args[1]);\n    }\n    if (args[0]) {\n      return false;\n    }\n    return this._finishHyperlink();\n  }\n\n  private _createHyperlink(params: string, uri: string): boolean {\n    // It's legal to open a new hyperlink without explicitly finishing the previous one\n    if (this._getCurrentLinkId()) {\n      this._finishHyperlink();\n    }\n    const parsedParams = params.split(':');\n    let id: string | undefined;\n    const idParamIndex = parsedParams.findIndex(e => e.startsWith('id='));\n    if (idParamIndex !== -1) {\n      id = parsedParams[idParamIndex].slice(3) || undefined;\n    }\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = this._oscLinkService.registerLink({ id, uri });\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  private _finishHyperlink(): boolean {\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = 0;\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [ColorIndex.FOREGROUND, ColorIndex.BACKGROUND, ColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (0 <= index && index < 256) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowTracker.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n\n\n  /**\n   * DCS $ q Pt ST\n   *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n   *   Request Status String (DECRQSS), VT420 and up.\n   *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n   *\n   * @vt: #P[Limited support, see below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n   * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the corresponding CSI string,\n   * `ESC P 0 ST` for invalid requests.\n   *\n   * Supported requests and responses:\n   *\n   * | Type                             | Request           | Response (`Pt`)                                       |\n   * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n   * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n   * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n   * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n   * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | `Ps \" q` (DECSCA 2 is reported as Ps = 0)             |\n   * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n   *\n   *\n   * TODO:\n   * - fix SGR report\n   * - either check which conformance is better suited or remove the report completely\n   *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n   */\n  public requestStatusString(data: string, params: IParams): boolean {\n    const f = (s: string): boolean => {\n      this._coreService.triggerDataEvent(`${C0.ESC}${s}${C0.ESC}\\\\`);\n      return true;\n    };\n\n    // access helpers\n    const b = this._bufferService.buffer;\n    const opts = this._optionsService.rawOptions;\n    const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n\n    if (data === '\"q') return f(`P1$r${this._curAttrData.isProtected() ? 1 : 0}\"q`);\n    if (data === '\"p') return f(`P1$r61;1\"p`);\n    if (data === 'r') return f(`P1$r${b.scrollTop + 1};${b.scrollBottom + 1}r`);\n    // FIXME: report real SGR settings instead of 0m\n    if (data === 'm') return f(`P1$r0m`);\n    if (data === ' q') return f(`P1$r${STYLES[opts.cursorStyle] - (opts.cursorBlink ? 1 : 0)} q`);\n    return f(`P0$r`);\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    this._dirtyRowTracker.markRangeDirty(y1, y2);\n  }\n}\n\nexport interface IDirtyRowTracker {\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nclass DirtyRowTracker implements IDirtyRowTracker {\n  public start!: number;\n  public end!: number;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this.start = this._bufferService.buffer.y;\n    this.end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this.start) {\n      this.start = y;\n    } else if (y > this.end) {\n      this.end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      $temp = y1;\n      y1 = y2;\n      y2 = $temp;\n    }\n    if (y1 < this.start) {\n      this.start = y1;\n    }\n    if (y2 > this.end) {\n      this.end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nexport const isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// Work variables to avoid garbage collection.\nlet i = 0;\n\n/**\n * A generic list that is maintained in sorted order and allows values with duplicate keys. This\n * list is based on binary search and as such locating a key will take O(log n) amortized, this\n * includes the by key iterator.\n */\nexport class SortedList<T> {\n  private readonly _array: T[] = [];\n\n  constructor(\n    private readonly _getKey: (value: T) => number\n  ) {\n  }\n\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  public insert(value: T): void {\n    if (this._array.length === 0) {\n      this._array.push(value);\n      return;\n    }\n    i = this._search(this._getKey(value), 0, this._array.length - 1);\n    this._array.splice(i, 0, value);\n  }\n\n  public delete(value: T): boolean {\n    if (this._array.length === 0) {\n      return false;\n    }\n    const key = this._getKey(value);\n    if (key === undefined) {\n      return false;\n    }\n    i = this._search(key, 0, this._array.length - 1);\n    if (i === -1) {\n      return false;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return false;\n    }\n    do {\n      if (this._array[i] === value) {\n        this._array.splice(i, 1);\n        return true;\n      }\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n    return false;\n  }\n\n  public *getKeyIterator(key: number): IterableIterator<T> {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key, 0, this._array.length - 1);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      yield this._array[i];\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public forEachByKey(key: number, callback: (value: T) => void): void {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key, 0, this._array.length - 1);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      callback(this._array[i]);\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public values(): IterableIterator<T> {\n    return this._array.values();\n  }\n\n  private _search(key: number, min: number, max: number): number {\n    if (max < min) {\n      return min;\n    }\n    let mid = Math.floor((min + max) / 2);\n    const midKey = this._getKey(this._array[mid]);\n    if (midKey > key) {\n      return this._search(key, min, mid - 1);\n    }\n    if (midKey < key) {\n      return this._search(key, mid + 1, max);\n    }\n    // Value found! Since keys can be duplicates, move the result index back to the lowest index\n    // that matches the key.\n    while (mid > 0 && this._getKey(this._array[mid - 1]) === key) {\n      mid--;\n    }\n    return mid;\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IBuffer, BufferIndex, IBufferStringIterator, IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { IBufferLine, ICellData, IAttributeData, ICharset } from 'common/Types';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from 'common/buffer/Constants';\nimport { reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths, getWrappedLineTrimmedLength } from 'common/buffer/BufferReflow';\nimport { Marker } from 'common/buffer/Marker';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\nimport { DebouncedIdleTask, IdleTaskQueue } from 'common/TaskQueue';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  public tabs: { [column: number]: boolean | undefined } = {};\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // count bufferlines with overly big memory to be cleaned afterwards\n    let dirtyMemoryLines = 0;\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n\n    this._memoryCleanupQueue.clear();\n    // schedule memory cleanup only, if more than 10% of the lines are affected\n    if (dirtyMemoryLines > 0.1 * this.lines.length) {\n      this._memoryCleanupPosition = 0;\n      this._memoryCleanupQueue.enqueue(() => this._batchedMemoryCleanup());\n    }\n  }\n\n  private _memoryCleanupQueue = new IdleTaskQueue();\n  private _memoryCleanupPosition = 0;\n\n  private _batchedMemoryCleanup(): boolean {\n    let normalRun = true;\n    if (this._memoryCleanupPosition >= this.lines.length) {\n      // cleanup made it once through all lines, thus rescan in loop below to also catch shifted lines,\n      // which should finish rather quick if there are no more cleanups pending\n      this._memoryCleanupPosition = 0;\n      normalRun = false;\n    }\n    let counted = 0;\n    while (this._memoryCleanupPosition < this.lines.length) {\n      counted += this.lines.get(this._memoryCleanupPosition++)!.cleanupMemory();\n      // cleanup max 100 lines per batch\n      if (counted > 100) {\n        return true;\n      }\n    }\n    // normal runs always need another rescan afterwards\n    // if we made it here with normalRun=false, we are in a final run\n    // and can end the cleanup task for sure\n    return normalRun;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  // private _reflowSmallerGetLinesNeeded()\n\n  /**\n   * Translates a string index back to a BufferIndex.\n   * To get the correct buffer position the string must start at `startCol` 0\n   * (default in translateBufferLineToString).\n   * The method also works on wrapped line strings given rows were not trimmed.\n   * The method operates on the CharData string length, there are no\n   * additional content or boundary checks. Therefore the string and the buffer\n   * should not be altered in between.\n   * TODO: respect trim flag after fixing #1685\n   * @param lineIndex line index the string was retrieved from\n   * @param stringIndex index within the string\n   * @param trimRight Whether to trim whitespace to the right.\n   */\n  public stringIndexToBufferIndex(lineIndex: number, stringIndex: number, trimRight: boolean = false): BufferIndex {\n    while (stringIndex) {\n      const line = this.lines.get(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      const length = (trimRight) ? line.getTrimmedLength() : line.length;\n      for (let i = 0; i < length; ++i) {\n        if (line.get(i)[CHAR_DATA_WIDTH_INDEX]) {\n          // empty cells report a string length of 0, but get replaced\n          // with a whitespace in translateToString, thus replace with 1\n          stringIndex -= line.get(i)[CHAR_DATA_CHAR_INDEX].length || 1;\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n    }\n    return [lineIndex, 0];\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param lineIndex The absolute index of the line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n\n  public iterator(trimRight: boolean, startIndex?: number, endIndex?: number, startOverscan?: number, endOverscan?: number): IBufferStringIterator {\n    return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n  }\n}\n\n/**\n * Iterator to get unwrapped content strings from the buffer.\n * The iterator returns at least the string data between the borders\n * `startIndex` and `endIndex` (exclusive) and will expand the lines\n * by `startOverscan` to the top and by `endOverscan` to the bottom,\n * if no new line was found in between.\n * It will never read/return string data beyond `startIndex - startOverscan`\n * or `endIndex + endOverscan`. Therefore the first and last line might be truncated.\n * It is possible to always get the full string for the first and last line as well\n * by setting the overscan values to the actual buffer length. This not recommended\n * since it might return the whole buffer within a single string in a worst case scenario.\n */\nexport class BufferStringIterator implements IBufferStringIterator {\n  private _current: number;\n\n  constructor(\n    private _buffer: IBuffer,\n    private _trimRight: boolean,\n    private _startIndex: number = 0,\n    private _endIndex: number = _buffer.lines.length,\n    private _startOverscan: number = 0,\n    private _endOverscan: number = 0\n  ) {\n    if (this._startIndex < 0) {\n      this._startIndex = 0;\n    }\n    if (this._endIndex > this._buffer.lines.length) {\n      this._endIndex = this._buffer.lines.length;\n    }\n    this._current = this._startIndex;\n  }\n\n  public hasNext(): boolean {\n    return this._current < this._endIndex;\n  }\n\n  public next(): IBufferStringIteratorResult {\n    const range = this._buffer.getWrappedRangeForLine(this._current);\n    // limit search window to overscan value at both borders\n    if (range.first < this._startIndex - this._startOverscan) {\n      range.first = this._startIndex - this._startOverscan;\n    }\n    if (range.last > this._endIndex + this._endOverscan) {\n      range.last = this._endIndex + this._endOverscan;\n    }\n    // limit to current buffer length\n    range.first = Math.max(range.first, 0);\n    range.last = Math.min(range.last, this._buffer.lines.length);\n    let content = '';\n    for (let i = range.first; i <= range.last; ++i) {\n      content += this._buffer.translateBufferLineToString(i, this._trimRight);\n    }\n    this._current = range.last + 1;\n    return { range, content };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IBufferLine, ICellData, IAttributeData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Content, BgFlags, FgFlags } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n// Work variables to avoid garbage collection\nlet $startIndex = 0;\n\n/** Factor when to cleanup underlying array buffer after shrinking. */\nconst CLEANUP_THRESHOLD = 2;\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: IExtendedAttrs | undefined} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /** Get state of protected flag. */\n  public isProtected(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG] & BgFlags.PROTECTED;\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    $startIndex = index * CELL_SIZE;\n    cell.content = this._data[$startIndex + Cell.CONTENT];\n    cell.fg = this._data[$startIndex + Cell.FG];\n    cell.bg = this._data[$startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index]!;\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      if (start && this.getWidth(start - 1) === 2 && !this.isProtected(start - 1)) {\n        this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      if (end < this.length && this.getWidth(end - 1) === 2 && !this.isProtected(end)) {\n        this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      while (start < end  && start < this.length) {\n        if (!this.isProtected(start)) {\n          this.setCell(start, fillCellData);\n        }\n        start++;\n      }\n      return;\n    }\n\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  /**\n   * Resize BufferLine to `cols` filling excess cells with `fillCellData`.\n   * The underlying array buffer will not change if there is still enough space\n   * to hold the new buffer line data.\n   * Returns a boolean indicating, whether a `cleanupMemory` call would free\n   * excess memory (true after shrinking > CLEANUP_THRESHOLD).\n   */\n  public resize(cols: number, fillCellData: ICellData): boolean {\n    if (cols === this.length) {\n      return this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n    }\n    const uint32Cells = cols * CELL_SIZE;\n    if (cols > this.length) {\n      if (this._data.buffer.byteLength >= uint32Cells * 4) {\n        // optimization: avoid alloc and data copy if buffer has enough room\n        this._data = new Uint32Array(this._data.buffer, 0, uint32Cells);\n      } else {\n        // slow path: new alloc and full data copy\n        const data = new Uint32Array(uint32Cells);\n        data.set(this._data);\n        this._data = data;\n      }\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      // optimization: just shrink the view on existing buffer\n      this._data = this._data.subarray(0, uint32Cells);\n      // Remove any cut off combined data\n      const keys = Object.keys(this._combined);\n      for (let i = 0; i < keys.length; i++) {\n        const key = parseInt(keys[i], 10);\n        if (key >= cols) {\n          delete this._combined[key];\n        }\n      }\n      // remove any cut off extended attributes\n      const extKeys = Object.keys(this._extendedAttrs);\n      for (let i = 0; i < extKeys.length; i++) {\n        const key = parseInt(extKeys[i], 10);\n        if (key >= cols) {\n          delete this._extendedAttrs[key];\n        }\n      }\n    }\n    this.length = cols;\n    return uint32Cells * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n  }\n\n  /**\n   * Cleanup underlying array buffer.\n   * A cleanup will be triggered if the array buffer exceeds the actual used\n   * memory by a factor of CLEANUP_THRESHOLD.\n   * Returns 0 or 1 indicating whether a cleanup happened.\n   */\n  public cleanupMemory(): number {\n    if (this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength) {\n      const data = new Uint32Array(this._data.length);\n      data.set(this._data);\n      this._data = data;\n      return 1;\n    }\n    return 0;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      for (let i = 0; i < this.length; ++i) {\n        if (!this.isProtected(i)) {\n          this.setCell(i, fillCellData);\n        }\n      }\n      return;\n    }\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from 'xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param oldCols The columns before resize\n * @param newCols The columns after resize.\n * @param bufferAbsoluteY The absolute y position of the cursor (baseY + cursorY).\n * @param nullCell The cell data to use when filling in empty cells.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private readonly _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public readonly onBufferActivate = this._onBufferActivate.event;\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.resize(this._bufferService.cols, this._bufferService.rows)));\n    this.register(this._optionsService.onSpecificOptionChange('tabStopWidth', () => this.setupTabStops()));\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clearAllMarkers();\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n    this.setupTabStops(newCols);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { disposeArray } from 'common/Lifecycle';\nimport { IDisposable, IMarker } from 'common/Types';\n\nexport class Marker implements IMarker {\n  private static _nextId = 1;\n\n  public isDisposed: boolean = false;\n  private _disposables: IDisposable[] = [];\n\n  private _id: number = Marker._nextId++;\n  public get id(): number { return this._id; }\n\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  constructor(\n    public line: number\n  ) {\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    disposeArray(this._disposables);\n    this._disposables.length = 0;\n  }\n\n  public register<T extends IDisposable>(disposable: T): T {\n    this._disposables.push(disposable);\n    return disposable;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.DEL; // \\e ^?\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[5;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[6;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          let keyString = String.fromCharCode(keyCode);\n          if (ev.shiftKey) {\n            keyString = keyString.toUpperCase();\n          }\n          result.key = C0.ESC + keyString;\n        } else if (ev.keyCode === 32) {\n          result.key = C0.ESC + (ev.ctrlKey ? C0.NUL : ' ');\n        } else if (ev.key === 'Dead' && ev.code.startsWith('Key')) {\n          // Reference: https://github.com/xtermjs/xterm.js/issues/3725\n          // Alt will produce a \"dead key\" (initate composition) with some\n          // of the letters in US layout (e.g. N/E/U).\n          // It's safe to match against Key* since no other `code` values begin with \"Key\".\n          // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values#code_values_on_mac\n          let keyString = ev.code.slice(3, 4);\n          if (!ev.shiftKey) {\n            keyString = keyString.toLowerCase();\n          }\n          result.key = C0.ESC + keyString;\n          result.cancel = true;\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock, volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n        if (ev.key === '@') { // ^ + shift + 2 = ^ + @\n          result.key = C0.NUL;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      table.fill(1);\n      table[0] = 0;\n      // control chars\n      table.fill(0, 1, 32);\n      table.fill(0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      table.fill(2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      table.fill(2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      table.fill(2, 0xac00, 0xd7a4);\n      table.fill(2, 0xf900, 0xfb00);\n      table.fill(2, 0xfe10, 0xfe1a);\n      table.fill(2, 0xfe30, 0xfe70);\n      table.fill(2, 0xff00, 0xff61);\n      table.fill(2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        table.fill(0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n", "\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\nexport class WriteBuffer extends Disposable {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  private _didUserInput = false;\n\n  private readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) {\n    super();\n  }\n\n  public handleUserInput(): void {\n    this._didUserInput = true;\n  }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n\n      // If this is the first write call after the user has done some input,\n      // parse it immediately to minimize input latency,\n      // otherwise schedule for the next event\n      if (this._didUserInput) {\n        this._didUserInput = false;\n        this._pendingData += data.length;\n        this._writeBuffer.push(data);\n        this._callbacks.push(callback);\n        this._innerWrite();\n        return;\n      }\n\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens took very long).\n         * This cannot be solved here for the handler itself (it is the handlers responsibility to slice hard work),\n         * but we can at least schedule a screen update as we gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          queueMicrotask(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n * Internal actions of EscapeSequenceParser.\n */\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    this.table.fill(action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected readonly _oscParser: IOscParser;\n  protected readonly _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this.register(toDisposable(() => {\n      this._csiHandlers = Object.create(null);\n      this._executeHandlers = Object.create(null);\n      this._escHandlers = Object.create(null);\n    }));\n    this._oscParser = this.register(new OscParser());\n    this._dcsParser = this.register(new DcsParser());\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing.\n           * This is a really bad condition with screwed up execution order and prolly messed up\n           * terminal state, therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that,\n           * as the pending async handler still might mess up the terminal later. Instead fix the faulty\n           * async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  constructor() {\n  }\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class BufferNamespaceApi implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n\n  private readonly _onBufferChange = new EventEmitter<IBufferApi>();\n  public readonly onBufferChange = this._onBufferChange.event;\n\n  constructor(private _core: ICoreTerminal) {\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBufferSet, IBuffer } from 'common/buffer/Types';\nimport { EventEmitter, IEventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(@IOptionsService optionsService: IOptionsService) {\n    super();\n    this.cols = Math.max(optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = this.register(new BufferSet(optionsService, this));\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    // TODO: This doesn't fire when scrollback changes - add a resize event to BufferSet and forward event\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this.scrollLines(-this.buffer.ydisp);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: { [key: string]: ICoreMouseProtocol } = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: { [key: string]: CoreMouseEncoding } = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  },\n  SGR_PIXELS: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.x};${e.y}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService extends Disposable implements ICoreMouseService {\n  private _protocols: { [name: string]: ICoreMouseProtocol } = {};\n  private _encodings: { [name: string]: CoreMouseEncoding } = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  private readonly _onProtocolChange = this.register(new EventEmitter<CoreMouseEventType>());\n  public readonly onProtocolChange =  this._onProtocolChange.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    super();\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n      || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move events at grid or pixel level\n    if (e.action === CoreMouseAction.MOVE\n      && this._lastEvent\n      && this._equalEvents(this._lastEvent, e, this._activeEncoding === 'SGR_PIXELS')\n    ) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): { [event: string]: boolean } {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _equalEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent, pixels: boolean): boolean {\n    if (pixels) {\n      if (e1.x !== e2.x) return false;\n      if (e1.y !== e2.y) return false;\n    } else {\n      if (e1.col !== e2.col) return false;\n      if (e1.row !== e2.row) return false;\n    }\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreService, ILogService, IOptionsService, IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { clone } from 'common/Clone';\nimport { Disposable } from 'common/Lifecycle';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  private readonly _onUserInput = this.register(new EventEmitter<void>());\n  public readonly onUserInput = this._onUserInput.event;\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onRequestScrollToBottom = this.register(new EventEmitter<void>());\n  public readonly onRequestScrollToBottom = this._onRequestScrollToBottom.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (wasUserInput && this._optionsService.rawOptions.scrollOnUserInput && buffer.ybase !== buffer.ydisp) {\n      this._onRequestScrollToBottom.fire();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { css } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDecorationService, IInternalDecoration } from 'common/services/Services';\nimport { SortedList } from 'common/SortedList';\nimport { IColor } from 'common/Types';\nimport { IDecorationOptions, IDecoration, IMarker, IEvent } from 'xterm';\n\n// Work variables to avoid garbage collection\nlet $xmin = 0;\nlet $xmax = 0;\n\nexport class DecorationService extends Disposable implements IDecorationService {\n  public serviceBrand: any;\n\n  /**\n   * A list of all decorations, sorted by the marker's line value. This relies on the fact that\n   * while marker line values do change, they should all change by the same amount so this should\n   * never become out of order.\n   */\n  private readonly _decorations: SortedList<IInternalDecoration> = new SortedList(e => e?.marker.line);\n\n  private readonly _onDecorationRegistered = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRegistered = this._onDecorationRegistered.event;\n  private readonly _onDecorationRemoved = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRemoved = this._onDecorationRemoved.event;\n\n  public get decorations(): IterableIterator<IInternalDecoration> { return this._decorations.values(); }\n\n  constructor() {\n    super();\n\n    this.register(toDisposable(() => {\n      for (const d of this._decorations.values()) {\n        this._onDecorationRemoved.fire(d);\n      }\n      this.reset();\n    }));\n  }\n\n  public registerDecoration(options: IDecorationOptions): IDecoration | undefined {\n    if (options.marker.isDisposed) {\n      return undefined;\n    }\n    const decoration = new Decoration(options);\n    if (decoration) {\n      const markerDispose = decoration.marker.onDispose(() => decoration.dispose());\n      decoration.onDispose(() => {\n        if (decoration) {\n          if (this._decorations.delete(decoration)) {\n            this._onDecorationRemoved.fire(decoration);\n          }\n          markerDispose.dispose();\n        }\n      });\n      this._decorations.insert(decoration);\n      this._onDecorationRegistered.fire(decoration);\n    }\n    return decoration;\n  }\n\n  public reset(): void {\n    for (const d of this._decorations.values()) {\n      d.dispose();\n    }\n    this._decorations.clear();\n  }\n\n  public *getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration> {\n    let xmin = 0;\n    let xmax = 0;\n    for (const d of this._decorations.getKeyIterator(line)) {\n      xmin = d.options.x ?? 0;\n      xmax = xmin + (d.options.width ?? 1);\n      if (x >= xmin && x < xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        yield d;\n      }\n    }\n  }\n\n  public forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void {\n    this._decorations.forEachByKey(line, d => {\n      $xmin = d.options.x ?? 0;\n      $xmax = $xmin + (d.options.width ?? 1);\n      if (x >= $xmin && x < $xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        callback(d);\n      }\n    });\n  }\n\n  public dispose(): void {\n    for (const d of this._decorations.values()) {\n      this._onDecorationRemoved.fire(d);\n    }\n    this.reset();\n  }\n}\n\nclass Decoration extends Disposable implements IInternalDecoration {\n  public readonly marker: IMarker;\n  public element: HTMLElement | undefined;\n  public isDisposed: boolean = false;\n\n  public readonly onRenderEmitter = this.register(new EventEmitter<HTMLElement>());\n  public readonly onRender = this.onRenderEmitter.event;\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  private _cachedBg: IColor | undefined | null = null;\n  public get backgroundColorRGB(): IColor | undefined {\n    if (this._cachedBg === null) {\n      if (this.options.backgroundColor) {\n        this._cachedBg = css.toColor(this.options.backgroundColor);\n      } else {\n        this._cachedBg = undefined;\n      }\n    }\n    return this._cachedBg;\n  }\n\n  private _cachedFg: IColor | undefined | null = null;\n  public get foregroundColorRGB(): IColor | undefined {\n    if (this._cachedFg === null) {\n      if (this.options.foregroundColor) {\n        this._cachedFg = css.toColor(this.options.foregroundColor);\n      } else {\n        this._cachedFg = undefined;\n      }\n    }\n    return this._cachedFg;\n  }\n\n  constructor(\n    public readonly options: IDecorationOptions\n  ) {\n    super();\n    this.marker = options.marker;\n    if (this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position) {\n      this.options.overviewRulerOptions.position = 'full';\n    }\n  }\n\n  public override dispose(): void {\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    for (const [key, value] of this._entries.entries()) {\n      callback(key, value);\n    }\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService extends Disposable implements ILogService {\n  public serviceBrand: any;\n\n  public logLevel: LogLevelEnum = LogLevelEnum.OFF;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._updateLogLevel();\n    this.register(this._optionsService.onSpecificOptionChange('logLevel', () => this._updateLogLevel()));\n  }\n\n  private _updateLogLevel(): void {\n    this.logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, LOG_PREFIX + message, ...optionalParams);\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.DEBUG) {\n      this._log(console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.INFO) {\n      this._log(console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.WARN) {\n      this._log(console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.ERROR) {\n      this._log(console.error, message, optionalParams);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService, ITerminalOptions, FontWeight } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { isMac } from 'common/Platform';\nimport { CursorStyle, IDisposable } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\nexport const DEFAULT_OPTIONS: Readonly<Required<ITerminalOptions>> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  customGlyphs: true,\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  lineHeight: 1.0,\n  letterSpacing: 0,\n  linkHandler: null,\n  logLevel: 'info',\n  scrollback: 1000,\n  scrollOnUserInput: true,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  smoothScrollDuration: 0,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: false,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  windowOptions: {},\n  windowsMode: false,\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: 0\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService extends Disposable implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: Required<ITerminalOptions>;\n  public options: Required<ITerminalOptions>;\n\n  private readonly _onOptionChange = this.register(new EventEmitter<keyof ITerminalOptions>());\n  public readonly onOptionChange = this._onOptionChange.event;\n\n  constructor(options: Partial<ITerminalOptions>) {\n    super();\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (value: ITerminalOptions[T]) => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (eventKey === key) {\n        listener(this.rawOptions[key]);\n      }\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (keys.indexOf(eventKey) !== -1) {\n        listener();\n      }\n    });\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'cursorStyle':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        if (!isCursorStyle(value)) {\n          throw new Error(`\"${value}\" is not a valid value for ${key}`);\n        }\n        break;\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n    }\n    return value;\n  }\n}\n\nfunction isCursorStyle(value: unknown): value is CursorStyle {\n  return value === 'block' || value === 'underline' || value === 'bar';\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, IOscLinkService } from 'common/services/Services';\nimport { IMarker, IOscLinkData } from 'common/Types';\n\nexport class OscLinkService implements IOscLinkService {\n  public serviceBrand: any;\n\n  private _nextId = 1;\n\n  /**\n   * A map of the link key to link entry. This is used to add additional lines to links with ids.\n   */\n  private _entriesWithId: Map<string, IOscLinkEntryWithId> = new Map();\n\n  /**\n   * A map of the link id to the link entry. The \"link id\" (number) which is the numberic\n   * representation of a unique link should not be confused with \"id\" (string) which comes in with\n   * `id=` in the OSC link's properties.\n   */\n  private _dataByLinkId: Map<number, IOscLinkEntryNoId | IOscLinkEntryWithId> = new Map();\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n  }\n\n  public registerLink(data: IOscLinkData): number {\n    const buffer = this._bufferService.buffer;\n\n    // Links with no id will only ever be registered a single time\n    if (data.id === undefined) {\n      const marker = buffer.addMarker(buffer.ybase + buffer.y);\n      const entry: IOscLinkEntryNoId = {\n        data,\n        id: this._nextId++,\n        lines: [marker]\n      };\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n      this._dataByLinkId.set(entry.id, entry);\n      return entry.id;\n    }\n\n    // Add the line to the link if it already exists\n    const castData = data as Required<IOscLinkData>;\n    const key = this._getEntryIdKey(castData);\n    const match = this._entriesWithId.get(key);\n    if (match) {\n      this.addLineToLink(match.id, buffer.ybase + buffer.y);\n      return match.id;\n    }\n\n    // Create the link\n    const marker = buffer.addMarker(buffer.ybase + buffer.y);\n    const entry: IOscLinkEntryWithId = {\n      id: this._nextId++,\n      key: this._getEntryIdKey(castData),\n      data: castData,\n      lines: [marker]\n    };\n    marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    this._entriesWithId.set(entry.key, entry);\n    this._dataByLinkId.set(entry.id, entry);\n    return entry.id;\n  }\n\n  public addLineToLink(linkId: number, y: number): void {\n    const entry = this._dataByLinkId.get(linkId);\n    if (!entry) {\n      return;\n    }\n    if (entry.lines.every(e => e.line !== y)) {\n      const marker = this._bufferService.buffer.addMarker(y);\n      entry.lines.push(marker);\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    }\n  }\n\n  public getLinkData(linkId: number): IOscLinkData | undefined {\n    return this._dataByLinkId.get(linkId)?.data;\n  }\n\n  private _getEntryIdKey(linkData: Required<IOscLinkData>): string {\n    return `${linkData.id};;${linkData.uri}`;\n  }\n\n  private _removeMarkerFromLink(entry: IOscLinkEntryNoId | IOscLinkEntryWithId, marker: IMarker): void {\n    const index = entry.lines.indexOf(marker);\n    if (index === -1) {\n      return;\n    }\n    entry.lines.splice(index, 1);\n    if (entry.lines.length === 0) {\n      if (entry.data.id !== undefined) {\n        this._entriesWithId.delete((entry as IOscLinkEntryWithId).key);\n      }\n      this._dataByLinkId.delete(entry.id);\n    }\n  }\n}\n\ninterface IOscLinkEntry<T extends IOscLinkData> {\n  data: T;\n  id: number;\n  lines: IMarker[];\n}\n\ninterface IOscLinkEntryNoId extends IOscLinkEntry<IOscLinkData> {\n}\n\ninterface IOscLinkEntryWithId extends IOscLinkEntry<Required<IOscLinkData>> {\n  key: string;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n  readonly onRequestScrollToBottom: IEvent<void>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasUserInput Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n\n  /**\n   * Options as exposed through the public API, this property uses getters and setters with\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\n   * all internal usage for performance reasons.\n   */\n  readonly options: Required<ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when any option changes.\n   */\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\n\n  /**\n   * Adds an event listener for when a set of specific options change, this is a convenience method\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\n   * handled the same way.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollOnUserInput?: boolean;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n\n  private readonly _onChange = new EventEmitter<string>();\n  public readonly onChange = this._onChange.event;\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public dispose(): void {\n    this._onChange.dispose();\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal as ITerminalApi, IMarker, IDisposable, ILocalizableStrings, ITerminalAddon, IBufferNamespace as IBufferNamespaceApi, IParser, ILinkProvider, IUnicodeHandling, IModes, IDecorationOptions, IDecoration } from 'xterm';\nimport { IBufferRange, ITerminal } from 'browser/Types';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { IEvent } from 'common/EventEmitter';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ITerminalOptions } from 'common/Types';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: Required<ITerminalOptions>;\n\n  constructor(options?: ITerminalOptions) {\n    this._core = new TerminalCore(options);\n    this._addonManager = new AddonManager();\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n  public get onWriteParsed(): IEvent<void> { return this._core.onWriteParsed; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    if (!this._buffer) {\n      this._buffer = new BufferNamespaceApi(this._core);\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): Required<ITerminalOptions> {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker | undefined {\n    this._verifyIntegers(cursorYOffset);\n    return this._core.addMarker(cursorYOffset);\n  }\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    this._checkProposedApi();\n    this._verifyPositiveIntegers(decorationOptions.x ?? 0, decorationOptions.width ?? 0, decorationOptions.height ?? 0);\n    return this._core.registerDecoration(decorationOptions);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): IBufferRange | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    this._addonManager.dispose();\n    this._core.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    return this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n\n  private _verifyPositiveIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value && (value === Infinity || isNaN(value) || value % 1 !== 0 || value < 0)) {\n        throw new Error('This API only accepts positive integers');\n      }\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;KAAA,SAA2CA,GAAMC,GAAAA;AAChD,UAAsB,YAAA,OAAZC,WAA0C,YAAA,OAAXC;AACxCA,eAAOD,UAAUD,EAAAA;eACQ,cAAA,OAAXG,UAAyBA,OAAOC;AAC9CD,eAAO,CAAA,GAAIH,CAAAA;WACP;AACJ,YAAIK,IAAIL,EAAAA;AACR,iBAAQM,KAAKD;AAAAA,WAAuB,YAAA,OAAZJ,UAAuBA,UAAUF,GAAMO,CAAAA,IAAKD,EAAEC,CAAAA;MACvE;IACA,EAAEC,MAAM,WAAA;AACT,cAAA,MAAA;AAAA;AAAA,YAAA,IAAA,EAAA,MAAA,CAAAC,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,uBAAA;ACLA,gBAAAC,KAAAJ,GAAA,IAAA,GAGA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA;AASA,gBAAaK,UAA6B,EAAAC,WAAAA;YA0BxCC,YACmBC,IACAC,IAAAA;AAEjBC,oBAAAA,GAHiB,KAAAF,YAAAA,IACA,KAAAC,iBAAAA,IAvBX,KAAAE,uBAA+B,GAiB/B,KAAAC,kBAA4B,CAAA,GAE5B,KAAAC,mBAA2B,IAOjCC,KAAKC,yBAAyBC,SAASC,cAAc,KAAA,GACrDH,KAAKC,uBAAuBG,UAAUC,IAAI,qBAAA,GAC1CL,KAAKC,uBAAuBK,WAAW,GAEvCN,KAAKO,gBAAgBL,SAASC,cAAc,KAAA,GAC5CH,KAAKO,cAAcC,aAAa,QAAQ,MAAA,GACxCR,KAAKO,cAAcH,UAAUC,IAAI,0BAAA,GACjCL,KAAKS,eAAe,CAAA;AACpB,uBAASvB,KAAI,GAAGA,KAAIc,KAAKN,UAAUgB,MAAMxB;AACvCc,qBAAKS,aAAavB,EAAAA,IAAKc,KAAKW,6BAAAA,GAC5BX,KAAKO,cAAcK,YAAYZ,KAAKS,aAAavB,EAAAA,CAAAA;AAmBnD,kBAhBAc,KAAKa,4BAA4BzB,CAAAA,OAAKY,KAAKc,qBAAqB1B,IAAG,CAAA,GACnEY,KAAKe,+BAA+B3B,CAAAA,OAAKY,KAAKc,qBAAqB1B,IAAG,CAAA,GACtEY,KAAKS,aAAa,CAAA,EAAGO,iBAAiB,SAAShB,KAAKa,yBAAAA,GACpDb,KAAKS,aAAaT,KAAKS,aAAaQ,SAAS,CAAA,EAAGD,iBAAiB,SAAShB,KAAKe,4BAAAA,GAE/Ef,KAAKkB,uBAAAA,GACLlB,KAAKC,uBAAuBW,YAAYZ,KAAKO,aAAAA,GAE7CP,KAAKmB,uBAAuB,IAAI,EAAAC,mBAAmBpB,KAAKqB,YAAYC,KAAKtB,IAAAA,CAAAA,GACzEA,KAAKuB,aAAAA,GAELvB,KAAKwB,cAActB,SAASC,cAAc,KAAA,GAC1CH,KAAKwB,YAAYpB,UAAUC,IAAI,aAAA,GAC/BL,KAAKwB,YAAYhB,aAAa,aAAa,WAAA,GAC3CR,KAAKC,uBAAuBW,YAAYZ,KAAKwB,WAAAA,GAAAA,CAExCxB,KAAKN,UAAU+B;AAClB,sBAAM,IAAIC,MAAM,kDAAA;AAElB1B,mBAAKN,UAAU+B,QAAQE,sBAAsB,cAAc3B,KAAKC,sBAAAA,GAEhED,KAAK4B,SAAS5B,KAAKmB,oBAAAA,GACnBnB,KAAK4B,SAAS5B,KAAKN,UAAUmC,SAASzC,CAAAA,OAAKY,KAAK8B,cAAc1C,GAAEsB,IAAAA,CAAAA,CAAAA,GAChEV,KAAK4B,SAAS5B,KAAKN,UAAUqC,SAAS3C,CAAAA,OAAKY,KAAKuB,aAAanC,GAAE4C,OAAO5C,GAAE6C,GAAAA,CAAAA,CAAAA,GACxEjC,KAAK4B,SAAS5B,KAAKN,UAAUwC,SAAS,MAAMlC,KAAKuB,aAAAA,CAAAA,CAAAA,GAEjDvB,KAAK4B,SAAS5B,KAAKN,UAAUyC,WAAWC,CAAAA,OAAQpC,KAAKqC,YAAYD,EAAAA,CAAAA,CAAAA,GACjEpC,KAAK4B,SAAS5B,KAAKN,UAAU4C,WAAW,MAAMtC,KAAKqC,YAAY,IAAA,CAAA,CAAA,GAC/DrC,KAAK4B,SAAS5B,KAAKN,UAAU6C,UAAUC,CAAAA,OAAcxC,KAAKyC,WAAWD,EAAAA,CAAAA,CAAAA,GACrExC,KAAK4B,SAAS5B,KAAKN,UAAUgD,MAAMtD,CAAAA,OAAKY,KAAK2C,WAAWvD,GAAEwD,GAAAA,CAAAA,CAAAA,GAC1D5C,KAAK4B,SAAS5B,KAAKN,UAAUmD,OAAO,MAAM7C,KAAK8C,iBAAAA,CAAAA,CAAAA,GAC/C9C,KAAK4B,SAAS5B,KAAKL,eAAeoD,mBAAmB,MAAM/C,KAAKkB,uBAAAA,CAAAA,CAAAA,GAEhElB,KAAKgD,oBAAoB,IAAI,EAAAC,iBAAiBC,MAAAA,GAC9ClD,KAAK4B,SAAS5B,KAAKgD,iBAAAA,GACnBhD,KAAKgD,kBAAkBG,YAAY,MAAMnD,KAAKkB,uBAAAA,CAAAA,GAG9ClB,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBF,QAAQ,UAAU,MAAMlD,KAAKkB,uBAAAA,CAAAA,CAAAA,GACpElB,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AAAA,iBACzB,GAAA,EAAAC,yBAAwBtD,KAAKC,sBAAAA,GAC7BD,KAAKS,aAAaQ,SAAS;cAAC,CAAA,CAAA;YAEhC;YAEQH,qBAAqB1B,IAAemE,IAAAA;AAC1C,oBAAMC,KAAkBpE,GAAEqE,QACpBC,KAAwB1D,KAAKS,aAA0B,MAAb8C,KAAoC,IAAIvD,KAAKS,aAAaQ,SAAS,CAAA;AAKnH,kBAFiBuC,GAAgBG,aAAa,eAAA,OACd,MAAbJ,KAAoC,MAAM,GAAGvD,KAAKN,UAAUkE,OAAOC,MAAM5C;AAE1F;AAKF,kBAAI7B,GAAE0E,kBAAkBJ;AACtB;AAIF,kBAAIK,IACAC;AAgBJ,kBAfiB,MAAbT,MACFQ,KAAqBP,IACrBQ,KAAwBhE,KAAKS,aAAawD,IAAAA,GAC1CjE,KAAKO,cAAc2D,YAAYF,EAAAA,MAE/BD,KAAqB/D,KAAKS,aAAa0D,MAAAA,GACvCH,KAAwBR,IACxBxD,KAAKO,cAAc2D,YAAYH,EAAAA,IAIjCA,GAAmBK,oBAAoB,SAASpE,KAAKa,yBAAAA,GACrDmD,GAAsBI,oBAAoB,SAASpE,KAAKe,4BAAAA,GAGvC,MAAbwC,IAAmC;AACrC,sBAAMc,KAAarE,KAAKW,6BAAAA;AACxBX,qBAAKS,aAAa6D,QAAQD,EAAAA,GAC1BrE,KAAKO,cAAcoB,sBAAsB,cAAc0C,EAAAA;cAAAA,OAClD;AACL,sBAAMA,KAAarE,KAAKW,6BAAAA;AACxBX,qBAAKS,aAAa8D,KAAKF,EAAAA,GACvBrE,KAAKO,cAAcK,YAAYyD,EAAAA;cAAAA;AAIjCrE,mBAAKS,aAAa,CAAA,EAAGO,iBAAiB,SAAShB,KAAKa,yBAAAA,GACpDb,KAAKS,aAAaT,KAAKS,aAAaQ,SAAS,CAAA,EAAGD,iBAAiB,SAAShB,KAAKe,4BAAAA,GAG/Ef,KAAKN,UAAU8E,YAAyB,MAAbjB,KAAAA,KAAyC,CAAA,GAGpEvD,KAAKS,aAA0B,MAAb8C,KAAoC,IAAIvD,KAAKS,aAAaQ,SAAS,CAAA,EAAGwD,MAAAA,GAGxFrF,GAAEsF,eAAAA,GACFtF,GAAEuF,yBAAAA;YACJ;YAEQ7C,cAAcpB,IAAAA;AAEpBV,mBAAKS,aAAaT,KAAKS,aAAaQ,SAAS,CAAA,EAAGmD,oBAAoB,SAASpE,KAAKe,4BAAAA;AAGlF,uBAAS7B,KAAIc,KAAKO,cAAcqE,SAAS3D,QAAQ/B,KAAIc,KAAKN,UAAUgB,MAAMxB;AACxEc,qBAAKS,aAAavB,EAAAA,IAAKc,KAAKW,6BAAAA,GAC5BX,KAAKO,cAAcK,YAAYZ,KAAKS,aAAavB,EAAAA,CAAAA;AAGnD,qBAAOc,KAAKS,aAAaQ,SAASP;AAChCV,qBAAKO,cAAc2D,YAAYlE,KAAKS,aAAawD,IAAAA,CAAAA;AAInDjE,mBAAKS,aAAaT,KAAKS,aAAaQ,SAAS,CAAA,EAAGD,iBAAiB,SAAShB,KAAKe,4BAAAA,GAE/Ef,KAAKkB,uBAAAA;YACP;YAEQP,+BAAAA;AACN,oBAAMc,KAAUvB,SAASC,cAAc,KAAA;AAIvC,qBAHAsB,GAAQjB,aAAa,QAAQ,UAAA,GAC7BiB,GAAQnB,WAAAA,IACRN,KAAK6E,sBAAsBpD,EAAAA,GACpBA;YACT;YAEQgB,WAAWD,IAAAA;AACjB,uBAAStD,KAAI,GAAGA,KAAIsD,IAAYtD;AAC9Bc,qBAAKqC,YAAY,GAAA;YAErB;YAEQA,YAAYD,IAAAA;AACdpC,mBAAKH,uBAAuBiF,OAC1B9E,KAAKF,gBAAgBmB,SAAS,IAEZjB,KAAKF,gBAAgBqE,MAAAA,MACrB/B,OAClBpC,KAAKD,oBAAoBqC,MAG3BpC,KAAKD,oBAAoBqC,IAGd,SAATA,OACFpC,KAAKH,wBAC6BiF,OAA9B9E,KAAKH,yBACPG,KAAKwB,YAAYuD,eAAeC,GAAQC,iBAKxC,EAAAC,SACElF,KAAKwB,YAAYuD,eAAe/E,KAAKwB,YAAYuD,YAAY9D,SAAS,KAAA,CAAMjB,KAAKwB,YAAY2D,cAC/FC,WAAW,MAAA;AACTpF,qBAAKC,uBAAuBW,YAAYZ,KAAKwB,WAAAA;cAAY,GACxD,CAAA;YAIX;YAEQsB,mBAAAA;AACN9C,mBAAKwB,YAAYuD,cAAc,IAC/B/E,KAAKH,uBAAuB,GAGxB,EAAAqF,UACF,GAAA,EAAA5B,yBAAwBtD,KAAKwB,WAAAA;YAEjC;YAEQmB,WAAW0C,IAAAA;AACjBrF,mBAAK8C,iBAAAA,GAEA,eAAewC,KAAKD,EAAAA,KACvBrF,KAAKF,gBAAgByE,KAAKc,EAAAA;YAE9B;YAEQ9D,aAAaS,IAAgBC,IAAAA;AACnCjC,mBAAKmB,qBAAqBoE,QAAQvD,IAAOC,IAAKjC,KAAKN,UAAUgB,IAAAA;YAC/D;YAEQW,YAAYW,IAAeC,IAAAA;AACjC,oBAAM2B,KAAkB5D,KAAKN,UAAUkE,QACjC4B,KAAU5B,GAAOC,MAAM5C,OAAOwE,SAAAA;AACpC,uBAASvG,KAAI8C,IAAO9C,MAAK+C,IAAK/C,MAAK;AACjC,sBAAMwG,KAAW9B,GAAO+B,4BAA4B/B,GAAOgC,QAAQ1G,IAAAA,IAAG,GAChE2G,MAAYjC,GAAOgC,QAAQ1G,KAAI,GAAGuG,SAAAA,GAClChE,KAAUzB,KAAKS,aAAavB,EAAAA;AAC9BuC,gBAAAA,OACsB,MAApBiE,GAASzE,SACXQ,GAAQqE,YAAY,MAEpBrE,GAAQsD,cAAcW,IAExBjE,GAAQjB,aAAa,iBAAiBqF,EAAAA,GACtCpE,GAAQjB,aAAa,gBAAgBgF,EAAAA;cAAAA;AAGzCxF,mBAAK+F,oBAAAA;YACP;YAEQ7E,yBAAAA;AACN,kBAAKlB,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,QAA7C;AAGAnG,qBAAKC,uBAAuBmG,MAAMC,QAAQ,GAAGrG,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOD,WACnFrG,KAAKS,aAAaQ,WAAWjB,KAAKN,UAAUgB,QAC9CV,KAAK8B,cAAc9B,KAAKN,UAAUgB,IAAAA;AAEpC,yBAASxB,KAAI,GAAGA,KAAIc,KAAKN,UAAUgB,MAAMxB;AACvCc,uBAAK6E,sBAAsB7E,KAAKS,aAAavB,EAAAA,CAAAA;cAAAA;YAEjD;YAEQ2F,sBAAsBpD,IAAAA;AAC5BA,cAAAA,GAAQ2E,MAAMD,SAAS,GAAGnG,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC;YACpE;YAEQJ,sBAAAA;AAC+B,oBAAjC/F,KAAKD,iBAAiBkB,WAG1BjB,KAAKwB,YAAYuD,eAAe/E,KAAKD,kBACrCC,KAAKD,mBAAmB;YAC1B;UAAA;AAtRF,UAAAV,GAAA,uBAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,OAAA;ACXA,mBAAgBkH,GAAuBC,IAAAA;AACrC,mBAAOA,GAAKC,QAAQ,UAAU,IAAA;UAChC;AAMA,mBAAgBC,GAAoBF,IAAcG,IAAAA;AAChD,mBAAIA,KACK,cAAcH,KAAO,cAEvBA;UACT;AAyBA,mBAAgBI,EAAMJ,IAAcK,IAA+BC,IAAAA;AAEjEN,YAAAA,KAAOE,GADPF,KAAOD,GAAuBC,EAAAA,GACGM,GAAYC,gBAAgBJ,kBAAAA,GAC7DG,GAAYE,iBAAiBR,IAAAA,IAAM,GACnCK,GAASI,QAAQ;UACnB;AAOA,mBAAgBC,EAA6BC,IAAgBN,IAA+BO,IAAAA;AAG1F,kBAAMC,KAAMD,GAAcE,sBAAAA,GACpBC,KAAOJ,GAAGK,UAAUH,GAAIE,OAAO,IAC/BE,KAAMN,GAAGO,UAAUL,GAAII,MAAM;AAGnCZ,YAAAA,GAAST,MAAMC,QAAQ,QACvBQ,GAAST,MAAMD,SAAS,QACxBU,GAAST,MAAMmB,OAAO,GAAGA,QACzBV,GAAST,MAAMqB,MAAM,GAAGA,QACxBZ,GAAST,MAAMuB,SAAS,QAExBd,GAASpC,MAAAA;UACX;AAAA,iBAAA,eAAApF,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,oBAAAA,GAAA,+BAAAA,GAAA,QAAAA,GAAA,mBAAAA,GAAA,cAAAA,GAAA,sBAAAA,GAAA,yBAAA,QAjEAA,GAAA,yBAAAH,IAQAG,GAAA,sBAAAC,IAWAD,GAAA,cAAA,SAA4B8H,IAAoBS,IAAAA;AAC1CT,YAAAA,GAAGU,iBACLV,GAAGU,cAAcC,QAAQ,cAAcF,GAAiBG,aAAAA,GAG1DZ,GAAGzC,eAAAA;UACL,GAKArF,GAAA,mBAAA,SAAiC8H,IAAoBN,IAA+BC,IAAAA;AAClFK,YAAAA,GAAGa,gBAAAA,GACCb,GAAGU,iBAELjB,EADaO,GAAGU,cAAcI,QAAQ,YAAA,GAC1BpB,IAAUC,EAAAA;UAE1B,GAEAzH,GAAA,QAAA,GAYAA,GAAA,+BAAA,GAoBAA,GAAA,oBAAA,SAAkC8H,IAAgBN,IAA+BO,IAA4BQ,IAAqCM,IAAAA;AAChJhB,cAA6BC,IAAIN,IAAUO,EAAAA,GAEvCc,MACFN,GAAiBO,iBAAiBhB,EAAAA,GAIpCN,GAASI,QAAQW,GAAiBG,eAClClB,GAASuB,OAAAA;UACX;QAAA,GAAA,MAAA,CAAAhJ,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,qBAAA;ACrFA,gBAAAC,KAAAJ,GAAA,IAAA;AAEA,UAAAG,GAAA,qBAAA,MAAA;YAAA,cAAA;AACU,mBAAAgJ,SAAmE,IAAI/I,GAAAgJ,aACvE,KAAAC,OAAiE,IAAIjJ,GAAAgJ;YAsB/E;YApBSE,OAAOC,IAAYC,IAAYzB,IAAAA;AACpCjH,mBAAKuI,KAAKI,IAAIF,IAAIC,IAAIzB,EAAAA;YACxB;YAEO2B,OAAOH,IAAYC,IAAAA;AACxB,qBAAO1I,KAAKuI,KAAKM,IAAIJ,IAAIC,EAAAA;YAC3B;YAEOI,SAASL,IAAYC,IAAYzB,IAAAA;AACtCjH,mBAAKqI,OAAOM,IAAIF,IAAIC,IAAIzB,EAAAA;YAC1B;YAEO8B,SAASN,IAAYC,IAAAA;AAC1B,qBAAO1I,KAAKqI,OAAOQ,IAAIJ,IAAIC,EAAAA;YAC7B;YAEOM,QAAAA;AACLhJ,mBAAKqI,OAAOW,MAAAA,GACZhJ,KAAKuI,KAAKS,MAAAA;YACZ;UAAA;QAAA,GAAA,MAAA,CAAA5J,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,0BAAA,QC3BFA,GAAA,0BAAA,YAA2C4J,IAAAA;AAAAA,gBAAAA;AACzC,uBAAW7J,MAAK6J;AACE,wBAAhB5J,KAAAD,QAAAA,KAAAA,SAAAA,GAAG8J,kBAAAA,WAAa7J,MAAAA,GAAE6E,YAAY9E,EAAAA;UAElC;QAAA,GAAA,MAAA,CAAAA,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,2BAAA,QCMAA,GAAA,2BAAA,SACE8J,IACAC,IACAC,IACAC,IAAAA;AAEAH,YAAAA,GAAKnI,iBAAiBoI,IAAMC,IAASC,EAAAA;AACrC,gBAAIC,IAAAA;AACJ,mBAAO,EACLC,SAAS,MAAA;AACHD,oBAGJA,IAAAA,MACAJ,GAAK/E,oBAAoBgF,IAAMC,IAASC,EAAAA;YAAQ,EAAA;UAGtD;QAAA,GAAA,MAAA,SAAAlK,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAA;ACxBA,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA;AAEA,cAAa0K,IAAb,cAAgC,EAAApK,WAAAA;YAoB9BC,YACmCoK,IAAAA;AAEjCjK,oBAAAA,GAFiC,KAAAiK,iBAAAA,IAjB3B,KAAAC,iBAAkC,CAAA,GAKlC,KAAAC,wBAAuC,CAAA,GAEvC,KAAAC,cAAAA,MAEA,KAAAC,cAAAA,IAES,KAAAC,uBAAuBlK,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC1C,KAAAC,sBAAsBpK,KAAKkK,qBAAqBG,OAC/C,KAAAC,uBAAuBtK,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC1C,KAAAI,sBAAsBvK,KAAKsK,qBAAqBD,OAM9DrK,KAAK4B,UAAS,GAAA,EAAA4I,2BAA0BxK,KAAK+J,qBAAAA,CAAAA,GAC7C/J,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AACzBrD,qBAAKyK,kBAAAA;cAA2B,CAAA,CAAA;YAEpC;YAvBWC,IAAAA,cAAAA;AAA4C,qBAAO1K,KAAK2K;YAAc;YAyB1EC,qBAAqBC,IAAAA;AAE1B,qBADA7K,KAAK8J,eAAevF,KAAKsG,EAAAA,GAClB,EACLrB,SAAS,MAAA;AAEP,sBAAMsB,KAAgB9K,KAAK8J,eAAeiB,QAAQF,EAAAA;AAAAA,uBAE9CC,MACF9K,KAAK8J,eAAekB,OAAOF,IAAe,CAAA;cAAA,EAAA;YAIlD;YAEOG,YAAYxJ,IAAsByJ,IAA6BC,IAAAA;AACpEnL,mBAAKoL,WAAW3J,IAChBzB,KAAKqL,gBAAgBH,IACrBlL,KAAKL,iBAAiBwL,IAEtBnL,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKoL,UAAU,cAAc,MAAA;AAClEpL,qBAAKgK,cAAAA,MACLhK,KAAKsL,kBAAAA;cAAmB,CAAA,CAAA,GAE1BtL,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKoL,UAAU,aAAapL,KAAKuL,iBAAiBjK,KAAKtB,IAAAA,CAAAA,CAAAA,GAC9FA,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKoL,UAAU,aAAapL,KAAKwL,iBAAiBlK,KAAKtB,IAAAA,CAAAA,CAAAA,GAC9FA,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKoL,UAAU,WAAWpL,KAAKyL,eAAenK,KAAKtB,IAAAA,CAAAA,CAAAA;YAC5F;YAEQuL,iBAAiBlB,IAAAA;AAGvB,kBAFArK,KAAKyK,kBAAkBJ,IAAAA,CAElBrK,KAAKoL,YAAAA,CAAapL,KAAKqL;AAC1B;AAGF,oBAAM9H,KAAWvD,KAAK0L,wBAAwBrB,IAAOrK,KAAKoL,UAAUpL,KAAKqL,aAAAA;AACzE,kBAAA,CAAK9H;AACH;AAEFvD,mBAAKgK,cAAAA;AAGL,oBAAM2B,KAAetB,GAAMsB,aAAAA;AAC3B,uBAASzM,KAAI,GAAGA,KAAIyM,GAAa1K,QAAQ/B,MAAK;AAC5C,sBAAMuE,KAASkI,GAAazM,EAAAA;AAE5B,oBAAIuE,GAAOrD,UAAUwL,SAAS,OAAA;AAC5B;AAGF,oBAAInI,GAAOrD,UAAUwL,SAAS,aAAA;AAC5B;cAAA;AAIC5L,mBAAK6L,mBAAoBtI,GAASuI,MAAM9L,KAAK6L,gBAAgBC,KAAKvI,GAASwI,MAAM/L,KAAK6L,gBAAgBE,MACzG/L,KAAKgM,aAAazI,EAAAA,GAClBvD,KAAK6L,kBAAkBtI;YAE3B;YAEQyI,aAAazI,IAAAA;AAGnB,kBAAIvD,KAAKiK,gBAAgB1G,GAASwI;AAGhC,uBAFA/L,KAAKsL,kBAAAA,GAAAA,KACLtL,KAAKiM,YAAY1I,IAAAA,KAAU;AAKGvD,mBAAK2K,gBAAgB3K,KAAKkM,gBAAgBlM,KAAK2K,aAAawB,MAAM5I,EAAAA,MAEhGvD,KAAKsL,kBAAAA,GACLtL,KAAKiM,YAAY1I,IAAAA,IAAU;YAE/B;YAEQ0I,YAAY1I,IAA+B6I,IAAAA;AAAAA,kBAAAA,IAAAA;AAC5CpM,mBAAKqM,0BAA2BD,OACR,UAA3BlN,KAAAc,KAAKqM,2BAAAA,WAAsBnN,MAAAA,GAAEoN,QAAQC,CAAAA,OAAAA;AACnCA,wBAAAA,MAAAA,GAAOD,QAAQE,CAAAA,OAAAA;AACTA,kBAAAA,GAAcL,KAAK3C,WACrBgD,GAAcL,KAAK3C,QAAAA;gBAAAA,CAAAA;cAErB,CAAA,GAEJxJ,KAAKqM,yBAAyB,oBAAII,OAClCzM,KAAKiK,cAAc1G,GAASwI;AAE9B,kBAAIW,KAAAA;AAGJ,yBAAK,CAAOxN,IAAG2L,EAAAA,KAAiB7K,KAAK8J,eAAe6C,QAAAA;AAC9CP,gBAAAA,MAC+C,UAA3B9M,KAAAU,KAAKqM,2BAAAA,WAAsB/M,KAAA,SAAAA,GAAEuJ,IAAI3J,EAAAA,OAOrDwN,KAAe1M,KAAK4M,yBAAyB1N,IAAGqE,IAAUmJ,EAAAA,KAG5D7B,GAAagC,aAAatJ,GAASwI,GAAIe,CAAAA,OAAAA;AAAAA,sBAAAA,IAAAA;AACrC,sBAAI9M,KAAKgK;AACP;AAEF,wBAAM+C,KAA+CD,QAAAA,KAAAA,SAAAA,GAAOE,IAAIb,CAAAA,QAAS,EAAGA,MAAAA,GAAAA,EAAAA;AACjD,4BAA3B7M,KAAAU,KAAKqM,2BAAAA,WAAsB/M,MAAAA,GAAEqJ,IAAIzJ,IAAG6N,EAAAA,GACpCL,KAAe1M,KAAK4M,yBAAyB1N,IAAGqE,IAAUmJ,EAAAA,IAI3B,UAA3BhD,KAAA1J,KAAKqM,2BAAAA,WAAsB3C,KAAA,SAAAA,GAAEuD,UAASjN,KAAK8J,eAAe7I,UAC5DjB,KAAKkN,yBAAyB3J,GAASwI,GAAG/L,KAAKqM,sBAAAA;gBAAAA,CAAAA;YAKzD;YAEQa,yBAAyBnB,IAAWoB,IAAAA;AAC1C,oBAAMC,KAAgB,oBAAIC;AAC1B,uBAASnO,KAAI,GAAGA,KAAIiO,GAAQF,MAAM/N,MAAK;AACrC,sBAAMoO,KAAgBH,GAAQtE,IAAI3J,EAAAA;AAClC,oBAAKoO;AAGL,2BAASpO,KAAI,GAAGA,KAAIoO,GAAcrM,QAAQ/B,MAAK;AAC7C,0BAAMsN,KAAgBc,GAAcpO,EAAAA,GAC9BqO,KAASf,GAAcL,KAAKqB,MAAMxL,MAAM+J,IAAIA,KAAI,IAAIS,GAAcL,KAAKqB,MAAMxL,MAAM8J,GACnF2B,KAAOjB,GAAcL,KAAKqB,MAAMvL,IAAI8J,IAAIA,KAAI/L,KAAK6J,eAAe6D,OAAOlB,GAAcL,KAAKqB,MAAMvL,IAAI6J;AAC1G,6BAASA,KAAIyB,IAAQzB,MAAK2B,IAAM3B,MAAK;AACnC,0BAAIsB,GAAcO,IAAI7B,EAAAA,GAAI;AACxBwB,wBAAAA,GAActC,OAAO9L,MAAK,CAAA;AAC1B;sBAAA;AAEFkO,sBAAAA,GAAc/M,IAAIyL,EAAAA;oBAAAA;kBAAAA;cAAAA;YAI1B;YAEQc,yBAAyBgB,IAAerK,IAA+BmJ,IAAAA;AAAAA,kBAAAA;AAC7E,kBAAA,CAAK1M,KAAKqM;AACR,uBAAOK;AAGT,oBAAMI,KAAQ9M,KAAKqM,uBAAuBxD,IAAI+E,EAAAA;AAG9C,kBAAIC,KAAAA;AACJ,uBAASC,KAAI,GAAGA,KAAIF,IAAOE;AACpB9N,qBAAKqM,uBAAuBsB,IAAIG,EAAAA,KAAAA,CAAM9N,KAAKqM,uBAAuBxD,IAAIiF,EAAAA,MACzED,KAAAA;AAMJ,kBAAA,CAAKA,MAAiBf,IAAO;AAC3B,sBAAMiB,KAAiBjB,GAAMkB,KAAK7B,CAAAA,OAAQnM,KAAKkM,gBAAgBC,GAAKA,MAAM5I,EAAAA,CAAAA;AACtEwK,gBAAAA,OACFrB,KAAAA,MACA1M,KAAKiO,eAAeF,EAAAA;cAAAA;AAKxB,kBAAI/N,KAAKqM,uBAAuBY,SAASjN,KAAK8J,eAAe7I,UAAAA,CAAWyL;AAEtE,yBAASoB,KAAI,GAAGA,KAAI9N,KAAKqM,uBAAuBY,MAAMa,MAAK;AACzD,wBAAMpD,KAAgD,UAAlCpL,KAAAU,KAAKqM,uBAAuBxD,IAAIiF,EAAAA,MAAAA,WAAExO,KAAA,SAAAA,GAAE0O,KAAK7B,CAAAA,OAAQnM,KAAKkM,gBAAgBC,GAAKA,MAAM5I,EAAAA,CAAAA;AACrG,sBAAImH,IAAa;AACfgC,oBAAAA,KAAAA,MACA1M,KAAKiO,eAAevD,EAAAA;AACpB;kBAAA;gBAAA;AAKN,qBAAOgC;YACT;YAEQlB,mBAAAA;AACNxL,mBAAKkO,iBAAiBlO,KAAK2K;YAC7B;YAEQc,eAAepB,IAAAA;AACrB,kBAAA,CAAKrK,KAAKoL,YAAAA,CAAapL,KAAKqL,iBAAAA,CAAkBrL,KAAK2K;AACjD;AAGF,oBAAMpH,KAAWvD,KAAK0L,wBAAwBrB,IAAOrK,KAAKoL,UAAUpL,KAAKqL,aAAAA;AACpE9H,cAAAA,MAIDvD,KAAKkO,mBAAmBlO,KAAK2K,gBAAgB3K,KAAKkM,gBAAgBlM,KAAK2K,aAAawB,MAAM5I,EAAAA,KAC5FvD,KAAK2K,aAAawB,KAAKgC,SAAS9D,IAAOrK,KAAK2K,aAAawB,KAAK3F,IAAAA;YAElE;YAEQ8E,kBAAkB8C,IAAmBC,IAAAA;AACtCrO,mBAAKoL,YAAapL,KAAK2K,gBAAiB3K,KAAKyK,oBAAAA,CAK7C2D,MAAAA,CAAaC,MAAWrO,KAAK2K,aAAawB,KAAKqB,MAAMxL,MAAM+J,KAAKqC,MAAYpO,KAAK2K,aAAawB,KAAKqB,MAAMvL,IAAI8J,KAAKsC,QACrHrO,KAAKsO,WAAWtO,KAAKoL,UAAUpL,KAAK2K,aAAawB,MAAMnM,KAAKyK,eAAAA,GAC5DzK,KAAK2K,eAAAA,SACL,GAAA,EAAA4D,cAAavO,KAAK+J,qBAAAA;YAEtB;YAEQkE,eAAezB,IAAAA;AACrB,kBAAA,CAAKxM,KAAKoL,YAAAA,CAAapL,KAAKyK,mBAAAA,CAAoBzK,KAAKqL;AACnD;AAGF,oBAAM9H,KAAWvD,KAAK0L,wBAAwB1L,KAAKyK,iBAAiBzK,KAAKoL,UAAUpL,KAAKqL,aAAAA;AAEnF9H,cAAAA,MAKDvD,KAAKkM,gBAAgBM,GAAcL,MAAM5I,EAAAA,MAC3CvD,KAAK2K,eAAe6B,IACpBxM,KAAK2K,aAAa6D,QAAQ,EACxBC,aAAa,EACXC,WAAAA,WAAWlC,GAAcL,KAAKsC,eAAmCjC,GAAcL,KAAKsC,YAAYC,WAChGC,eAAAA,WAAenC,GAAcL,KAAKsC,eAAmCjC,GAAcL,KAAKsC,YAAYE,cAAAA,GAEtGC,WAAAA,KAAW,GAEb5O,KAAK6O,WAAW7O,KAAKoL,UAAUoB,GAAcL,MAAMnM,KAAKyK,eAAAA,GAGxD+B,GAAcL,KAAKsC,cAAc,CAAC,GAClCK,OAAOC,iBAAiBvC,GAAcL,KAAKsC,aAAa,EACtDE,eAAe,EACb9F,KAAK,MAAA;AAAK,oBAAAzJ,IAAAC;AAAC,uBAAwB,UAAxBA,KAAiB,UAAjBD,KAAAY,KAAK2K,iBAAAA,WAAYvL,KAAA,SAAAA,GAAEoP,UAAAA,WAAKnP,KAAA,SAAAA,GAAEoP,YAAYE;cAAa,GAC9DhG,KAAKqG,CAAAA,OAAAA;AAAAA,oBAAAA,IAAAA;AAAAA,iBACkB,UAAjB3P,KAAAW,KAAK2K,iBAAAA,WAAYtL,KAAA,SAAAA,GAAEmP,UAASxO,KAAK2K,aAAa6D,MAAMC,YAAYE,kBAAkBK,OACpFhP,KAAK2K,aAAa6D,MAAMC,YAAYE,gBAAgBK,IAChDhP,KAAK2K,aAAa6D,MAAMI,cACb,UAAb1P,KAAAc,KAAKoL,aAAAA,WAAQlM,MAAAA,GAAEkB,UAAU6O,OAAO,wBAAwBD,EAAAA;cAAAA,EAAAA,GAKhEN,WAAW,EACT7F,KAAK,MAAA;AAAK,oBAAAzJ,IAAAC;AAAC,uBAAwB,UAAxBA,KAAiB,UAAjBD,KAAAY,KAAK2K,iBAAAA,WAAYvL,KAAA,SAAAA,GAAEoP,UAAAA,WAAKnP,KAAA,SAAAA,GAAEoP,YAAYC;cAAS,GAC1D/F,KAAKqG,CAAAA,OAAAA;AAAAA,oBAAAA,IAAAA,IAAAA;AAAAA,iBACkB,UAAjB9P,KAAAc,KAAK2K,iBAAAA,WAAYzL,KAAA,SAAAA,GAAEsP,WAAiC,UAAxB/E,KAAiB,UAAjBnK,KAAAU,KAAK2K,iBAAAA,WAAYrL,KAAA,SAAAA,GAAEkP,UAAAA,WAAK/E,KAAA,SAAAA,GAAEgF,YAAYC,eAAcM,OAClFhP,KAAK2K,aAAa6D,MAAMC,YAAYC,YAAYM,IAC5ChP,KAAK2K,aAAa6D,MAAMI,aAC1B5O,KAAKkP,oBAAoB1C,GAAcL,MAAM6C,EAAAA;cAAAA,EAAAA,EAAAA,CAAAA,GAQnDhP,KAAKL,kBACPK,KAAK+J,sBAAsBxF,KAAKvE,KAAKL,eAAewP,yBAAyB/P,CAAAA,OAAAA;AAG3E,sBAAM4C,KAAoB,MAAZ5C,GAAE4C,QAAc,IAAI5C,GAAE4C,QAAQ,IAAIhC,KAAK6J,eAAejG,OAAOgC,OACrEwJ,KAAWpP,KAAK2K,eAAe3K,KAAKyK,kBAAAA;AAE1C,oBADAzK,KAAKsL,kBAAkBtJ,IAAO5C,GAAE6C,MAAM,IAAIjC,KAAK6J,eAAejG,OAAOgC,KAAAA,GACjEwJ,MAAYpP,KAAKoL,UAAU;AAE7B,wBAAM7H,KAAWvD,KAAK0L,wBAAwB0D,IAAUpP,KAAKoL,UAAUpL,KAAKqL,aAAAA;AACxE9H,kBAAAA,MACFvD,KAAKiM,YAAY1I,IAAAA,KAAU;gBAAA;cAAA,CAAA,CAAA;YAMvC;YAEUsL,WAAWpN,IAAsB0K,IAAa9B,IAAAA;AAAAA,kBAAAA;AAAAA,eACjC,UAAjB/K,KAAAU,KAAK2K,iBAAAA,WAAYrL,KAAA,SAAAA,GAAEkP,WACrBxO,KAAK2K,aAAa6D,MAAMI,YAAAA,MACpB5O,KAAK2K,aAAa6D,MAAMC,YAAYC,aACtC1O,KAAKkP,oBAAoB/C,IAAAA,IAAM,GAE7BnM,KAAK2K,aAAa6D,MAAMC,YAAYE,iBACtClN,GAAQrB,UAAUC,IAAI,sBAAA,IAItB8L,GAAKkD,SACPlD,GAAKkD,MAAMhF,IAAO8B,GAAK3F,IAAAA;YAE3B;YAEQ0I,oBAAoB/C,IAAamD,IAAAA;AACvC,oBAAM9B,KAAQrB,GAAKqB,OACb+B,KAAevP,KAAK6J,eAAejG,OAAOgC,OAC1CyE,KAAQrK,KAAKwP,0BAA0BhC,GAAMxL,MAAM8J,IAAI,GAAG0B,GAAMxL,MAAM+J,IAAIwD,KAAe,GAAG/B,GAAMvL,IAAI6J,GAAG0B,GAAMvL,IAAI8J,IAAIwD,KAAe,GAAA,MAAGE;AAAAA,eAC/HH,KAAYtP,KAAKkK,uBAAuBlK,KAAKsK,sBACrDoF,KAAKrF,EAAAA;YACf;YAEUiE,WAAW7M,IAAsB0K,IAAa9B,IAAAA;AAAAA,kBAAAA;AAAAA,eACjC,UAAjB/K,KAAAU,KAAK2K,iBAAAA,WAAYrL,KAAA,SAAAA,GAAEkP,WACrBxO,KAAK2K,aAAa6D,MAAMI,YAAAA,OACpB5O,KAAK2K,aAAa6D,MAAMC,YAAYC,aACtC1O,KAAKkP,oBAAoB/C,IAAAA,KAAM,GAE7BnM,KAAK2K,aAAa6D,MAAMC,YAAYE,iBACtClN,GAAQrB,UAAUuP,OAAO,sBAAA,IAIzBxD,GAAKyD,SACPzD,GAAKyD,MAAMvF,IAAO8B,GAAK3F,IAAAA;YAE3B;YAOQ0F,gBAAgBC,IAAa5I,IAAAA;AACnC,oBAAMsM,KAAQ1D,GAAKqB,MAAMxL,MAAM+J,IAAI/L,KAAK6J,eAAe6D,OAAOvB,GAAKqB,MAAMxL,MAAM8J,GACzEgE,KAAQ3D,GAAKqB,MAAMvL,IAAI8J,IAAI/L,KAAK6J,eAAe6D,OAAOvB,GAAKqB,MAAMvL,IAAI6J,GACrEiE,KAAUxM,GAASwI,IAAI/L,KAAK6J,eAAe6D,OAAOnK,GAASuI;AACjE,qBAAQ+D,MAASE,MAAWA,MAAWD;YACzC;YAMQpE,wBAAwBrB,IAAmB5I,IAAsByJ,IAAAA;AACvE,oBAAM8E,KAAS9E,GAAa+E,UAAU5F,IAAO5I,IAASzB,KAAK6J,eAAe6D,MAAM1N,KAAK6J,eAAenJ,IAAAA;AACpG,kBAAKsP;AAIL,uBAAO,EAAElE,GAAGkE,GAAO,CAAA,GAAIjE,GAAGiE,GAAO,CAAA,IAAKhQ,KAAK6J,eAAejG,OAAOgC,MAAAA;YACnE;YAEQ4J,0BAA0BU,IAAYC,IAAYC,IAAYC,IAAY3H,IAAAA;AAChF,qBAAO,EAAEwH,IAAAA,IAAIC,IAAAA,IAAIC,IAAAA,IAAIC,IAAAA,IAAI3C,MAAM1N,KAAK6J,eAAe6D,MAAMhF,IAAAA,GAAAA;YAC3D;UAAA;AAjYWkB,cAAUtK,GAAA,CAqBlB,EAAA,GAAA,EAAAgR,cAAAA,CAAAA,GArBQ1G,CAAAA,GAAAvK,GAAAuK,aAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,gBAAAA,GAAAA,cAAAA,QCLFvK,GAAAkR,cAAc,kBAGdlR,GAAA4F,gBAAgB;QAAA,GAAA,MAAA,SAAA7F,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,kBAAA;ACL3B,gBAAA,IAAAH,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA;AAEA,cAAasR,IAAb,MAAA;YACE/Q,YACmCoK,IACC4G,IACAC,IAAAA;AAFD,mBAAA7G,iBAAAA,IACC,KAAA4G,kBAAAA,IACA,KAAAC,kBAAAA;YAEpC;YAEO7D,aAAad,IAAW4E,IAAAA;AAAAA,kBAAAA;AAC7B,oBAAMC,KAAO5Q,KAAK6J,eAAejG,OAAOC,MAAMgF,IAAIkD,KAAI,CAAA;AACtD,kBAAA,CAAK6E;AAEH,uBAAA,KADAD,GAAAA,MAASlB;AAIX,oBAAMoB,KAAkB,CAAA,GAClBC,KAAc9Q,KAAKyQ,gBAAgBM,WAAWD,aAC9C5K,KAAO,IAAI,EAAA8K,YACXC,IAAaL,GAAKM,iBAAAA;AACxB,kBAAIC,IAAAA,IACAC,IAAAA,IACAC,IAAAA;AACJ,uBAASvF,KAAI,GAAGA,KAAImF,GAAYnF;AAG9B,oBAAA,OAAIsF,KAAwBR,GAAKU,WAAWxF,EAAAA,GAA5C;AAKA,sBADA8E,GAAKW,SAASzF,IAAG5F,EAAAA,GACbA,GAAKsL,iBAAAA,KAAsBtL,GAAKuL,SAASC,OAAO;AAClD,wBAAA,OAAIN,GAAqB;AACvBA,0BAAetF,IACfqF,IAAgBjL,GAAKuL,SAASC;AAC9B;oBAAA;AAEAL,wBAAanL,GAAKuL,SAASC,UAAUP;kBAAAA;AAAAA,2BAGnCC,MACFC,IAAAA;AAIJ,sBAAIA,KAAAA,OAAeD,KAAuBtF,OAAMmF,IAAa,GAAI;AAC/D,0BAAMzK,KAAsD,UAA/CtH,KAAAc,KAAK0Q,gBAAgBiB,YAAYR,CAAAA,MAAAA,WAAcjS,KAAA,SAAAA,GAAE0S;AAC9D,wBAAIpL,IAAM;AAER,4BAAMgH,KAAsB,EAC1BxL,OAAO,EACL8J,GAAGsF,IAAe,GAClBrF,GAAAA,GAAAA,GAEF9J,KAAK,EAEH6J,GAAGA,MAAMuF,KAAcvF,OAAMmF,IAAa,IAAQ,IAAJ,IAC9ClF,GAAAA,GAAAA,EAAAA;AAIJ,0BAAI8F,KAAAA;AACJ,0BAAA,EAAKf,QAAAA,KAAAA,SAAAA,GAAagB;AAChB,4BAAA;AACE,gCAAMC,KAAS,IAAIC,IAAIxL,EAAAA;AAClB,2BAAC,SAAS,QAAA,EAAUyL,SAASF,GAAOG,QAAAA,MACvCL,KAAAA;wBAAa,SAERzS,IAAP;AAEAyS,0BAAAA,KAAAA;wBAAa;AAIZA,sBAAAA,MAEHhB,GAAOtM,KAAK,EACViC,MAAAA,IACAgH,OAAAA,IACAW,UAAU,CAAC/O,IAAGoH,OAAUsK,KAAcA,GAAY3C,SAAS/O,IAAGoH,IAAMgH,EAAAA,IAAS2E,EAAgB/S,GAAGoH,EAAAA,GAChG6I,OAAO,CAACjQ,IAAGoH,OAAAA;AAAQ,4BAAAlH;AAAC,+BAAkB,UAAlBA,KAAAwR,QAAAA,KAAAA,SAAAA,GAAazB,UAAAA,WAAK/P,KAAA,SAAAA,GAAA,KAAAqK,IAAGvK,IAAGoH,IAAMgH,EAAAA;sBAAM,GACxDoC,OAAO,CAACxQ,IAAGoH,OAAAA;AAAQ,4BAAAlH;AAAC,+BAAkB,UAAlBA,KAAAwR,QAAAA,KAAAA,SAAAA,GAAalB,UAAAA,WAAKtQ,KAAA,SAAAA,GAAA,KAAAqK,IAAGvK,IAAGoH,IAAMgH,EAAAA;sBAAM,EAAA,CAAA;oBAAA;AAI9D6D,wBAAAA,OAGInL,GAAKsL,iBAAAA,KAAsBtL,GAAKuL,SAASC,SAC3CN,IAAetF,IACfqF,IAAgBjL,GAAKuL,SAASC,UAE9BN,IAAAA,IACAD,IAAAA;kBAAiB;gBAAA;AAMvBR,cAAAA,GAASE,EAAAA;YACX;UAAA;AAGF,mBAASsB,EAAgB/S,IAAewS,IAAAA;AAEtC,gBADeQ,QAAQ,8BAA8BR;;kDAAAA,GACzC;AACV,oBAAMS,KAAYnP,OAAOoP,KAAAA;AACzB,kBAAID,IAAW;AACb,oBAAA;AACEA,kBAAAA,GAAUE,SAAS;gBAAA,SACnBnT,IAAA;gBAAA;AAGFiT,gBAAAA,GAAUG,SAASC,OAAOb;cAAAA;AAE1Bc,wBAAQC,KAAK,qDAAA;YAAA;UAGnB;AArHanC,cAAelR,GAAA,CAEvB,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAAsC,eAAAA,GACA,EAAA,GAAA,EAAAC,eAAAA,CAAAA,GAJQrC,CAAAA,GAAAnR,GAAAmR,kBAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,kBAAAA,QCCbnR,GAAA,kBAAA,MAAA;YAOEI,YACUqT,IACAC,IAAAA;AADA,mBAAAD,gBAAAA,IACA,KAAAC,kBAAAA,IAJF,KAAAC,oBAA4C,CAAA;YAMpD;YAEOxJ,UAAAA;AACDxJ,mBAAKiT,oBACPjT,KAAK8S,cAAcI,qBAAqBlT,KAAKiT,eAAAA,GAC7CjT,KAAKiT,kBAAAA;YAET;YAEOE,mBAAmBxC,IAAAA;AAKxB,qBAJA3Q,KAAKgT,kBAAkBzO,KAAKoM,EAAAA,GACvB3Q,KAAKiT,oBACRjT,KAAKiT,kBAAkBjT,KAAK8S,cAAcM,sBAAsB,MAAMpT,KAAKqT,cAAAA,CAAAA,IAEtErT,KAAKiT;YACd;YAEO1N,QAAQ+N,IAA8BC,IAA4BC,IAAAA;AACvExT,mBAAKyT,YAAYD,IAEjBF,KAAAA,WAAWA,KAAyBA,KAAW,GAC/CC,KAAAA,WAASA,KAAuBA,KAASvT,KAAKyT,YAAY,GAE1DzT,KAAK0T,YAAAA,WAAY1T,KAAK0T,YAA0BC,KAAKC,IAAI5T,KAAK0T,WAAWJ,EAAAA,IAAYA,IACrFtT,KAAK6T,UAAAA,WAAU7T,KAAK6T,UAAwBF,KAAKG,IAAI9T,KAAK6T,SAASN,EAAAA,IAAUA,IAEzEvT,KAAKiT,oBAITjT,KAAKiT,kBAAkBjT,KAAK8S,cAAcM,sBAAsB,MAAMpT,KAAKqT,cAAAA,CAAAA;YAC7E;YAEQA,gBAAAA;AAIN,kBAHArT,KAAKiT,kBAAAA,QAAkBxD,WAGnBzP,KAAK0T,aAAAA,WAA2B1T,KAAK6T,WAAAA,WAAyB7T,KAAKyT;AAErE,uBAAA,KADAzT,KAAK+T,qBAAAA;AAKP,oBAAM/R,KAAQ2R,KAAKG,IAAI9T,KAAK0T,WAAW,CAAA,GACjCzR,KAAM0R,KAAKC,IAAI5T,KAAK6T,SAAS7T,KAAKyT,YAAY,CAAA;AAGpDzT,mBAAK0T,YAAAA,QACL1T,KAAK6T,UAAAA,QAGL7T,KAAK+S,gBAAgB/Q,IAAOC,EAAAA,GAC5BjC,KAAK+T,qBAAAA;YACP;YAEQA,uBAAAA;AACN,yBAAWpD,MAAY3Q,KAAKgT;AAC1BrC,gBAAAA,GAAS,CAAA;AAEX3Q,mBAAKgT,oBAAoB,CAAA;YAC3B;UAAA;QAAA,GAAA,MAAA,CAAA5T,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,mBAAA;AC5EF,gBAAAC,KAAAJ,GAAA,GAAA;AAcA,gBAAa+D,UAAyB3D,GAAAE,WAAAA;YAMpCC,YAAoBqT,IAAAA;AAClBlT,oBAAAA,GADkB,KAAAkT,gBAAAA,IAElB9S,KAAKgU,2BAA2BhU,KAAK8S,cAAcmB,kBACnDjU,KAAK4B,UAAS,GAAAtC,GAAA+D,cAAa,MAAA;AACzBrD,qBAAKkU,cAAAA;cAAe,CAAA,CAAA;YAExB;YAEO/Q,YAAYgR,IAAAA;AACbnU,mBAAKoU,aACPpU,KAAKkU,cAAAA,GAEPlU,KAAKoU,YAAYD,IACjBnU,KAAKqU,iBAAiB,MAAA;AACfrU,qBAAKoU,cAGVpU,KAAKoU,UAAUpU,KAAK8S,cAAcmB,kBAAkBjU,KAAKgU,wBAAAA,GACzDhU,KAAKsU,WAAAA;cAAY,GAEnBtU,KAAKsU,WAAAA;YACP;YAEQA,aAAAA;AAAAA,kBAAAA;AACDtU,mBAAKqU,mBAKoB,UAA9BjV,KAAAY,KAAKuU,8BAAAA,WAAyBnV,MAAAA,GAAEoV,eAAexU,KAAKqU,cAAAA,GAGpDrU,KAAKgU,2BAA2BhU,KAAK8S,cAAcmB,kBACnDjU,KAAKuU,4BAA4BvU,KAAK8S,cAAc2B,WAAW,2BAA2BzU,KAAK8S,cAAcmB,uBAAAA,GAC7GjU,KAAKuU,0BAA0BG,YAAY1U,KAAKqU,cAAAA;YAClD;YAEOH,gBAAAA;AACAlU,mBAAKuU,6BAA8BvU,KAAKoU,aAAcpU,KAAKqU,mBAGhErU,KAAKuU,0BAA0BC,eAAexU,KAAKqU,cAAAA,GACnDrU,KAAKuU,4BAAAA,QACLvU,KAAKoU,YAAAA,QACLpU,KAAKqU,iBAAAA;YACP;UAAA;AAnDF,UAAAhV,GAAA,mBAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,WAAA;ACMA,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAGMgB,IAAwC,eAAA,OAAXgD,SAA0BA,OAAOhD,WAAW;AAE/E,gBAAayU,UAAiB,EAAAC,aAAAA;YAiG5BnV,YACE6J,KAAqC,CAAC,GAAA;AAEtC1J,oBAAM0J,EAAAA,GArFD,KAAAuL,UAAoBC,GAmBnB,KAAAC,kBAAAA,OAMA,KAAAC,eAAAA,OAOA,KAAAC,mBAAAA,OAOA,KAAAC,sBAAAA,OAOS,KAAAC,gBAAgBnV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACnC,KAAAiL,eAAepV,KAAKmV,cAAc9K,OACjC,KAAAgL,SAASrV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC5B,KAAAzH,QAAQ1C,KAAKqV,OAAOhL,OACnB,KAAAiL,YAAYtV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAApI,WAAW/B,KAAKsV,UAAUjL,OACzB,KAAAkL,qBAAqBvV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACxC,KAAAqL,oBAAoBxV,KAAKuV,mBAAmBlL,OAC3C,KAAAoL,iBAAiBzV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACpC,KAAAuL,gBAAgB1V,KAAKyV,eAAepL,OACnC,KAAAsL,UAAU3V,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC7B,KAAAyL,SAAS5V,KAAK2V,QAAQtL,OAE9B,KAAAwL,WAAW7V,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAE7B,KAAA2L,UAAU9V,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAE5B,KAAA4L,qBAAqB/V,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAEvC,KAAA6L,oBAAoBhW,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAEtC,KAAA8L,cAAcjW,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAoBtCnK,KAAKkW,OAAAA,GAELlW,KAAKmW,aAAanW,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAAzM,UAAAA,CAAAA,GAC1E5J,KAAKmW,WAAWvL,qBAAqB5K,KAAKoW,sBAAsBC,eAAe,EAAA7F,eAAAA,CAAAA,GAC/ExQ,KAAKsW,qBAAqBtW,KAAKoW,sBAAsBC,eAAe,EAAAE,iBAAAA,GACpEvW,KAAKoW,sBAAsBI,WAAW,EAAAC,oBAAoBzW,KAAKsW,kBAAAA,GAG/DtW,KAAK4B,SAAS5B,KAAK0W,cAAcC,cAAc,MAAM3W,KAAK2V,QAAQjG,KAAAA,CAAAA,CAAAA,GAClE1P,KAAK4B,SAAS5B,KAAK0W,cAAcE,qBAAqB,CAAC5U,IAAOC,OAAQjC,KAAKuF,QAAQvD,IAAOC,EAAAA,CAAAA,CAAAA,GAC1FjC,KAAK4B,SAAS5B,KAAK0W,cAAcG,mBAAmB,MAAM7W,KAAK8W,aAAAA,CAAAA,CAAAA,GAC/D9W,KAAK4B,SAAS5B,KAAK0W,cAAcK,eAAe,MAAM/W,KAAKgX,MAAAA,CAAAA,CAAAA,GAC3DhX,KAAK4B,SAAS5B,KAAK0W,cAAcO,8BAA8B7N,CAAAA,OAAQpJ,KAAKkX,sBAAsB9N,EAAAA,CAAAA,CAAAA,GAClGpJ,KAAK4B,SAAS5B,KAAK0W,cAAcS,QAAS9M,CAAAA,OAAUrK,KAAKoX,kBAAkB/M,EAAAA,CAAAA,CAAAA,GAC3ErK,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK0W,cAActB,cAAcpV,KAAKmV,aAAAA,CAAAA,GACjEnV,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK0W,cAAchB,eAAe1V,KAAKyV,cAAAA,CAAAA,GAClEzV,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK0W,cAAcvU,YAAYnC,KAAK+V,kBAAAA,CAAAA,GAC/D/V,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK0W,cAAcnU,WAAWvC,KAAKgW,iBAAAA,CAAAA,GAG9DhW,KAAK4B,SAAS5B,KAAK6J,eAAehI,SAASzC,CAAAA,OAAKY,KAAKsX,aAAalY,GAAEsO,MAAMtO,GAAEsB,IAAAA,CAAAA,CAAAA,GAE5EV,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AAAA,oBAAAjE,IAAAC;AACzBW,qBAAKuX,yBAAAA,QACmB,UAAxBlY,KAAY,UAAZD,KAAAY,KAAKyB,YAAAA,WAAOrC,KAAA,SAAAA,GAAE+F,eAAAA,WAAU9F,MAAAA,GAAE6E,YAAYlE,KAAKyB,OAAAA;cAAQ,CAAA,CAAA;YAEvD;YArDW+V,IAAAA,UAAAA;AAA0B,qBAAOxX,KAAK6V,SAASxL;YAAO;YAEtDxH,IAAAA,SAAAA;AAAyB,qBAAO7C,KAAK8V,QAAQzL;YAAO;YAEpDlI,IAAAA,aAAAA;AAA+B,qBAAOnC,KAAK+V,mBAAmB1L;YAAO;YAErE9H,IAAAA,YAAAA;AAA8B,qBAAOvC,KAAKgW,kBAAkB3L;YAAO;YAEnEoN,IAAAA,aAAAA;AAAoC,qBAAOzX,KAAKiW,YAAY5L;YAAO;YAqDtE+M,kBAAkB/M,IAAAA;AACxB,kBAAKrK,KAAK0X;AACV,2BAAWC,MAAOtN,IAAO;AACvB,sBAAIuN,IACAC,KAAQ;AACZ,0BAAQF,GAAI/J,OAAAA;oBACV,KAAK;AACHgK,sBAAAA,KAAM,cACNC,KAAQ;AACR;oBACF,KAAK;AACHD,sBAAAA,KAAM,cACNC,KAAQ;AACR;oBACF,KAAK;AACHD,sBAAAA,KAAM,UACNC,KAAQ;AACR;oBACF;AAEED,sBAAAA,KAAM,QACNC,KAAQ,OAAOF,GAAI/J;kBAAAA;AAEvB,0BAAQ+J,GAAIvO,MAAAA;oBACV,KAAK;AACH,4BAAM0O,KAAW,EAAAC,MAAMC,WAAmB,WAARJ,KAC9B5X,KAAK0X,cAAcO,OAAOC,KAAKP,GAAI/J,KAAAA,IACnC5N,KAAK0X,cAAcO,OAAOL,EAAAA,CAAAA;AAC9B5X,2BAAK8G,YAAYE,iBAAiB,GAAG,EAAAmR,GAAGC,OAAOP,OAAS,GAAA,EAAAQ,aAAYP,EAAAA,IAAY,EAAAQ,WAAWC,IAAAA;AAC3F;oBACF,KAAK;AACH,0BAAY,WAARX;AACF5X,6BAAK0X,cAAcc,aAAaP,CAAAA,OAAUA,GAAOC,KAAKP,GAAI/J,KAAAA,IAAS,EAAA6K,KAAKC,QAAAA,GAAWf,GAAII,KAAAA,CAAAA;2BAClF;AACL,8BAAMY,KAAcf;AACpB5X,6BAAK0X,cAAcc,aAAaP,CAAAA,OAAUA,GAAOU,EAAAA,IAAe,EAAAF,KAAKC,QAAAA,GAAWf,GAAII,KAAAA,CAAAA;sBAAAA;AAEtF;oBACF,KAAK;AACH/X,2BAAK0X,cAAckB,aAAajB,GAAI/J,KAAAA;kBAAAA;gBAAAA;YAI5C;YAEUsI,SAAAA;AACRtW,oBAAMsW,OAAAA,GAENlW,KAAKuX,yBAAAA;YACP;YAKW3T,IAAAA,SAAAA;AACT,qBAAO5D,KAAK6Y,QAAQC;YACtB;YAKOrU,QAAAA;AACDzE,mBAAK6G,YACP7G,KAAK6G,SAASpC,MAAM,EAAEsU,eAAAA,KAAe,CAAA;YAEzC;YAEQC,oCAAoC/R,IAAAA;AAAAA,kBAAAA;AACtCA,cAAAA,KAAAA,CACGjH,KAAKiZ,yBAAyBjZ,KAAKL,mBACtCK,KAAKiZ,wBAAwB,IAAI,EAAA1Z,qBAAqBS,MAAMA,KAAKL,cAAAA,MAGzC,UAA1BN,KAAAW,KAAKiZ,0BAAAA,WAAqB5Z,MAAAA,GAAEmK,QAAAA,GAC5BxJ,KAAKiZ,wBAAAA;YAET;YAKQC,qBAAqB/R,IAAAA;AACvBnH,mBAAK8G,YAAYC,gBAAgBoS,aACnCnZ,KAAK8G,YAAYE,iBAAiB,EAAAmR,GAAGC,MAAM,IAAA,GAE7CpY,KAAKoZ,kBAAkBjS,EAAAA,GACvBnH,KAAKyB,QAASrB,UAAUC,IAAI,OAAA,GAC5BL,KAAKqZ,YAAAA,GACLrZ,KAAK6V,SAASnG,KAAAA;YAChB;YAMO4J,OAAAA;AAAAA,kBAAAA;AACL,qBAAoB,UAAbla,KAAAY,KAAK6G,aAAAA,WAAQzH,KAAA,SAAAA,GAAEka,KAAAA;YACxB;YAKQC,sBAAAA;AAGNvZ,mBAAK6G,SAAUI,QAAQ,IACvBjH,KAAKuF,QAAQvF,KAAK4D,OAAOmI,GAAG/L,KAAK4D,OAAOmI,CAAAA,GACpC/L,KAAK8G,YAAYC,gBAAgBoS,aACnCnZ,KAAK8G,YAAYE,iBAAiB,EAAAmR,GAAGC,MAAM,IAAA,GAE7CpY,KAAKyB,QAASrB,UAAUuP,OAAO,OAAA,GAC/B3P,KAAK8V,QAAQpG,KAAAA;YACf;YAEQ8J,gBAAAA;AACN,kBAAA,CAAKxZ,KAAK6G,YAAAA,CAAa7G,KAAK4D,OAAO6V,sBAAsBzZ,KAAK0Z,mBAAoBC,eAAAA,CAAgB3Z,KAAKL;AACrG;AAEF,oBAAMia,KAAU5Z,KAAK4D,OAAOiW,QAAQ7Z,KAAK4D,OAAOmI,GAC1C+N,KAAa9Z,KAAK4D,OAAOC,MAAMgF,IAAI+Q,EAAAA;AACzC,kBAAA,CAAKE;AACH;AAEF,oBAAMC,KAAUpG,KAAKC,IAAI5T,KAAK4D,OAAOkI,GAAG9L,KAAK0N,OAAO,CAAA,GAC9CsM,KAAaha,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,QACrDE,KAAQyT,GAAWG,SAASF,EAAAA,GAC5BG,KAAYla,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG,QAAQA,IAC5D8T,KAAYna,KAAK4D,OAAOmI,IAAI/L,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,QACpEiU,KAAaL,KAAU/Z,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG;AAIrErG,mBAAK6G,SAAST,MAAMmB,OAAO6S,KAAa,MACxCpa,KAAK6G,SAAST,MAAMqB,MAAM0S,KAAY,MACtCna,KAAK6G,SAAST,MAAMC,QAAQ6T,KAAY,MACxCla,KAAK6G,SAAST,MAAMD,SAAS6T,KAAa,MAC1Cha,KAAK6G,SAAST,MAAMiU,aAAaL,KAAa,MAC9Cha,KAAK6G,SAAST,MAAMuB,SAAS;YAC/B;YAKQ2S,cAAAA;AACNta,mBAAKua,UAAAA,GAGLva,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKyB,SAAU,QAAS4I,CAAAA,OAAAA;AAGxDrK,qBAAKwa,aAAAA,MAGV,GAAA,EAAAC,aAAYpQ,IAAOrK,KAAK0a,iBAAAA;cAAmB,CAAA,CAAA;AAE7C,oBAAMC,KAAuBtQ,CAAAA,QAAgC,GAAA,EAAAuQ,kBAAiBvQ,IAAOrK,KAAK6G,UAAW7G,KAAK8G,WAAAA;AAC1G9G,mBAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,SAAS8T,EAAAA,CAAAA,GAChE3a,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKyB,SAAU,SAASkZ,EAAAA,CAAAA,GAG3D7F,EAAQ+F,YAEV7a,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKyB,SAAU,aAAc4I,CAAAA,OAAAA;AAC7C,sBAAjBA,GAAMyQ,WACR,GAAA,EAAAC,mBAAkB1Q,IAAOrK,KAAK6G,UAAW7G,KAAKoH,eAAgBpH,KAAK0a,mBAAoB1a,KAAKsJ,QAAQ0R,qBAAAA;cAAAA,CAAAA,CAAAA,IAIxGhb,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKyB,SAAU,eAAgB4I,CAAAA,OAAAA;AAAAA,iBACpE,GAAA,EAAA0Q,mBAAkB1Q,IAAOrK,KAAK6G,UAAW7G,KAAKoH,eAAgBpH,KAAK0a,mBAAoB1a,KAAKsJ,QAAQ0R,qBAAAA;cAAsB,CAAA,CAAA,GAO1HlG,EAAQmG,WAGVjb,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKyB,SAAU,YAAa4I,CAAAA,OAAAA;AAC5C,sBAAjBA,GAAMyQ,WACR,GAAA,EAAA5T,8BAA6BmD,IAAOrK,KAAK6G,UAAW7G,KAAKoH,aAAAA;cAAAA,CAAAA,CAAAA;YAIjE;YAKQmT,YAAAA;AACNva,mBAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,SAAUM,CAAAA,OAAsBnH,KAAKkb,OAAO/T,EAAAA,GAAAA,IAAK,CAAA,GACxGnH,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,WAAYM,CAAAA,OAAsBnH,KAAKmb,SAAShU,EAAAA,GAAAA,IAAK,CAAA,GAC5GnH,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,YAAaM,CAAAA,OAAsBnH,KAAKob,UAAUjU,EAAAA,GAAAA,IAAK,CAAA,GAC9GnH,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,oBAAoB,MAAM7G,KAAK0Z,mBAAoB2B,iBAAAA,CAAAA,CAAAA,GAC1Grb,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,qBAAsBzH,CAAAA,OAAwBY,KAAK0Z,mBAAoB4B,kBAAkBlc,EAAAA,CAAAA,CAAAA,GAChJY,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,kBAAkB,MAAM7G,KAAK0Z,mBAAoB6B,eAAAA,CAAAA,CAAAA,GACxGvb,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAW,SAAUM,CAAAA,OAAmBnH,KAAKwb,YAAYrU,EAAAA,GAAAA,IAAK,CAAA,GAC1GnH,KAAK4B,SAAS5B,KAAK+B,SAAS,MAAM/B,KAAK0Z,mBAAoB+B,0BAAAA,CAAAA,CAAAA;YAC7D;YAOOnJ,KAAKoJ,IAAAA;AAAAA,kBAAAA;AACV,kBAAA,CAAKA;AACH,sBAAM,IAAIha,MAAM,qCAAA;AAGbga,cAAAA,GAAOC,eACV3b,KAAK4b,YAAYC,MAAM,yEAAA,GAGzB7b,KAAK8b,YAAYJ,GAAOK,eAGxB/b,KAAKyB,UAAUzB,KAAK8b,UAAU3b,cAAc,KAAA,GAC5CH,KAAKyB,QAAQua,MAAM,OACnBhc,KAAKyB,QAAQrB,UAAUC,IAAI,UAAA,GAC3BL,KAAKyB,QAAQrB,UAAUC,IAAI,OAAA,GAC3BL,KAAKyB,QAAQjB,aAAa,YAAY,GAAA,GACtCkb,GAAO9a,YAAYZ,KAAKyB,OAAAA;AAIxB,oBAAMwa,KAAW/b,EAASgc,uBAAAA;AAC1Blc,mBAAKmc,mBAAmBjc,EAASC,cAAc,KAAA,GAC/CH,KAAKmc,iBAAiB/b,UAAUC,IAAI,gBAAA,GACpC4b,GAASrb,YAAYZ,KAAKmc,gBAAAA,GAE1Bnc,KAAKoc,sBAAsBlc,EAASC,cAAc,KAAA,GAClDH,KAAKoc,oBAAoBhc,UAAUC,IAAI,mBAAA,GACvCL,KAAKmc,iBAAiBvb,YAAYZ,KAAKoc,mBAAAA,GAEvCpc,KAAKoH,gBAAgBlH,EAASC,cAAc,KAAA,GAC5CH,KAAKoH,cAAchH,UAAUC,IAAI,cAAA,GAGjCL,KAAKqc,mBAAmBnc,EAASC,cAAc,KAAA,GAC/CH,KAAKqc,iBAAiBjc,UAAUC,IAAI,eAAA,GACpCL,KAAKoH,cAAcxG,YAAYZ,KAAKqc,gBAAAA,GACpCJ,GAASrb,YAAYZ,KAAKoH,aAAAA,GAE1BpH,KAAK6G,WAAW3G,EAASC,cAAc,UAAA,GACvCH,KAAK6G,SAASzG,UAAUC,IAAI,uBAAA,GAC5BL,KAAK6G,SAASrG,aAAa,cAAcwE,EAAQuL,WAAAA,GAC5CuE,EAAQwH,cAGXtc,KAAK6G,SAASrG,aAAa,kBAAkB,OAAA,GAE/CR,KAAK6G,SAASrG,aAAa,eAAe,KAAA,GAC1CR,KAAK6G,SAASrG,aAAa,kBAAkB,KAAA,GAC7CR,KAAK6G,SAASrG,aAAa,cAAc,OAAA,GACzCR,KAAK6G,SAASvG,WAAW,GAIzBN,KAAKuc,sBAAsBvc,KAAKoW,sBAAsBC,eAAe,EAAAmG,oBAAoBxc,KAAK6G,UAAoC,UAA1BxH,KAAAW,KAAK8b,UAAUW,gBAAAA,WAAWpd,KAAAA,KAAI6D,MAAAA,GACtIlD,KAAKoW,sBAAsBI,WAAW,EAAAkG,qBAAqB1c,KAAKuc,mBAAAA,GAEhEvc,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAU,SAAUM,CAAAA,OAAsBnH,KAAKkZ,qBAAqB/R,EAAAA,CAAAA,CAAAA,GAChHnH,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAK6G,UAAU,QAAQ,MAAM7G,KAAKuZ,oBAAAA,CAAAA,CAAAA,GACzEvZ,KAAKqc,iBAAiBzb,YAAYZ,KAAK6G,QAAAA,GAGvC7G,KAAK2c,mBAAmB3c,KAAKoW,sBAAsBC,eAAe,EAAAuG,iBAAiB5c,KAAK8b,WAAW9b,KAAKqc,gBAAAA,GACxGrc,KAAKoW,sBAAsBI,WAAW,EAAAqG,kBAAkB7c,KAAK2c,gBAAAA,GAE7D3c,KAAK0X,gBAAgB1X,KAAKoW,sBAAsBC,eAAe,EAAAyG,YAAAA,GAC/D9c,KAAKoW,sBAAsBI,WAAW,EAAAuG,eAAe/c,KAAK0X,aAAAA,GAE1D1X,KAAKgd,0BAA0Bhd,KAAKoW,sBAAsBC,eAAe,EAAA4G,sBAAAA,GACzEjd,KAAKoW,sBAAsBI,WAAW,EAAA0G,yBAAyBld,KAAKgd,uBAAAA,GAEpEhd,KAAKL,iBAAiBK,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAA8G,eAAend,KAAKU,MAAMV,KAAKoH,aAAAA,CAAAA,GAC7GpH,KAAKoW,sBAAsBI,WAAW,EAAA4G,gBAAgBpd,KAAKL,cAAAA,GAC3DK,KAAK4B,SAAS5B,KAAKL,eAAewP,yBAAyB/P,CAAAA,OAAKY,KAAKsV,UAAU5F,KAAKtQ,EAAAA,CAAAA,CAAAA,GACpFY,KAAK6B,SAASzC,CAAAA,OAAKY,KAAKL,eAAgB0d,OAAOje,GAAEsO,MAAMtO,GAAEsB,IAAAA,CAAAA,GAEzDV,KAAKsd,mBAAmBpd,EAASC,cAAc,KAAA,GAC/CH,KAAKsd,iBAAiBld,UAAUC,IAAI,kBAAA,GACpCL,KAAK0Z,qBAAqB1Z,KAAKoW,sBAAsBC,eAAe/W,GAAAie,mBAAmBvd,KAAK6G,UAAU7G,KAAKsd,gBAAAA,GAC3Gtd,KAAKqc,iBAAiBzb,YAAYZ,KAAKsd,gBAAAA,GAGvCtd,KAAKyB,QAAQb,YAAYqb,EAAAA;AAEzB,kBAAA;AACEjc,qBAAKiW,YAAYvG,KAAK1P,KAAKyB,OAAAA;cAErB,SAARrC,IAAA;cAAQ;AACHY,mBAAKL,eAAe6d,YAAAA,KACvBxd,KAAKL,eAAe8d,YAAYzd,KAAK0d,gBAAAA,CAAAA,GAGvC1d,KAAKqL,gBAAgBrL,KAAKoW,sBAAsBC,eAAe,EAAAsH,YAAAA,GAC/D3d,KAAKoW,sBAAsBI,WAAW,EAAAoH,eAAe5d,KAAKqL,aAAAA,GAE1DrL,KAAK6d,WAAW7d,KAAKoW,sBAAsBC,eAAe,EAAAyH,UACvDC,CAAAA,OAAmB/d,KAAKwE,YAAYuZ,IAAAA,MAAc,CAAA,GACnD/d,KAAKmc,kBACLnc,KAAKoc,mBAAAA,GAEPpc,KAAK4B,SAAS5B,KAAK0W,cAAcsH,uBAAuB,MAAMhe,KAAK6d,SAAUI,eAAAA,CAAAA,CAAAA,GAC7Eje,KAAK4B,SAAS5B,KAAK6d,QAAAA,GAEnB7d,KAAK4B,SAAS5B,KAAKoV,aAAa,MAAA;AAC9BpV,qBAAKL,eAAgBue,iBAAAA,GACrBle,KAAKwZ,cAAAA;cAAe,CAAA,CAAA,GAEtBxZ,KAAK4B,SAAS5B,KAAK6B,SAAS,MAAM7B,KAAKL,eAAgBwe,aAAane,KAAK0N,MAAM1N,KAAKU,IAAAA,CAAAA,CAAAA,GACpFV,KAAK4B,SAAS5B,KAAK6C,OAAO,MAAM7C,KAAKL,eAAgBye,WAAAA,CAAAA,CAAAA,GACrDpe,KAAK4B,SAAS5B,KAAKwX,QAAQ,MAAMxX,KAAKL,eAAgB0e,YAAAA,CAAAA,CAAAA,GACtDre,KAAK4B,SAAS5B,KAAKL,eAAeoD,mBAAmB,MAAM/C,KAAK6d,SAAUI,eAAAA,CAAAA,CAAAA,GAE1Eje,KAAK0a,oBAAoB1a,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAAiI,kBAC/Ete,KAAKyB,SACLzB,KAAKoH,eACLpH,KAAKmW,UAAAA,CAAAA,GAEPnW,KAAKoW,sBAAsBI,WAAW,EAAA+H,mBAAmBve,KAAK0a,iBAAAA,GAC9D1a,KAAK4B,SAAS5B,KAAK0a,kBAAkB8D,qBAAqBpf,CAAAA,OAAKY,KAAKwE,YAAYpF,GAAE2e,QAAQ3e,GAAEqf,mBAAAA,CAAAA,CAAAA,GAC5Fze,KAAK4B,SAAS5B,KAAK0a,kBAAkBlF,kBAAkB,MAAMxV,KAAKuV,mBAAmB7F,KAAAA,CAAAA,CAAAA,GACrF1P,KAAK4B,SAAS5B,KAAK0a,kBAAkBgE,gBAAgBtf,CAAAA,OAAKY,KAAKL,eAAgBgf,uBAAuBvf,GAAE4C,OAAO5C,GAAE6C,KAAK7C,GAAEwf,gBAAAA,CAAAA,CAAAA,GACxH5e,KAAK4B,SAAS5B,KAAK0a,kBAAkBmE,sBAAsBrY,CAAAA,OAAAA;AAIzDxG,qBAAK6G,SAAUI,QAAQT,IACvBxG,KAAK6G,SAAUpC,MAAAA,GACfzE,KAAK6G,SAAUuB,OAAAA;cAAQ,CAAA,CAAA,GAEzBpI,KAAK4B,SAAS5B,KAAK8e,UAAUzU,MAAMlD,CAAAA,OAAAA;AACjCnH,qBAAK6d,SAAUI,eAAAA,GACfje,KAAK0a,kBAAmBnV,QAAAA;cAAS,CAAA,CAAA,GAEnCvF,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKmc,kBAAkB,UAAU,MAAMnc,KAAK0a,kBAAmBnV,QAAAA,CAAAA,CAAAA,GAEtGvF,KAAKmW,WAAWlL,YAAYjL,KAAKoH,eAAepH,KAAKqL,eAAerL,KAAKL,cAAAA,GACzEK,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAA0I,0BAA0B/e,KAAKoH,aAAAA,CAAAA,GACvFpH,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKyB,SAAS,aAAcrC,CAAAA,OAAkBY,KAAK0a,kBAAmBsE,gBAAgB5f,EAAAA,CAAAA,CAAAA,GAGzHY,KAAKif,iBAAiBC,wBACxBlf,KAAK0a,kBAAkByE,QAAAA,GACvBnf,KAAKyB,QAAQrB,UAAUC,IAAI,qBAAA,KAE3BL,KAAK0a,kBAAkB0E,OAAAA,GAGrBpf,KAAKsJ,QAAQ+V,qBAGfrf,KAAKiZ,wBAAwB,IAAI,EAAA1Z,qBAAqBS,MAAMA,KAAKL,cAAAA,IAEnEK,KAAK4B,SAAS5B,KAAKsf,eAAeC,uBAAuB,oBAAoBngB,CAAAA,OAAKY,KAAKgZ,oCAAoC5Z,EAAAA,CAAAA,CAAAA,GAEvHY,KAAKsJ,QAAQkW,uBACfxf,KAAKyf,yBAAyBzf,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAAqJ,uBAAuB1f,KAAKmc,kBAAkBnc,KAAKoH,aAAAA,CAAAA,IAE3IpH,KAAKsf,eAAeC,uBAAuB,sBAAsBtY,CAAAA,OAAAA;AAAAA,iBAC1DjH,KAAKyf,0BAA0BxY,MAASjH,KAAKmc,oBAAoBnc,KAAKoH,kBACzEpH,KAAKyf,yBAAyBzf,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAAqJ,uBAAuB1f,KAAKmc,kBAAkBnc,KAAKoH,aAAAA,CAAAA;cAAAA,CAAAA,GAI7IpH,KAAK2c,iBAAiBgD,QAAAA,GAGtB3f,KAAKuF,QAAQ,GAAGvF,KAAKU,OAAO,CAAA,GAG5BV,KAAKsa,YAAAA,GAILta,KAAK4f,UAAAA;YACP;YAEQlC,kBAAAA;AACN,qBAAO1d,KAAKoW,sBAAsBC,eAAe,EAAAwJ,aAAa7f,KAAKyB,SAAUzB,KAAKoH,eAAgBpH,KAAKmc,kBAAmBnc,KAAKmW,UAAAA;YACjI;YAiBOyJ,YAAAA;AACL,oBAAMzgB,KAAOa,MACP8f,KAAK9f,KAAKyB;AAGhB,uBAASse,GAAU5Y,IAAAA;AAEjB,sBAAME,KAAMlI,GAAKkM,cAAe2U,qBAAqB7Y,IAAIhI,GAAKiI,aAAAA;AAC9D,oBAAA,CAAKC;AACH,yBAAA;AAGF,oBAAI4Y,IACAC;AACJ,wBAAS/Y,GAAWgZ,gBAAgBhZ,GAAGiC,MAAAA;kBACrC,KAAK;AACH8W,oBAAAA,KAAS,IAAA,WACL/Y,GAAGiZ,WAELH,KAAM,GAAA,WACF9Y,GAAG2T,WACLmF,KAAM9Y,GAAG2T,SAAS,IAAI3T,GAAG2T,SAAS,MAIpCmF,KAAmB,IAAb9Y,GAAGiZ,UAAc,IACR,IAAbjZ,GAAGiZ,UAAc,IACF,IAAbjZ,GAAGiZ,UAAc,IAAA;AAGvB;kBACF,KAAK;AACHF,oBAAAA,KAAS,GACTD,KAAM9Y,GAAG2T,SAAS,IAAI3T,GAAG2T,SAAS;AAClC;kBACF,KAAK;AACHoF,oBAAAA,KAAS,GACTD,KAAM9Y,GAAG2T,SAAS,IAAI3T,GAAG2T,SAAS;AAClC;kBACF,KAAK;AAGH,wBAAe,MAFA3b,GAAK0e,SAAUwC,iBAAiBlZ,EAAAA;AAG7C,6BAAA;AAGF+Y,oBAAAA,KAAU/Y,GAAkBmZ,SAAS,IAAI,IAAqB,GAC9DL,KAAM;AACN;kBACF;AAEE,2BAAA;gBAAO;AAKX,uBAAA,EAAA,WAAIC,MAAAA,WAAwBD,MAAqBA,KAAM,MAIhD9gB,GAAK8f,iBAAiBsB,kBAAkB,EAC7CC,KAAKnZ,GAAImZ,KACTC,KAAKpZ,GAAIoZ,KACT3U,GAAGzE,GAAIyE,GACPC,GAAG1E,GAAI0E,GACP+O,QAAQmF,IACRC,QAAAA,IACAQ,MAAMvZ,GAAGwZ,SACTC,KAAKzZ,GAAG0Z,QACR1c,OAAOgD,GAAG2Z,SAAAA,CAAAA;cAEd;AAUA,oBAAMC,KAAmE,EACvEC,SAAS,MACTC,OAAO,MACPC,WAAW,MACXC,WAAW,KAAA,GAEPC,KAAiE,EACrEJ,SAAU7Z,CAAAA,QACR4Y,GAAU5Y,EAAAA,GACLA,GAAGiZ,YAENpgB,KAAK8b,UAAW1X,oBAAoB,WAAW2c,GAAgBC,OAAAA,GAC3DD,GAAgBG,aAClBlhB,KAAK8b,UAAW1X,oBAAoB,aAAa2c,GAAgBG,SAAAA,IAG9DlhB,KAAKqhB,OAAOla,EAAAA,IAErB8Z,OAAQ9Z,CAAAA,QACN4Y,GAAU5Y,EAAAA,GACHnH,KAAKqhB,OAAOla,IAAAA,IAAI,IAEzB+Z,WAAY/Z,CAAAA,OAAAA;AAENA,gBAAAA,GAAGiZ,WACLL,GAAU5Y,EAAAA;cAAAA,GAGdga,WAAYha,CAAAA,OAAAA;AAELA,gBAAAA,GAAGiZ,WACNL,GAAU5Y,EAAAA;cAAAA,EAAAA;AAIhBnH,mBAAK4B,SAAS5B,KAAKif,iBAAiBqC,iBAAiBC,CAAAA,OAAAA;AAE/CA,gBAAAA,MAC8C,YAA5CvhB,KAAKsf,eAAevO,WAAWyQ,YACjCxhB,KAAK4b,YAAYC,MAAM,4BAA4B7b,KAAKif,iBAAiBwC,cAAcF,EAAAA,CAAAA,GAEzFvhB,KAAKyB,QAASrB,UAAUC,IAAI,qBAAA,GAC5BL,KAAK0a,kBAAmByE,QAAAA,MAExBnf,KAAK4b,YAAYC,MAAM,8BAAA,GACvB7b,KAAKyB,QAASrB,UAAUuP,OAAO,qBAAA,GAC/B3P,KAAK0a,kBAAmB0E,OAAAA,IAKX,IAATmC,KAGMR,GAAgBI,cAC1BrB,GAAG9e,iBAAiB,aAAaogB,GAAeD,SAAAA,GAChDJ,GAAgBI,YAAYC,GAAeD,cAJ3CrB,GAAG1b,oBAAoB,aAAa2c,GAAgBI,SAAAA,GACpDJ,GAAgBI,YAAY,OAMf,KAATI,KAGMR,GAAgBE,UAC1BnB,GAAG9e,iBAAiB,SAASogB,GAAeH,OAAO,EAAES,SAAAA,MAAS,CAAA,GAC9DX,GAAgBE,QAAQG,GAAeH,UAJvCnB,GAAG1b,oBAAoB,SAAS2c,GAAgBE,KAAAA,GAChDF,GAAgBE,QAAQ,OAMX,IAATM,KAGMR,GAAgBC,YAC1BD,GAAgBC,UAAUI,GAAeJ,YAHzChhB,KAAK8b,UAAW1X,oBAAoB,WAAW2c,GAAgBC,OAAAA,GAC/DD,GAAgBC,UAAU,OAKb,IAATO,KAGMR,GAAgBG,cAC1BH,GAAgBG,YAAYE,GAAeF,cAH3ClhB,KAAK8b,UAAW1X,oBAAoB,aAAa2c,GAAgBG,SAAAA,GACjEH,GAAgBG,YAAY;cAAA,CAAA,CAAA,GAMhClhB,KAAKif,iBAAiB0C,iBAAiB3hB,KAAKif,iBAAiB0C,gBAK7D3hB,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyB0c,IAAI,aAAc3Y,CAAAA,OAAAA;AAOvD,oBANAA,GAAGzC,eAAAA,GACH1E,KAAKyE,MAAAA,GAKAzE,KAAKif,iBAAiBC,wBAAAA,CAAwBlf,KAAK0a,kBAAmBkH,qBAAqBza,EAAAA;AAiBhG,yBAbA4Y,GAAU5Y,EAAAA,GAMN4Z,GAAgBC,WAClBhhB,KAAK8b,UAAW9a,iBAAiB,WAAW+f,GAAgBC,OAAAA,GAE1DD,GAAgBG,aAClBlhB,KAAK8b,UAAW9a,iBAAiB,aAAa+f,GAAgBG,SAAAA,GAGzDlhB,KAAKqhB,OAAOla,EAAAA;cAAG,CAAA,CAAA,GAGxBnH,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyB0c,IAAI,SAAU3Y,CAAAA,OAAAA;AAEnD,oBAAA,CAAI4Z,GAAgBE,OAApB;AAEA,sBAAA,CAAKjhB,KAAK4D,OAAOie,eAAe;AAG9B,0BAAM9D,KAAS/d,KAAK6d,SAAUwC,iBAAiBlZ,EAAAA;AAG/C,wBAAe,MAAX4W;AACF;AAIF,0BAAM+D,KAAW,EAAA3J,GAAGC,OAAOpY,KAAK8G,YAAYC,gBAAgBgb,wBAAwB,MAAM,QAAQ5a,GAAGmZ,SAAS,IAAI,MAAM;AACxH,wBAAI0B,KAAO;AACX,6BAAS9iB,KAAI,GAAGA,KAAIyU,KAAKsO,IAAIlE,EAAAA,GAAS7e;AACpC8iB,sBAAAA,MAAQF;AAGV,2BADA9hB,KAAK8G,YAAYE,iBAAiBgb,IAAAA,IAAM,GACjChiB,KAAKqhB,OAAOla,IAAAA,IAAI;kBAAA;AAKzB,yBAAInH,KAAK6d,SAAUqE,YAAY/a,EAAAA,IACtBnH,KAAKqhB,OAAOla,EAAAA,IAAAA;gBAzBY;cAAA,GA2BhC,EAAEua,SAAAA,MAAS,CAAA,CAAA,GAEd1hB,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyB0c,IAAI,cAAe3Y,CAAAA,OAAAA;AACxD,oBAAA,CAAInH,KAAKif,iBAAiBC;AAE1B,yBADAlf,KAAK6d,SAAUsE,iBAAiBhb,EAAAA,GACzBnH,KAAKqhB,OAAOla,EAAAA;cAAG,GACrB,EAAEua,SAAAA,KAAS,CAAA,CAAA,GAEd1hB,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyB0c,IAAI,aAAc3Y,CAAAA,OAAAA;AACvD,oBAAA,CAAInH,KAAKif,iBAAiBC;AAC1B,yBAAKlf,KAAK6d,SAAUuE,gBAAgBjb,EAAAA,IAAAA,SAC3BnH,KAAKqhB,OAAOla,EAAAA;cAAAA,GAEpB,EAAEua,SAAAA,MAAS,CAAA,CAAA;YAChB;YASOnc,QAAQvD,IAAeC,IAAAA;AAAAA,kBAAAA;AACT,wBAAnB/C,KAAAc,KAAKL,mBAAAA,WAAcT,MAAAA,GAAEmjB,YAAYrgB,IAAOC,EAAAA;YAC1C;YAKOmX,kBAAkBjS,IAAAA;AAAAA,kBAAAA;AAAAA,eACG,UAAtB9H,KAAAW,KAAK0a,sBAAAA,WAAiBrb,KAAA,SAAAA,GAAEijB,mBAAmBnb,EAAAA,KAC7CnH,KAAKyB,QAASrB,UAAUC,IAAI,eAAA,IAE5BL,KAAKyB,QAASrB,UAAUuP,OAAO,eAAA;YAEnC;YAKQ0J,cAAAA;AACDrZ,mBAAK8G,YAAYyb,wBACpBviB,KAAK8G,YAAYyb,sBAAAA,MACjBviB,KAAKuF,QAAQvF,KAAK4D,OAAOmI,GAAG/L,KAAK4D,OAAOmI,CAAAA;YAE5C;YAEOvH,YAAYge,IAAc/D,IAA+BgE,KAAS,GAAA;AACvE7iB,oBAAM4E,YAAYge,IAAM/D,IAAqBgE,EAAAA,GAC7CziB,KAAKuF,QAAQ,GAAGvF,KAAKU,OAAO,CAAA;YAC9B;YAEOkG,MAAMob,IAAAA;AAAAA,eACX,GAAA,EAAApb,OAAMob,IAAMhiB,KAAK6G,UAAW7G,KAAK8G,WAAAA;YACnC;YAWO4b,4BAA4BC,IAAAA;AACjC3iB,mBAAKuX,yBAAyBoL;YAChC;YAEO/X,qBAAqBC,IAAAA;AAC1B,qBAAO7K,KAAKmW,WAAWvL,qBAAqBC,EAAAA;YAC9C;YAEO+X,wBAAwBvZ,IAAAA;AAC7B,kBAAA,CAAKrJ,KAAKgd;AACR,sBAAM,IAAItb,MAAM,+BAAA;AAElB,oBAAMmhB,KAAW7iB,KAAKgd,wBAAwBpb,SAASyH,EAAAA;AAEvD,qBADArJ,KAAKuF,QAAQ,GAAGvF,KAAKU,OAAO,CAAA,GACrBmiB;YACT;YAEOC,0BAA0BD,IAAAA;AAC/B,kBAAA,CAAK7iB,KAAKgd;AACR,sBAAM,IAAItb,MAAM,+BAAA;AAEd1B,mBAAKgd,wBAAwB+F,WAAWF,EAAAA,KAC1C7iB,KAAKuF,QAAQ,GAAGvF,KAAKU,OAAO,CAAA;YAEhC;YAEWsiB,IAAAA,UAAAA;AACT,qBAAOhjB,KAAK4D,OAAOof;YACrB;YAEOC,UAAUC,IAAAA;AACf,qBAAOljB,KAAK4D,OAAOqf,UAAUjjB,KAAK4D,OAAOiW,QAAQ7Z,KAAK4D,OAAOmI,IAAImX,EAAAA;YACnE;YAEOC,mBAAmBC,IAAAA;AACxB,qBAAOpjB,KAAKsW,mBAAmB6M,mBAAmBC,EAAAA;YACpD;YAKO5I,eAAAA;AACL,qBAAA,CAAA,CAAOxa,KAAK0a,qBAAoB1a,KAAK0a,kBAAkBF;YACzD;YAQOpS,OAAOib,IAAgB5C,IAAaxf,IAAAA;AACzCjB,mBAAK0a,kBAAmB4I,aAAaD,IAAQ5C,IAAKxf,EAAAA;YACpD;YAMOsiB,eAAAA;AACL,qBAAOvjB,KAAK0a,oBAAoB1a,KAAK0a,kBAAkB3S,gBAAgB;YACzE;YAEOyb,uBAAAA;AACL,kBAAKxjB,KAAK0a,qBAAsB1a,KAAK0a,kBAAkBF;AAIvD,uBAAO,EACLxY,OAAO,EACL8J,GAAG9L,KAAK0a,kBAAkB+I,eAAgB,CAAA,GAC1C1X,GAAG/L,KAAK0a,kBAAkB+I,eAAgB,CAAA,EAAA,GAE5CxhB,KAAK,EACH6J,GAAG9L,KAAK0a,kBAAkBgJ,aAAc,CAAA,GACxC3X,GAAG/L,KAAK0a,kBAAkBgJ,aAAc,CAAA,EAAA,EAAA;YAG9C;YAKOC,iBAAAA;AAAAA,kBAAAA;AACiB,wBAAtBvkB,KAAAY,KAAK0a,sBAAAA,WAAiBtb,MAAAA,GAAEukB,eAAAA;YAC1B;YAKOC,YAAAA;AAAAA,kBAAAA;AACiB,wBAAtBxkB,KAAAY,KAAK0a,sBAAAA,WAAiBtb,MAAAA,GAAEwkB,UAAAA;YAC1B;YAEOC,YAAY7hB,IAAeC,IAAAA;AAAAA,kBAAAA;AACV,wBAAtB/C,KAAAc,KAAK0a,sBAAAA,WAAiBxb,MAAAA,GAAE2kB,YAAY7hB,IAAOC,EAAAA;YAC7C;YAOUkZ,SAAS9Q,IAAAA;AAIjB,kBAHArK,KAAK+U,kBAAAA,OACL/U,KAAKgV,eAAAA,MAEDhV,KAAKuX,0BAAAA,UAA0BvX,KAAKuX,uBAAuBlN,EAAAA;AAC7D,uBAAA;AAIF,oBAAMyZ,KAA0B9jB,KAAK6U,QAAQ3P,SAASlF,KAAKsJ,QAAQya,mBAAmB1Z,GAAMwW;AAE5F,kBAAA,CAAKiD,MAAAA,CAA4B9jB,KAAK0Z,mBAAoBsK,QAAQ3Z,EAAAA;AAIhE,uBAHIrK,KAAKsJ,QAAQ2a,qBAAqBjkB,KAAK4D,OAAOiW,UAAU7Z,KAAK4D,OAAOgC,SACtE5F,KAAK6J,eAAeqa,eAAAA,GAAAA;AAKnBJ,cAAAA,MAA0C,WAAdzZ,GAAMzH,OAAgC,eAAdyH,GAAMzH,QAC7D5C,KAAKkV,sBAAAA;AAGP,oBAAMrE,MAAS,GAAA,EAAAsT,uBAAsB9Z,IAAOrK,KAAK8G,YAAYC,gBAAgBgb,uBAAuB/hB,KAAK6U,QAAQ3P,OAAOlF,KAAKsJ,QAAQya,eAAAA;AAIrI,kBAFA/jB,KAAKoZ,kBAAkB/O,EAAAA,GAEH,MAAhBwG,GAAOzH,QAAyD,MAAhByH,GAAOzH,MAAqC;AAC9F,sBAAMgb,KAAcpkB,KAAKU,OAAO;AAEhC,uBADAV,KAAKwE,YAA4B,MAAhBqM,GAAOzH,OAAAA,CAAuCgb,KAAcA,EAAAA,GACtEpkB,KAAKqhB,OAAOhX,IAAAA,IAAO;cAAA;AAO5B,qBAJoB,MAAhBwG,GAAOzH,QACTpJ,KAAK4jB,UAAAA,GAAAA,CAAAA,CAGH5jB,KAAKqkB,mBAAmBrkB,KAAK6U,SAASxK,EAAAA,MAItCwG,GAAOwQ,UAETrhB,KAAKqhB,OAAOhX,IAAAA,IAAO,GAAA,CAGhBwG,GAAOjO,OAAAA,CAAAA,EAMRyH,GAAMzH,OAAAA,CAAQyH,GAAMsW,WAAAA,CAAYtW,GAAMwW,UAAAA,CAAWxW,GAAMia,WAAgC,MAArBja,GAAMzH,IAAI3B,UAC1EoJ,GAAMzH,IAAI2hB,WAAW,CAAA,KAAM,MAAMla,GAAMzH,IAAI2hB,WAAW,CAAA,KAAM,QAK9DvkB,KAAKkV,uBACPlV,KAAKkV,sBAAAA,OAAsB,SAOzBrE,GAAOjO,QAAQ,EAAAuV,GAAGqM,OAAO3T,GAAOjO,QAAQ,EAAAuV,GAAGsM,OAC7CzkB,KAAK6G,SAAUI,QAAQ,KAGzBjH,KAAKqV,OAAO3F,KAAK,EAAE9M,KAAKiO,GAAOjO,KAAK8hB,UAAUra,GAAAA,CAAAA,GAC9CrK,KAAKqZ,YAAAA,GACLrZ,KAAK8G,YAAYE,iBAAiB6J,GAAOjO,KAAAA,IAAK,GAAA,CAMzC5C,KAAKsf,eAAevO,WAAWsO,oBAAoBhV,GAAMwW,UAAUxW,GAAMsW,UACrE3gB,KAAKqhB,OAAOhX,IAAAA,IAAO,IAAA,MAG5BrK,KAAK+U,kBAAAA;YACP;YAEQsP,mBAAmBxP,IAAmB1N,IAAAA;AAC5C,oBAAMwd,KACH9P,GAAQ3P,SAAAA,CAAUlF,KAAKsJ,QAAQya,mBAAmB5c,GAAG0Z,UAAAA,CAAW1Z,GAAGwZ,WAAAA,CAAYxZ,GAAGmd,WAClFzP,GAAQ+P,aAAazd,GAAG0Z,UAAU1Z,GAAGwZ,WAAAA,CAAYxZ,GAAGmd,WACpDzP,GAAQ+P,aAAazd,GAAG0d,iBAAiB,UAAA;AAE5C,qBAAgB,eAAZ1d,GAAGiC,OACEub,KAIFA,OAAAA,CAAmBxd,GAAG2d,WAAW3d,GAAG2d,UAAU;YACvD;YAEU5J,OAAO/T,IAAAA;AACfnH,mBAAKgV,eAAAA,OAEDhV,KAAKuX,0BAAAA,UAA0BvX,KAAKuX,uBAAuBpQ,EAAAA,MAwNnE,SAAiCA,IAAAA;AAC/B,uBAAsB,OAAfA,GAAG2d,WACO,OAAf3d,GAAG2d,WACY,OAAf3d,GAAG2d;cACP,EAxNiC3d,EAAAA,KAC3BnH,KAAKyE,MAAAA,GAGPzE,KAAKoZ,kBAAkBjS,EAAAA,GACvBnH,KAAKiV,mBAAAA;YACP;YAQUmG,UAAUjU,IAAAA;AAClB,kBAAIvE;AAIJ,kBAFA5C,KAAKiV,mBAAAA,OAEDjV,KAAK+U;AACP,uBAAA;AAGF,kBAAI/U,KAAKuX,0BAAAA,UAA0BvX,KAAKuX,uBAAuBpQ,EAAAA;AAC7D,uBAAA;AAKF,kBAFAnH,KAAKqhB,OAAOla,EAAAA,GAERA,GAAG4d;AACLniB,gBAAAA,KAAMuE,GAAG4d;uBACa,SAAb5d,GAAG6d,SAAAA,WAAkB7d,GAAG6d;AACjCpiB,gBAAAA,KAAMuE,GAAG2d;mBACJ;AAAA,oBAAiB,MAAb3d,GAAG6d,SAA+B,MAAhB7d,GAAG4d;AAG9B,yBAAA;AAFAniB,gBAAAA,KAAMuE,GAAG6d;cAAAA;AAKX,qBAAA,EAAA,CAAKpiB,OACFuE,GAAG0Z,UAAU1Z,GAAGwZ,WAAWxZ,GAAGmd,YAAAA,CAAatkB,KAAKqkB,mBAAmBrkB,KAAK6U,SAAS1N,EAAAA,MAKpFvE,KAAMqiB,OAAOC,aAAatiB,EAAAA,GAE1B5C,KAAKqV,OAAO3F,KAAK,EAAE9M,KAAAA,IAAK8hB,UAAUvd,GAAAA,CAAAA,GAClCnH,KAAKqZ,YAAAA,GACLrZ,KAAK8G,YAAYE,iBAAiBpE,IAAAA,IAAK,GAEvC5C,KAAKiV,mBAAAA,MAILjV,KAAKkV,sBAAAA,OAEE;YACT;YAQUsG,YAAYrU,IAAAA;AAIpB,kBAAIA,GAAG6a,QAAyB,iBAAjB7a,GAAGge,cAAAA,CAAgChe,GAAGie,YAAAA,CAAaplB,KAAKgV,iBAAAA,CAAkBhV,KAAKsf,eAAevO,WAAWsO,kBAAkB;AACxI,oBAAIrf,KAAKiV;AACP,yBAAA;AAKFjV,qBAAKkV,sBAAAA;AAEL,sBAAM1O,KAAOW,GAAG6a;AAIhB,uBAHAhiB,KAAK8G,YAAYE,iBAAiBR,IAAAA,IAAM,GAExCxG,KAAKqhB,OAAOla,EAAAA,GAAAA;cACL;AAGT,qBAAA;YACF;YAQOkW,OAAOvR,IAAWC,IAAAA;AACnBD,cAAAA,OAAM9L,KAAK0N,QAAQ3B,OAAM/L,KAAKU,OAQlCd,MAAMyd,OAAOvR,IAAGC,EAAAA,IANV/L,KAAK2c,oBAAAA,CAAqB3c,KAAK2c,iBAAiB0I,gBAClDrlB,KAAK2c,iBAAiBgD,QAAAA;YAM5B;YAEQrI,aAAaxL,IAAWC,IAAAA;AAAAA,kBAAAA,IAAAA;AACT,wBAArB7M,KAAAc,KAAK2c,qBAAAA,WAAgBzd,MAAAA,GAAEygB,QAAAA,GAIV,UAAbrgB,KAAAU,KAAK6d,aAAAA,WAAQve,MAAAA,GAAE2e,eAAAA,IAAe;YAChC;YAKOjV,QAAAA;AACL,kBAA0B,MAAtBhJ,KAAK4D,OAAOiW,SAAiC,MAAlB7Z,KAAK4D,OAAOmI,GAA3C;AAIA/L,qBAAK4D,OAAO0hB,gBAAAA,GACZtlB,KAAK4D,OAAOC,MAAM8E,IAAI,GAAG3I,KAAK4D,OAAOC,MAAMgF,IAAI7I,KAAK4D,OAAOiW,QAAQ7Z,KAAK4D,OAAOmI,CAAAA,CAAAA,GAC/E/L,KAAK4D,OAAOC,MAAM5C,SAAS,GAC3BjB,KAAK4D,OAAOgC,QAAQ,GACpB5F,KAAK4D,OAAOiW,QAAQ,GACpB7Z,KAAK4D,OAAOmI,IAAI;AAChB,yBAAS7M,KAAI,GAAGA,KAAIc,KAAKU,MAAMxB;AAC7Bc,uBAAK4D,OAAOC,MAAMU,KAAKvE,KAAK4D,OAAO2hB,aAAa,EAAAC,iBAAAA,CAAAA;AAElDxlB,qBAAKuF,QAAQ,GAAGvF,KAAKU,OAAO,CAAA,GAC5BV,KAAK8e,UAAUpP,KAAK,EAAEnM,UAAUvD,KAAK4D,OAAOgC,OAAO6c,QAAQ,EAAA,CAAA;cAAA;YAC7D;YAUOzL,QAAAA;AAAAA,kBAAAA,IAAAA;AAKLhX,mBAAKsJ,QAAQ5I,OAAOV,KAAKU,MACzBV,KAAKsJ,QAAQoE,OAAO1N,KAAK0N;AACzB,oBAAMiV,KAAwB3iB,KAAKuX;AAEnCvX,mBAAKkW,OAAAA,GACLtW,MAAMoX,MAAAA,GACgB,UAAtB5X,KAAAY,KAAK0a,sBAAAA,WAAiBtb,MAAAA,GAAE4X,MAAAA,GACxBhX,KAAKsW,mBAAmBU,MAAAA,GAGxBhX,KAAKuX,yBAAyBoL,IAG9B3iB,KAAKuF,QAAQ,GAAGvF,KAAKU,OAAO,CAAA,GACf,UAAbrB,KAAAW,KAAK6d,aAAAA,WAAQxe,MAAAA,GAAE4e,eAAAA;YACjB;YAEOwH,oBAAAA;AAAAA,kBAAAA;AACc,wBAAnBrmB,KAAAY,KAAKL,mBAAAA,WAAcP,MAAAA,GAAEqmB,kBAAAA;YACvB;YAEQ3O,eAAAA;AAAAA,kBAAAA;AAAAA,eACU,UAAZ1X,KAAAY,KAAKyB,YAAAA,WAAOrC,KAAA,SAAAA,GAAEgB,UAAUwL,SAAS,OAAA,KACnC5L,KAAK8G,YAAYE,iBAAiB,EAAAmR,GAAGC,MAAM,IAAA,IAE3CpY,KAAK8G,YAAYE,iBAAiB,EAAAmR,GAAGC,MAAM,IAAA;YAE/C;YAEQlB,sBAAsB9N,IAAAA;AAC5B,kBAAKpJ,KAAKL;AAIV,wBAAQyJ,IAAAA;kBACN,KAAK,EAAAsc,yBAAyBC;AAC5B,0BAAMC,KAAc5lB,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOD,MAAMwf,QAAQ,CAAA,GACtEC,KAAe9lB,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOH,OAAO0f,QAAQ,CAAA;AAC9E7lB,yBAAK8G,YAAYE,iBAAiB,GAAG,EAAAmR,GAAGC,SAAS0N,MAAgBF,KAAAA;AACjE;kBACF,KAAK,EAAAF,yBAAyBK;AAC5B,0BAAM7L,KAAYla,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG,MAAMwf,QAAQ,CAAA,GAClE7L,KAAaha,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,OAAO0f,QAAQ,CAAA;AAC1E7lB,yBAAK8G,YAAYE,iBAAiB,GAAG,EAAAmR,GAAGC,SAAS4B,MAAcE,KAAAA;gBAAAA;YAGrE;YAGOmH,OAAOla,IAAW6e,IAAAA;AACvB,kBAAKhmB,KAAKsJ,QAAQ2c,gBAAiBD;AAKnC,uBAFA7e,GAAGzC,eAAAA,GACHyC,GAAGa,gBAAAA,GAAAA;YAEL;UAAA;AAxtCF,UAAA3I,GAAA,WAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,qBAAA,QCnDAA,GAAA,qBAAA,MAAA;YAYEI,YACUsT,IACSmT,KArBgB,KAAA;AAoBzB,mBAAAnT,kBAAAA,IACS,KAAAmT,uBAAAA,IARX,KAAAC,iBAAiB,GAEjB,KAAAC,8BAAAA;YAQR;YAEO5c,UAAAA;AACDxJ,mBAAKqmB,qBACPC,aAAatmB,KAAKqmB,iBAAAA;YAEtB;YAEO9gB,QAAQ+N,IAA8BC,IAA4BC,IAAAA;AACvExT,mBAAKyT,YAAYD,IAEjBF,KAAAA,WAAWA,KAAyBA,KAAW,GAC/CC,KAAAA,WAASA,KAAuBA,KAASvT,KAAKyT,YAAY,GAE1DzT,KAAK0T,YAAAA,WAAY1T,KAAK0T,YAA0BC,KAAKC,IAAI5T,KAAK0T,WAAWJ,EAAAA,IAAYA,IACrFtT,KAAK6T,UAAAA,WAAU7T,KAAK6T,UAAwBF,KAAKG,IAAI9T,KAAK6T,SAASN,EAAAA,IAAUA;AAI7E,oBAAMgT,KAA6BC,KAAKC,IAAAA;AACxC,kBAAIF,KAAqBvmB,KAAKmmB,kBAAkBnmB,KAAKkmB;AAEnDlmB,qBAAKmmB,iBAAiBI,IACtBvmB,KAAKqT,cAAAA;uBACA,CAAKrT,KAAKomB,6BAA6B;AAE5C,sBAAMM,KAAUH,KAAqBvmB,KAAKmmB,gBACpCQ,KAAkC3mB,KAAKkmB,uBAAuBQ;AACpE1mB,qBAAKomB,8BAAAA,MAELpmB,KAAKqmB,oBAAoBnjB,OAAOkC,WAAW,MAAA;AACzCpF,uBAAKmmB,iBAAiBK,KAAKC,IAAAA,GAC3BzmB,KAAKqT,cAAAA,GACLrT,KAAKomB,8BAAAA,OACLpmB,KAAKqmB,oBAAAA;gBAA6B,GACjCM,EAAAA;cAAAA;YAEP;YAEQtT,gBAAAA;AAEN,kBAAA,WAAIrT,KAAK0T,aAAAA,WAA2B1T,KAAK6T,WAAAA,WAAyB7T,KAAKyT;AACrE;AAIF,oBAAMzR,KAAQ2R,KAAKG,IAAI9T,KAAK0T,WAAW,CAAA,GACjCzR,KAAM0R,KAAKC,IAAI5T,KAAK6T,SAAS7T,KAAKyT,YAAY,CAAA;AAGpDzT,mBAAK0T,YAAAA,QACL1T,KAAK6T,UAAAA,QAGL7T,KAAK+S,gBAAgB/Q,IAAOC,EAAAA;YAC9B;UAAA;QAAA,GAAA,MAAA,SAAA7C,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,WAAA;AC9EF,gBAAA,IAAAH,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAgBA,cAAa4e,IAAb,cAA8B,EAAAte,WAAAA;YAyB5BC,YACmBmnB,IACAzK,IACA0K,IACgBhd,IACC4G,IACCkM,IACFhd,IACK4c,IACvBuK,IAAAA;AAEflnB,oBAAAA,GAViB,KAAAgnB,eAAAA,IACA,KAAAzK,mBAAAA,IACA,KAAA0K,cAAAA,IACgB,KAAAhd,iBAAAA,IACC,KAAA4G,kBAAAA,IACC,KAAAkM,mBAAAA,IACF,KAAAhd,iBAAAA,IACK,KAAA4c,sBAAAA,IAhCjC,KAAAwK,iBAAyB,GACxB,KAAAC,oBAA4B,GAC5B,KAAAC,2BAAmC,GACnC,KAAAC,4BAAoC,GACpC,KAAAC,8BAAsC,GACtC,KAAAC,4BAAoC,GACpC,KAAAC,cAAsB,GACtB,KAAAC,iBAAyB,GAOzB,KAAAC,sBAA8B,GAE9B,KAAAC,yBAAwC,MACxC,KAAAC,yBAAAA,OACA,KAAAC,qBAAyC,EAC/CC,WAAW,GACXC,QAAAA,IACAnkB,QAAAA,GAAS,GAmBTzD,KAAK+mB,iBAAkB/mB,KAAKmc,iBAAiB0L,cAAc7nB,KAAK6mB,YAAYgB,eArD9C,IAsD9B7nB,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKmc,kBAAkB,UAAUnc,KAAK8nB,cAAcxmB,KAAKtB,IAAAA,CAAAA,CAAAA,GAGhGA,KAAK+nB,gBAAgB/nB,KAAK6J,eAAejG,QACzC5D,KAAK4B,SAAS5B,KAAK6J,eAAegP,QAAQmP,iBAAiB5oB,CAAAA,OAAKY,KAAK+nB,gBAAgB3oB,GAAE6oB,YAAAA,CAAAA,GACvFjoB,KAAKkoB,oBAAoBloB,KAAKL,eAAeqG,YAC7ChG,KAAK4B,SAAS5B,KAAKL,eAAeoD,mBAAmB3D,CAAAA,OAAKY,KAAKkoB,oBAAoB9oB,EAAAA,CAAAA,GAEnFY,KAAKmoB,mBAAmBrB,GAAa7O,MAAAA,GACrCjY,KAAK4B,SAASklB,GAAasB,eAAehpB,CAAAA,OAAKY,KAAKmoB,mBAAmB/oB,EAAAA,CAAAA,CAAAA,GACvEY,KAAK4B,SAAS5B,KAAKyQ,gBAAgB8O,uBAAuB,cAAc,MAAMvf,KAAKie,eAAAA,CAAAA,CAAAA,GAGnF7Y,WAAW,MAAMpF,KAAKie,eAAAA,GAAkB,CAAA;YAC1C;YAEQkK,mBAAmBlQ,IAAAA;AACzBjY,mBAAKmc,iBAAiB/V,MAAMiiB,kBAAkBpQ,GAAOqQ,WAAWriB;YAClE;YAMQsiB,SAASC,IAAAA;AACf,kBAAIA;AAKF,uBAJAxoB,KAAKqT,cAAAA,GAAAA,MAC+B,SAAhCrT,KAAKwnB,0BACPxnB,KAAKuc,oBAAoBrZ,OAAOgQ,qBAAqBlT,KAAKwnB,sBAAAA;AAI1B,uBAAhCxnB,KAAKwnB,2BACPxnB,KAAKwnB,yBAAyBxnB,KAAKuc,oBAAoBrZ,OAAOkQ,sBAAsB,MAAMpT,KAAKqT,cAAAA,CAAAA;YAEnG;YAEQA,gBAAAA;AACN,kBAAIrT,KAAK2c,iBAAiBxW,SAAS,GAAG;AACpCnG,qBAAKgnB,oBAAoBhnB,KAAKL,eAAeqG,WAAWyiB,OAAOviB,KAAKC,SAASnG,KAAKuc,oBAAoBmM,KACtG1oB,KAAKinB,2BAA2BjnB,KAAKL,eAAeqG,WAAWyiB,OAAOviB,KAAKC,QAC3EnG,KAAKmnB,8BAA8BnnB,KAAKmc,iBAAiBwM;AACzD,sBAAMC,KAAkBjV,KAAKkV,MAAM7oB,KAAKgnB,oBAAoBhnB,KAAKknB,yBAAAA,KAA8BlnB,KAAKmnB,8BAA8BnnB,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOH;AACxKnG,qBAAKonB,8BAA8BwB,OACrC5oB,KAAKonB,4BAA4BwB,IACjC5oB,KAAK6mB,YAAYzgB,MAAMD,SAASnG,KAAKonB,4BAA4B;cAAA;AAKrE,oBAAM0B,KAAY9oB,KAAK6J,eAAejG,OAAOgC,QAAQ5F,KAAKgnB;AACtDhnB,mBAAKmc,iBAAiB2M,cAAcA,OAGtC9oB,KAAKynB,yBAAAA,MACLznB,KAAKmc,iBAAiB2M,YAAYA,KAGpC9oB,KAAKwnB,yBAAyB;YAChC;YAKOvJ,eAAeuK,KAAAA,OAAqB;AAEzC,kBAAIxoB,KAAKknB,8BAA8BlnB,KAAK6J,eAAejG,OAAOC,MAAM5C;AAGtE,uBAFAjB,KAAKknB,4BAA4BlnB,KAAK6J,eAAejG,OAAOC,MAAM5C,QAAAA,KAClEjB,KAAKuoB,SAASC,EAAAA;AAKZxoB,mBAAKmnB,gCAAgCnnB,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOH,UAM/EnG,KAAKsnB,mBAAmBtnB,KAAK+nB,cAAcniB,QAAQ5F,KAAKgnB,qBAMxDhnB,KAAKkoB,kBAAkBO,OAAOviB,KAAKC,WAAWnG,KAAKinB,4BAXrDjnB,KAAKuoB,SAASC,EAAAA;YAelB;YAOQV,cAAc3gB,IAAAA;AAMpB,kBAJAnH,KAAKsnB,iBAAiBtnB,KAAKmc,iBAAiB2M,WAAAA,CAIvC9oB,KAAKmc,iBAAiB4M;AACzB;AAIF,kBAAI/oB,KAAKynB;AAIP,uBAHAznB,KAAKynB,yBAAAA,OAAyB,KAE9BznB,KAAK4mB,aAAa,CAAA;AAIpB,oBACMoC,KADSrV,KAAKkV,MAAM7oB,KAAKsnB,iBAAiBtnB,KAAKgnB,iBAAAA,IAC/BhnB,KAAK6J,eAAejG,OAAOgC;AACjD5F,mBAAK4mB,aAAaoC,EAAAA;YACpB;YAEQC,gBAAAA;AAEN,kBAAIjpB,KAAKkpB,eAAAA,OAAelpB,KAAK0nB,mBAAmBE,UAAAA,OAAiB5nB,KAAK0nB,mBAAmBjkB;AACvF;AAIF,oBAAM0lB,KAAUnpB,KAAKopB,qBAAAA;AACrBppB,mBAAKmc,iBAAiB2M,YAAY9oB,KAAK0nB,mBAAmBE,SAASjU,KAAKkV,MAAMM,MAAWnpB,KAAK0nB,mBAAmBjkB,SAASzD,KAAK0nB,mBAAmBE,OAAAA,GAG9IuB,KAAU,IACZnpB,KAAKuc,oBAAoBrZ,OAAOkQ,sBAAsB,MAAMpT,KAAKipB,cAAAA,CAAAA,IAEjEjpB,KAAKqpB,wBAAAA;YAET;YAEQD,uBAAAA;AACN,qBAAKppB,KAAKyQ,gBAAgBM,WAAWuY,wBAAyBtpB,KAAK0nB,mBAAmBC,YAG/EhU,KAAKG,IAAIH,KAAKC,KAAK4S,KAAKC,IAAAA,IAAQzmB,KAAK0nB,mBAAmBC,aAAa3nB,KAAKyQ,gBAAgBM,WAAWuY,sBAAsB,CAAA,GAAI,CAAA,IAF7H;YAGX;YAEQD,0BAAAA;AACNrpB,mBAAK0nB,mBAAmBC,YAAY,GACpC3nB,KAAK0nB,mBAAmBE,SAAAA,IACxB5nB,KAAK0nB,mBAAmBjkB,SAAAA;YAC1B;YAOQ8lB,cAAcpiB,IAAW4W,IAAAA;AAC/B,oBAAMyL,KAAmBxpB,KAAKmc,iBAAiB2M,YAAY9oB,KAAKmnB;AAChE,qBAAA,EAAKpJ,KAAS,KAAyC,MAApC/d,KAAKmc,iBAAiB2M,aACtC/K,KAAS,KAAKyL,KAAmBxpB,KAAKonB,+BACnCjgB,GAAGsiB,cACLtiB,GAAGzC,eAAAA,GAAAA;YAKT;YAQOwd,YAAY/a,IAAAA;AACjB,oBAAM4W,KAAS/d,KAAK0pB,mBAAmBviB,EAAAA;AACvC,qBAAe,MAAX4W,OAGC/d,KAAKyQ,gBAAgBM,WAAWuY,wBAGnCtpB,KAAK0nB,mBAAmBC,YAAYnB,KAAKC,IAAAA,GACrCzmB,KAAKopB,qBAAAA,IAAyB,KAChCppB,KAAK0nB,mBAAmBE,SAAS5nB,KAAKmc,iBAAiB2M,WAAAA,OACnD9oB,KAAK0nB,mBAAmBjkB,SAC1BzD,KAAK0nB,mBAAmBjkB,SAASzD,KAAKmc,iBAAiB2M,YAAY/K,KAEnE/d,KAAK0nB,mBAAmBjkB,UAAUsa,IAEpC/d,KAAK0nB,mBAAmBjkB,SAASkQ,KAAKG,IAAIH,KAAKC,IAAI5T,KAAK0nB,mBAAmBjkB,QAAQzD,KAAKmc,iBAAiBwN,YAAAA,GAAe,CAAA,GACxH3pB,KAAKipB,cAAAA,KAELjpB,KAAKqpB,wBAAAA,KAbPrpB,KAAKmc,iBAAiB2M,aAAa/K,IAgB9B/d,KAAKupB,cAAcpiB,IAAI4W,EAAAA;YAChC;YAEQ2L,mBAAmBviB,IAAAA;AAEzB,kBAAkB,MAAdA,GAAGmZ,UAAgBnZ,GAAG2Z;AACxB,uBAAO;AAIT,kBAAI/C,KAAS/d,KAAK4pB,qBAAqBziB,GAAGmZ,QAAQnZ,EAAAA;AAMlD,qBALIA,GAAG0iB,cAAcC,WAAWC,iBAC9BhM,MAAU/d,KAAKgnB,oBACN7f,GAAG0iB,cAAcC,WAAWE,mBACrCjM,MAAU/d,KAAKgnB,oBAAoBhnB,KAAK6J,eAAenJ,OAElDqd;YACT;YAOOsC,iBAAiBlZ,IAAAA;AAEtB,kBAAkB,MAAdA,GAAGmZ,UAAgBnZ,GAAG2Z;AACxB,uBAAO;AAIT,kBAAI/C,KAAS/d,KAAK4pB,qBAAqBziB,GAAGmZ,QAAQnZ,EAAAA;AASlD,qBARIA,GAAG0iB,cAAcC,WAAWG,mBAC9BlM,MAAU/d,KAAKgnB,oBAAoB,GACnChnB,KAAKunB,uBAAuBxJ,IAC5BA,KAASpK,KAAKuW,MAAMvW,KAAKsO,IAAIjiB,KAAKunB,mBAAAA,CAAAA,KAAyBvnB,KAAKunB,sBAAsB,IAAI,IAAA,KAC1FvnB,KAAKunB,uBAAuB,KACnBpgB,GAAG0iB,cAAcC,WAAWE,mBACrCjM,MAAU/d,KAAK6J,eAAenJ,OAEzBqd;YACT;YAEQ6L,qBAAqB7L,IAAgB5W,IAAAA;AAC3C,oBAAMgjB,KAAWnqB,KAAKyQ,gBAAgBM,WAAWqZ;AAEjD,qBAAkB,UAAbD,MAAsBhjB,GAAG0Z,UACd,WAAbsJ,MAAuBhjB,GAAGwZ,WACb,YAAbwJ,MAAwBhjB,GAAG2Z,WACrB/C,KAAS/d,KAAKyQ,gBAAgBM,WAAWsZ,wBAAwBrqB,KAAKyQ,gBAAgBM,WAAWuZ,oBAGnGvM,KAAS/d,KAAKyQ,gBAAgBM,WAAWuZ;YAClD;YAMOnI,iBAAiBhb,IAAAA;AACtBnH,mBAAKqnB,cAAclgB,GAAGojB,QAAQ,CAAA,EAAGC;YACnC;YAMOpI,gBAAgBjb,IAAAA;AACrB,oBAAMmZ,KAAStgB,KAAKqnB,cAAclgB,GAAGojB,QAAQ,CAAA,EAAGC;AAEhD,qBADAxqB,KAAKqnB,cAAclgB,GAAGojB,QAAQ,CAAA,EAAGC,OAClB,MAAXlK,OAGJtgB,KAAKmc,iBAAiB2M,aAAaxI,IAC5BtgB,KAAKupB,cAAcpiB,IAAImZ,EAAAA;YAChC;UAAA;AAxTWxC,cAAQxe,GAAA,CA6BhB,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAAsC,eAAAA,GACA,EAAA,GAAA,EAAAiK,gBAAAA,GACA,EAAA,GAAA,EAAAO,cAAAA,GACA,EAAA,GAAA,EAAAV,mBAAAA,GACA,EAAA,GAAA,EAAAK,aAAAA,CAAAA,GAlCQe,CAAAA,GAAAze,GAAAye,WAAAA;QAAAA,GAAAA,MAAAA,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,cAAAA,KAAAA,QAAAA,KAAAA,cAAAA,SAAAA,IAAAA,IAAAA,IAAAA,IAAAA;AAAAA,gBAAAA,IAAAA,KAAAA,UAAAA,QAAAA,KAAAA,KAAAA,IAAAA,KAAAA,SAAAA,KAAAA,KAAAA,OAAAA,yBAAAA,IAAAA,EAAAA,IAAAA;AAAAA,gBAAAA,YAAAA,OAAAA,WAAAA,cAAAA,OAAAA,QAAAA;AAAAA,cAAAA,KAAAA,QAAAA,SAAAA,IAAAA,IAAAA,IAAAA,EAAAA;;AAAAA,uBAAAA,KAAAA,GAAAA,SAAAA,GAAAA,MAAAA,GAAAA;AAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,OAAAA,MAAAA,KAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,MAAAA;AAAAA,mBAAAA,KAAAA,KAAAA,MAAAA,OAAAA,eAAAA,IAAAA,IAAAA,EAAAA,GAAAA;UAAAA,GAAAA,IAAAA,QAAAA,KAAAA,WAAAA,SAAAA,IAAAA,IAAAA;AAAAA,mBAAAA,SAAAA,IAAAA,IAAAA;AAAAA,cAAAA,GAAAA,IAAAA,IAAAA,EAAAA;YAAAA;UAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,2BAAAA;ACpBb,gBAAA,IAAA5e,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA;AAEA,cAAa6f,IAAb,cAA8C,EAAAvf,WAAAA;YAQ5CC,YACmBgrB,IACgB5gB,IACIyM,IACJ3W,IAAAA;AAEjCC,oBAAAA,GALiB,KAAA6qB,iBAAAA,IACgB,KAAA5gB,iBAAAA,IACI,KAAAyM,qBAAAA,IACJ,KAAA3W,iBAAAA,IAVlB,KAAA+qB,sBAA6D,oBAAIje,OAG1E,KAAAke,qBAAAA,OACA,KAAAC,qBAAAA,OAUN5qB,KAAK6qB,aAAa3qB,SAASC,cAAc,KAAA,GACzCH,KAAK6qB,WAAWzqB,UAAUC,IAAI,4BAAA,GAC9BL,KAAKyqB,eAAe7pB,YAAYZ,KAAK6qB,UAAAA,GAErC7qB,KAAK4B,SAAS5B,KAAKL,eAAewP,yBAAyB,MAAMnP,KAAK8qB,sBAAAA,CAAAA,CAAAA,GACtE9qB,KAAK4B,SAAS5B,KAAKL,eAAeoD,mBAAmB,MAAA;AACnD/C,qBAAK4qB,qBAAAA,MACL5qB,KAAK+qB,cAAAA;cAAe,CAAA,CAAA,GAEtB/qB,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBF,QAAQ,UAAU,MAAMlD,KAAK+qB,cAAAA,CAAAA,CAAAA,GACpE/qB,KAAK4B,SAAS5B,KAAK6J,eAAegP,QAAQmP,iBAAiB,MAAA;AACzDhoB,qBAAK2qB,qBAAqB3qB,KAAK6J,eAAejG,WAAW5D,KAAK6J,eAAegP,QAAQ+H;cAAG,CAAA,CAAA,GAE1F5gB,KAAK4B,SAAS5B,KAAKsW,mBAAmB0U,uBAAuB,MAAMhrB,KAAK+qB,cAAAA,CAAAA,CAAAA,GACxE/qB,KAAK4B,SAAS5B,KAAKsW,mBAAmB2U,oBAAoBC,CAAAA,OAAclrB,KAAKmrB,kBAAkBD,EAAAA,CAAAA,CAAAA,GAC/FlrB,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AACzBrD,qBAAK6qB,WAAWlb,OAAAA,GAChB3P,KAAK0qB,oBAAoB1hB,MAAAA;cAAO,CAAA,CAAA;YAEpC;YAEQ+hB,gBAAAA;AAAAA,yBACF/qB,KAAKiT,oBAGTjT,KAAKiT,kBAAkBjT,KAAKL,eAAewT,mBAAmB,MAAA;AAC5DnT,qBAAK8qB,sBAAAA,GACL9qB,KAAKiT,kBAAAA;cAA2B,CAAA;YAEpC;YAEQ6X,wBAAAA;AACN,yBAAWI,MAAclrB,KAAKsW,mBAAmB7H;AAC/CzO,qBAAKorB,kBAAkBF,EAAAA;AAEzBlrB,mBAAK4qB,qBAAAA;YACP;YAEQQ,kBAAkBF,IAAAA;AACxBlrB,mBAAKqrB,cAAcH,EAAAA,GACflrB,KAAK4qB,sBACP5qB,KAAKsrB,kBAAkBJ,EAAAA;YAE3B;YAEQK,eAAeL,IAAAA;AAAAA,kBAAAA;AACrB,oBAAMzpB,KAAUvB,SAASC,cAAc,KAAA;AACvCsB,cAAAA,GAAQrB,UAAUC,IAAI,kBAAA,GACtBoB,GAAQ2E,MAAMC,QAAQ,GAAGsN,KAAKkV,OAAOqC,GAAW5hB,QAAQjD,SAAS,KAAKrG,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG,KAAAA,OAC9G5E,GAAQ2E,MAAMD,UAAa+kB,GAAW5hB,QAAQnD,UAAU,KAAKnG,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,SAA9E,MACvB1E,GAAQ2E,MAAMqB,OAAUyjB,GAAWM,OAAO5a,OAAO5Q,KAAK6J,eAAegP,QAAQC,OAAOlT,SAAS5F,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,SAAjH,MACpB1E,GAAQ2E,MAAMiU,aAAa,GAAGra,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC;AAEtE,oBAAM2F,KAAwB,UAApBzM,KAAA6rB,GAAW5hB,QAAQwC,MAAAA,WAACzM,KAAAA,KAAI;AAOlC,qBANIyM,MAAKA,KAAI9L,KAAK6J,eAAe6D,SAE/BjM,GAAQ2E,MAAMqlB,UAAU,SAE1BzrB,KAAKsrB,kBAAkBJ,IAAYzpB,EAAAA,GAE5BA;YACT;YAEQ4pB,cAAcH,IAAAA;AACpB,oBAAMta,KAAOsa,GAAWM,OAAO5a,OAAO5Q,KAAK6J,eAAegP,QAAQC,OAAOlT;AACzE,kBAAIgL,KAAO,KAAKA,MAAQ5Q,KAAK6J,eAAenJ;AAEtCwqB,gBAAAA,GAAWzpB,YACbypB,GAAWzpB,QAAQ2E,MAAMqlB,UAAU,QACnCP,GAAWQ,gBAAgBhc,KAAKwb,GAAWzpB,OAAAA;mBAExC;AACL,oBAAIA,KAAUzB,KAAK0qB,oBAAoB7hB,IAAIqiB,EAAAA;AACtCzpB,gBAAAA,OACHA,KAAUzB,KAAKurB,eAAeL,EAAAA,GAC9BA,GAAWzpB,UAAUA,IACrBzB,KAAK0qB,oBAAoB/hB,IAAIuiB,IAAYzpB,EAAAA,GACzCzB,KAAK6qB,WAAWjqB,YAAYa,EAAAA,IAE9BA,GAAQ2E,MAAMqB,MAASmJ,KAAO5Q,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,SAAlD,MACpB1E,GAAQ2E,MAAMqlB,UAAUzrB,KAAK2qB,qBAAqB,SAAS,SAC3DO,GAAWQ,gBAAgBhc,KAAKjO,EAAAA;cAAAA;YAEpC;YAEQ6pB,kBAAkBJ,IAAiCzpB,KAAmCypB,GAAWzpB,SAAAA;AAAAA,kBAAAA;AACvG,kBAAA,CAAKA;AACH;AAEF,oBAAMqK,KAAwB,UAApB5M,KAAAgsB,GAAW5hB,QAAQwC,MAAAA,WAAC5M,KAAAA,KAAI;AACY,2BAAzCgsB,GAAW5hB,QAAQqiB,UAAU,UAChClqB,GAAQ2E,MAAMwlB,QAAQ9f,KAAOA,KAAI9L,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG,QAA/C,OAA2D,KAErF5E,GAAQ2E,MAAMmB,OAAOuE,KAAOA,KAAI9L,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG,QAA/C,OAA2D;YAExF;YAEQ8kB,kBAAkBD,IAAAA;AAAAA,kBAAAA;AACgB,wBAAxC7rB,KAAAW,KAAK0qB,oBAAoB7hB,IAAIqiB,EAAAA,MAAAA,WAAW7rB,MAAAA,GAAEsQ,OAAAA,GAC1C3P,KAAK0qB,oBAAoBmB,OAAOX,EAAAA,GAChCA,GAAW1hB,QAAAA;YACb;UAAA;AArHWuV,cAAwBzf,GAAA,CAUhC,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAAmG,kBAAAA,GACA,EAAA,GAAA,EAAA2G,cAAAA,CAAAA,GAZQ2B,CAAAA,GAAA1f,GAAA0f,2BAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,iBAAAA,QCqBb1f,GAAA,iBAAA,MAAA;YAAA,cAAA;AACU,mBAAAysB,SAAuB,CAAA,GAKvB,KAAAC,YAA0B,CAAA,GAC1B,KAAAC,iBAAiB,GAEjB,KAAAC,eAA+C,EACrDC,MAAM,GACN3kB,MAAM,GACN4kB,QAAQ,GACRP,OAAO,EAAA;YAwEX;YArEaQ,IAAAA,QAAAA;AAGT,qBADApsB,KAAK+rB,UAAU9qB,SAAS0S,KAAKC,IAAI5T,KAAK+rB,UAAU9qB,QAAQjB,KAAK8rB,OAAO7qB,MAAAA,GAC7DjB,KAAK8rB;YACd;YAEO9iB,QAAAA;AACLhJ,mBAAK8rB,OAAO7qB,SAAS,GACrBjB,KAAKgsB,iBAAiB;YACxB;YAEOK,cAAcnB,IAAAA;AACnB,kBAAKA,GAAW5hB,QAAQgjB,sBAAxB;AAGA,2BAAWC,MAAKvsB,KAAK8rB;AACnB,sBAAIS,GAAExU,UAAUmT,GAAW5hB,QAAQgjB,qBAAqBvU,SACpDwU,GAAEhpB,aAAa2nB,GAAW5hB,QAAQgjB,qBAAqB/oB,UAAU;AACnE,wBAAIvD,KAAKwsB,oBAAoBD,IAAGrB,GAAWM,OAAO5a,IAAAA;AAChD;AAEF,wBAAI5Q,KAAKysB,oBAAoBF,IAAGrB,GAAWM,OAAO5a,MAAMsa,GAAW5hB,QAAQgjB,qBAAqB/oB,QAAAA;AAE9F,6BAAA,KADAvD,KAAK0sB,eAAeH,IAAGrB,GAAWM,OAAO5a,IAAAA;kBAAAA;AAM/C,oBAAI5Q,KAAKgsB,iBAAiBhsB,KAAK+rB,UAAU9qB;AAMvC,yBALAjB,KAAK+rB,UAAU/rB,KAAKgsB,cAAAA,EAAgBjU,QAAQmT,GAAW5hB,QAAQgjB,qBAAqBvU,OACpF/X,KAAK+rB,UAAU/rB,KAAKgsB,cAAAA,EAAgBzoB,WAAW2nB,GAAW5hB,QAAQgjB,qBAAqB/oB,UACvFvD,KAAK+rB,UAAU/rB,KAAKgsB,cAAAA,EAAgBW,kBAAkBzB,GAAWM,OAAO5a,MACxE5Q,KAAK+rB,UAAU/rB,KAAKgsB,cAAAA,EAAgBY,gBAAgB1B,GAAWM,OAAO5a,MAAAA,KACtE5Q,KAAK8rB,OAAOvnB,KAAKvE,KAAK+rB,UAAU/rB,KAAKgsB,gBAAAA,CAAAA;AAIvChsB,qBAAK8rB,OAAOvnB,KAAK,EACfwT,OAAOmT,GAAW5hB,QAAQgjB,qBAAqBvU,OAC/CxU,UAAU2nB,GAAW5hB,QAAQgjB,qBAAqB/oB,UAClDopB,iBAAiBzB,GAAWM,OAAO5a,MACnCgc,eAAe1B,GAAWM,OAAO5a,KAAAA,CAAAA,GAEnC5Q,KAAK+rB,UAAUxnB,KAAKvE,KAAK8rB,OAAO9rB,KAAK8rB,OAAO7qB,SAAS,CAAA,CAAA,GACrDjB,KAAKgsB;cAAAA;YACP;YAEOa,WAAWC,IAAAA;AAChB9sB,mBAAKisB,eAAea;YACtB;YAEQN,oBAAoBO,IAAkBnc,IAAAA;AAC5C,qBACEA,MAAQmc,GAAKJ,mBACb/b,MAAQmc,GAAKH;YAEjB;YAEQH,oBAAoBM,IAAkBnc,IAAcrN,IAAAA;AAC1D,qBACGqN,MAAQmc,GAAKJ,kBAAkB3sB,KAAKisB,aAAa1oB,MAAY,MAAA,KAC7DqN,MAAQmc,GAAKH,gBAAgB5sB,KAAKisB,aAAa1oB,MAAY,MAAA;YAEhE;YAEQmpB,eAAeK,IAAkBnc,IAAAA;AACvCmc,cAAAA,GAAKJ,kBAAkBhZ,KAAKC,IAAImZ,GAAKJ,iBAAiB/b,EAAAA,GACtDmc,GAAKH,gBAAgBjZ,KAAKG,IAAIiZ,GAAKH,eAAehc,EAAAA;YACpD;UAAA;QAAA,GAAA,MAAA,SAAAxR,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,wBAAA;AC9GF,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAIM8tB,IAAa,EACjBd,MAAM,GACN3kB,MAAM,GACN4kB,QAAQ,GACRP,OAAO,EAAA,GAEHqB,IAAY,EAChBf,MAAM,GACN3kB,MAAM,GACN4kB,QAAQ,GACRP,OAAO,EAAA,GAEHsB,IAAQ,EACZhB,MAAM,GACN3kB,MAAM,GACN4kB,QAAQ,GACRP,OAAO,EAAA;AAGT,cAAalM,IAAb,cAA2C,EAAAlgB,WAAAA;YAezCC,YACmB0c,IACAsO,IACgB5gB,IACIyM,IACJ3W,IACC8Q,IACI0c,IAAAA;AAAAA,kBAAAA;AAEtCvtB,oBAAAA,GARiB,KAAAuc,mBAAAA,IACA,KAAAsO,iBAAAA,IACgB,KAAA5gB,iBAAAA,IACI,KAAAyM,qBAAAA,IACJ,KAAA3W,iBAAAA,IACC,KAAA8Q,kBAAAA,IACI,KAAA0c,qBAAAA,IAnBvB,KAAAC,kBAAmC,IAAI,EAAAC,kBAMhD,KAAAC,0BAAAA,MACA,KAAAC,sBAAAA,MACA,KAAAC,yBAAiC,GAcvCxtB,KAAKytB,UAAUvtB,SAASC,cAAc,QAAA,GACtCH,KAAKytB,QAAQrtB,UAAUC,IAAI,iCAAA,GAC3BL,KAAK0tB,yBAAAA,GAC8B,UAAnCC,KAAA3tB,KAAKmc,iBAAiBjT,kBAAAA,WAAaykB,MAAAA,GAAEC,aAAa5tB,KAAKytB,SAASztB,KAAKmc,gBAAAA;AACrE,oBAAM0R,KAAM7tB,KAAKytB,QAAQK,WAAW,IAAA;AACpC,kBAAA,CAAKD;AACH,sBAAM,IAAInsB,MAAM,oBAAA;AAEhB1B,mBAAK+tB,OAAOF,IAEd7tB,KAAKguB,6BAAAA,GACLhuB,KAAKiuB,+BAAAA,GACLjuB,KAAKkuB,kCAAAA,GACLluB,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AAAA,oBAAAjE;AACb,0BAAZA,KAAAY,KAAKytB,YAAAA,WAAOruB,MAAAA,GAAEuQ,OAAAA;cAAQ,CAAA,CAAA;YAE1B;YArCYwe,IAAAA,SAAAA;AACV,qBAAOnuB,KAAKyQ,gBAAgBnH,QAAQkW,sBAAsB;YAC5D;YAwCQwO,+BAAAA;AACNhuB,mBAAK4B,SAAS5B,KAAKsW,mBAAmB0U,uBAAuB,MAAMhrB,KAAK+qB,cAAAA,QAActb,IAAW,CAAA,CAAA,GACjGzP,KAAK4B,SAAS5B,KAAKsW,mBAAmB2U,oBAAoB,MAAMjrB,KAAK+qB,cAAAA,QAActb,IAAW,CAAA,CAAA;YAChG;YAMQwe,iCAAAA;AACNjuB,mBAAK4B,SAAS5B,KAAKL,eAAewP,yBAAyB,MAAMnP,KAAK+qB,cAAAA,CAAAA,CAAAA,GACtE/qB,KAAK4B,SAAS5B,KAAK6J,eAAegP,QAAQmP,iBAAiB,MAAA;AACzDhoB,qBAAKytB,QAASrnB,MAAMqlB,UAAUzrB,KAAK6J,eAAejG,WAAW5D,KAAK6J,eAAegP,QAAQ+H,MAAM,SAAS;cAAO,CAAA,CAAA,GAEjH5gB,KAAK4B,SAAS5B,KAAK6J,eAAe3H,SAAS,MAAA;AACrClC,qBAAKwtB,2BAA2BxtB,KAAK6J,eAAegP,QAAQuV,OAAOvqB,MAAM5C,WAC3EjB,KAAKquB,4BAAAA,GACLruB,KAAKsuB,yBAAAA;cAAAA,CAAAA,CAAAA;YAGX;YAKQJ,oCAAAA;AAENluB,mBAAK4B,SAAS5B,KAAKL,eAAeoC,SAAS,MAAA;AACpC/B,qBAAKuuB,oBAAoBvuB,KAAKuuB,qBAAqBvuB,KAAKyqB,eAAe+D,iBAC1ExuB,KAAK+qB,cAAAA,IAAc,GACnB/qB,KAAKuuB,mBAAmBvuB,KAAKyqB,eAAe+D;cAAAA,CAAAA,CAAAA,GAIhDxuB,KAAK4B,SAAS5B,KAAKyQ,gBAAgB8O,uBAAuB,sBAAsB,MAAMvf,KAAK+qB,cAAAA,IAAc,CAAA,CAAA,GAEzG/qB,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBpD,KAAKmtB,mBAAmBjqB,QAAQ,UAAU,MAAMlD,KAAK+qB,cAAAA,IAAc,CAAA,CAAA,GAE1G/qB,KAAK+qB,cAAAA,IAAc;YACrB;YAEQ0D,wBAAAA;AAEN,oBAAMC,KAAa/a,KAAKuW,MAAMlqB,KAAKytB,QAAQpnB,QAAQ,CAAA,GAC7CsoB,KAAahb,KAAKib,KAAK5uB,KAAKytB,QAAQpnB,QAAQ,CAAA;AAClD4mB,gBAAUf,OAAOlsB,KAAKytB,QAAQpnB,OAC9B4mB,EAAU1lB,OAAOmnB,IACjBzB,EAAUd,SAASwC,IACnB1B,EAAUrB,QAAQ8C,IAElB1uB,KAAKquB,4BAAAA,GAELnB,EAAMhB,OAAO,GACbgB,EAAM3lB,OAAO,GACb2lB,EAAMf,SAASc,EAAU1lB,MACzB2lB,EAAMtB,QAAQqB,EAAU1lB,OAAO0lB,EAAUd;YAC3C;YAEQkC,8BAAAA;AACNrB,gBAAWd,OAAOvY,KAAKkV,MAAM,IAAI7oB,KAAKmtB,mBAAmBzE,GAAAA;AAEzD,oBAAMmG,KAAgB7uB,KAAKytB,QAAQtnB,SAASnG,KAAK6J,eAAejG,OAAOC,MAAM5C,QAEvE6tB,KAAgBnb,KAAKkV,MAAMlV,KAAKG,IAAIH,KAAKC,IAAIib,IAAe,EAAA,GAAK,CAAA,IAAK7uB,KAAKmtB,mBAAmBzE,GAAAA;AACpGsE,gBAAWzlB,OAAOunB,IAClB9B,EAAWb,SAAS2C,IACpB9B,EAAWpB,QAAQkD;YACrB;YAEQR,2BAAAA;AACNtuB,mBAAKotB,gBAAgBP,WAAW,EAC9BX,MAAMvY,KAAKuW,MAAMlqB,KAAK6J,eAAegP,QAAQC,OAAOjV,MAAM5C,UAAUjB,KAAKytB,QAAQtnB,SAAS,KAAK6mB,EAAWd,IAAAA,GAC1G3kB,MAAMoM,KAAKuW,MAAMlqB,KAAK6J,eAAegP,QAAQC,OAAOjV,MAAM5C,UAAUjB,KAAKytB,QAAQtnB,SAAS,KAAK6mB,EAAWzlB,IAAAA,GAC1G4kB,QAAQxY,KAAKuW,MAAMlqB,KAAK6J,eAAegP,QAAQC,OAAOjV,MAAM5C,UAAUjB,KAAKytB,QAAQtnB,SAAS,KAAK6mB,EAAWb,MAAAA,GAC5GP,OAAOjY,KAAKuW,MAAMlqB,KAAK6J,eAAegP,QAAQC,OAAOjV,MAAM5C,UAAUjB,KAAKytB,QAAQtnB,SAAS,KAAK6mB,EAAWpB,KAAAA,EAAAA,CAAAA,GAE7G5rB,KAAKwtB,yBAAyBxtB,KAAK6J,eAAegP,QAAQuV,OAAOvqB,MAAM5C;YACzE;YAEQysB,2BAAAA;AACN1tB,mBAAKytB,QAAQrnB,MAAMC,QAAQ,GAAGrG,KAAKmuB,YACnCnuB,KAAKytB,QAAQpnB,QAAQsN,KAAKkV,MAAM7oB,KAAKmuB,SAASnuB,KAAKmtB,mBAAmBzE,GAAAA,GACtE1oB,KAAKytB,QAAQrnB,MAAMD,SAAS,GAAGnG,KAAKyqB,eAAe+D,kBACnDxuB,KAAKytB,QAAQtnB,SAASwN,KAAKkV,MAAM7oB,KAAKyqB,eAAe+D,eAAexuB,KAAKmtB,mBAAmBzE,GAAAA,GAC5F1oB,KAAKyuB,sBAAAA,GACLzuB,KAAKsuB,yBAAAA;YACP;YAEQS,sBAAAA;AACF/uB,mBAAKstB,2BACPttB,KAAK0tB,yBAAAA,GAEP1tB,KAAK+tB,KAAKiB,UAAU,GAAG,GAAGhvB,KAAKytB,QAAQpnB,OAAOrG,KAAKytB,QAAQtnB,MAAAA,GAC3DnG,KAAKotB,gBAAgBpkB,MAAAA;AACrB,yBAAWkiB,MAAclrB,KAAKsW,mBAAmB7H;AAC/CzO,qBAAKotB,gBAAgBf,cAAcnB,EAAAA;AAErClrB,mBAAK+tB,KAAKkB,YAAY;AACtB,oBAAM7C,KAAQpsB,KAAKotB,gBAAgBhB;AACnC,yBAAWW,MAAQX;AACK,2BAAlBW,GAAKxpB,YACPvD,KAAKkvB,iBAAiBnC,EAAAA;AAG1B,yBAAWA,MAAQX;AACK,2BAAlBW,GAAKxpB,YACPvD,KAAKkvB,iBAAiBnC,EAAAA;AAG1B/sB,mBAAKstB,0BAAAA,OACLttB,KAAKutB,sBAAAA;YACP;YAEQ2B,iBAAiBnC,IAAAA;AACvB/sB,mBAAK+tB,KAAKoB,YAAYpC,GAAKhV,OAC3B/X,KAAK+tB,KAAKqB,SACAlC,EAAMH,GAAKxpB,YAAY,MAAA,GACvBoQ,KAAKkV,OACV7oB,KAAKytB,QAAQtnB,SAAS,MACtB4mB,GAAKJ,kBAAkB3sB,KAAK6J,eAAegP,QAAQC,OAAOjV,MAAM5C,UAAU+rB,EAAWD,GAAKxpB,YAAY,MAAA,IAAU,CAAA,GAE3G0pB,EAAUF,GAAKxpB,YAAY,MAAA,GAC3BoQ,KAAKkV,OACV7oB,KAAKytB,QAAQtnB,SAAS,OACrB4mB,GAAKH,gBAAgBG,GAAKJ,mBAAmB3sB,KAAK6J,eAAegP,QAAQC,OAAOjV,MAAM5C,UAAU+rB,EAAWD,GAAKxpB,YAAY,MAAA,CAAA,CAAA;YAGpI;YAEQwnB,cAAcsE,IAAkCC,IAAAA;AACtDtvB,mBAAKstB,0BAA0B+B,MAA0BrvB,KAAKstB,yBAC9DttB,KAAKutB,sBAAsB+B,MAAgBtvB,KAAKutB,qBAAAA,WAC5CvtB,KAAKiT,oBAGTjT,KAAKiT,kBAAkBjT,KAAKmtB,mBAAmBjqB,OAAOkQ,sBAAsB,MAAA;AAC1EpT,qBAAK+uB,oBAAAA,GACL/uB,KAAKiT,kBAAAA;cAA2B,CAAA;YAEpC;UAAA;AAzLWyM,cAAqBpgB,GAAA,CAkB7B,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAAmG,kBAAAA,GACA,EAAA,GAAA,EAAA2G,cAAAA,GACA,EAAA,GAAA,EAAAxK,eAAAA,GACA,EAAA,GAAA,EAAA8J,mBAAAA,CAAAA,GAtBQgD,CAAAA,GAAArgB,GAAAqgB,wBAAAA;QAAAA,GAAAA,MAAAA,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,cAAAA,KAAAA,QAAAA,KAAAA,cAAAA,SAAAA,IAAAA,IAAAA,IAAAA,IAAAA;AAAAA,gBAAAA,IAAAA,KAAAA,UAAAA,QAAAA,KAAAA,KAAAA,IAAAA,KAAAA,SAAAA,KAAAA,KAAAA,OAAAA,yBAAAA,IAAAA,EAAAA,IAAAA;AAAAA,gBAAAA,YAAAA,OAAAA,WAAAA,cAAAA,OAAAA,QAAAA;AAAAA,cAAAA,KAAAA,QAAAA,SAAAA,IAAAA,IAAAA,IAAAA,EAAAA;;AAAAA,uBAAAA,KAAAA,GAAAA,SAAAA,GAAAA,MAAAA,GAAAA;AAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,OAAAA,MAAAA,KAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,MAAAA;AAAAA,mBAAAA,KAAAA,KAAAA,MAAAA,OAAAA,eAAAA,IAAAA,IAAAA,EAAAA,GAAAA;UAAAA,GAAAA,IAAAA,QAAAA,KAAAA,WAAAA,SAAAA,IAAAA,IAAAA;AAAAA,mBAAAA,SAAAA,IAAAA,IAAAA;AAAAA,cAAAA,GAAAA,IAAAA,IAAAA,EAAAA;YAAAA;UAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,oBAAAA;AC3Bb,gBAAA,IAAAxgB,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAYA,cAAaqe,IAAb,MAAA;YAwBE9d,YACmB8vB,IACAjS,IACgBzT,IACC4G,IACH+e,IACE7vB,IAAAA;AALhB,mBAAA4vB,YAAAA,IACA,KAAAjS,mBAAAA,IACgB,KAAAzT,iBAAAA,IACC,KAAA4G,kBAAAA,IACH,KAAA+e,eAAAA,IACE,KAAA7vB,iBAAAA,IAEjCK,KAAKyvB,eAAAA,OACLzvB,KAAK0vB,wBAAAA,OACL1vB,KAAK2vB,uBAAuB,EAAE3tB,OAAO,GAAGC,KAAK,EAAA,GAC7CjC,KAAK4vB,mBAAmB;YAC1B;YA9BWjW,IAAAA,cAAAA;AAAyB,qBAAO3Z,KAAKyvB;YAAc;YAmCvDpU,mBAAAA;AACLrb,mBAAKyvB,eAAAA,MACLzvB,KAAK2vB,qBAAqB3tB,QAAQhC,KAAKuvB,UAAUtoB,MAAMhG,QACvDjB,KAAKsd,iBAAiBvY,cAAc,IACpC/E,KAAK4vB,mBAAmB,IACxB5vB,KAAKsd,iBAAiBld,UAAUC,IAAI,QAAA;YACtC;YAMOib,kBAAkBnU,IAAAA;AACvBnH,mBAAKsd,iBAAiBvY,cAAcoC,GAAG6a,MACvChiB,KAAKyb,0BAAAA,GACLrW,WAAW,MAAA;AACTpF,qBAAK2vB,qBAAqB1tB,MAAMjC,KAAKuvB,UAAUtoB,MAAMhG;cAAM,GAC1D,CAAA;YACL;YAMOsa,iBAAAA;AACLvb,mBAAK6vB,qBAAAA,IAAqB;YAC5B;YAOO7L,QAAQ7c,IAAAA;AACb,kBAAInH,KAAKyvB,gBAAgBzvB,KAAK0vB,uBAAuB;AACnD,oBAAmB,QAAfvoB,GAAG2d;AAEL,yBAAA;AAEF,oBAAmB,OAAf3d,GAAG2d,WAAiC,OAAf3d,GAAG2d,WAAiC,OAAf3d,GAAG2d;AAE/C,yBAAA;AAIF9kB,qBAAK6vB,qBAAAA,KAAqB;cAAA;AAG5B,qBAAmB,QAAf1oB,GAAG2d,YAGL9kB,KAAK8vB,0BAAAA,GAAAA;YAKT;YAUQD,qBAAqBE,IAAAA;AAI3B,kBAHA/vB,KAAKsd,iBAAiBld,UAAUuP,OAAO,QAAA,GACvC3P,KAAKyvB,eAAAA,OAEAM,IAKE;AAGL,sBAAMC,KAA6B,EACjChuB,OAAOhC,KAAK2vB,qBAAqB3tB,OACjCC,KAAKjC,KAAK2vB,qBAAqB1tB,IAAAA;AAWjCjC,qBAAK0vB,wBAAAA,MACLtqB,WAAW,MAAA;AAET,sBAAIpF,KAAK0vB,uBAAuB;AAE9B,wBAAIO;AADJjwB,yBAAK0vB,wBAAAA,OAILM,GAA2BhuB,SAAShC,KAAK4vB,iBAAiB3uB,QAGxDgvB,KAFEjwB,KAAKyvB,eAECzvB,KAAKuvB,UAAUtoB,MAAMipB,UAAUF,GAA2BhuB,OAAOguB,GAA2B/tB,GAAAA,IAK5FjC,KAAKuvB,UAAUtoB,MAAMipB,UAAUF,GAA2BhuB,KAAAA,GAEhEiuB,GAAMhvB,SAAS,KACjBjB,KAAKwvB,aAAaxoB,iBAAiBipB,IAAAA,IAAO;kBAAA;gBAAA,GAG7C,CAAA;cAAA,OA3CoB;AAEvBjwB,qBAAK0vB,wBAAAA;AACL,sBAAMO,KAAQjwB,KAAKuvB,UAAUtoB,MAAMipB,UAAUlwB,KAAK2vB,qBAAqB3tB,OAAOhC,KAAK2vB,qBAAqB1tB,GAAAA;AACxGjC,qBAAKwvB,aAAaxoB,iBAAiBipB,IAAAA,IAAO;cAAA;YAyC9C;YAQQH,4BAAAA;AACN,oBAAMK,KAAWnwB,KAAKuvB,UAAUtoB;AAChC7B,yBAAW,MAAA;AAET,oBAAA,CAAKpF,KAAKyvB,cAAc;AACtB,wBAAMW,KAAWpwB,KAAKuvB,UAAUtoB,OAE1B+hB,KAAOoH,GAAS3pB,QAAQ0pB,IAAU,EAAA;AAExCnwB,uBAAK4vB,mBAAmB5G,IAEpBoH,GAASnvB,SAASkvB,GAASlvB,SAC7BjB,KAAKwvB,aAAaxoB,iBAAiBgiB,IAAAA,IAAM,IAChCoH,GAASnvB,SAASkvB,GAASlvB,SACpCjB,KAAKwvB,aAAaxoB,iBAAiB,GAAG,EAAAmR,GAAGkY,OAAAA,IAAO,IACtCD,GAASnvB,WAAWkvB,GAASlvB,UAAYmvB,OAAaD,MAChEnwB,KAAKwvB,aAAaxoB,iBAAiBopB,IAAAA,IAAU;gBAAA;cAAA,GAIhD,CAAA;YACL;YAQO3U,0BAA0B6U,IAAAA;AAC/B,kBAAKtwB,KAAKyvB,cAAV;AAIA,oBAAIzvB,KAAK6J,eAAejG,OAAO6V,oBAAoB;AACjD,wBAAMM,KAAUpG,KAAKC,IAAI5T,KAAK6J,eAAejG,OAAOkI,GAAG9L,KAAK6J,eAAe6D,OAAO,CAAA,GAE5EsM,KAAaha,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,QACrDgU,KAAYna,KAAK6J,eAAejG,OAAOmI,IAAI/L,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,QACnFiU,KAAaL,KAAU/Z,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG;AAErErG,uBAAKsd,iBAAiBlX,MAAMmB,OAAO6S,KAAa,MAChDpa,KAAKsd,iBAAiBlX,MAAMqB,MAAM0S,KAAY,MAC9Cna,KAAKsd,iBAAiBlX,MAAMD,SAAS6T,KAAa,MAClDha,KAAKsd,iBAAiBlX,MAAMiU,aAAaL,KAAa,MACtDha,KAAKsd,iBAAiBlX,MAAMmqB,aAAavwB,KAAKyQ,gBAAgBM,WAAWwf,YACzEvwB,KAAKsd,iBAAiBlX,MAAMoqB,WAAWxwB,KAAKyQ,gBAAgBM,WAAWyf,WAAW;AAGlF,wBAAMC,KAAwBzwB,KAAKsd,iBAAiBhW,sBAAAA;AACpDtH,uBAAKuvB,UAAUnpB,MAAMmB,OAAO6S,KAAa,MACzCpa,KAAKuvB,UAAUnpB,MAAMqB,MAAM0S,KAAY,MAEvCna,KAAKuvB,UAAUnpB,MAAMC,QAAQsN,KAAKG,IAAI2c,GAAsBpqB,OAAO,CAAA,IAAK,MACxErG,KAAKuvB,UAAUnpB,MAAMD,SAASwN,KAAKG,IAAI2c,GAAsBtqB,QAAQ,CAAA,IAAK,MAC1EnG,KAAKuvB,UAAUnpB,MAAMiU,aAAaoW,GAAsBtqB,SAAS;gBAAA;AAG9DmqB,gBAAAA,MACHlrB,WAAW,MAAMpF,KAAKyb,0BAAAA,IAA0B,GAAO,CAAA;cAAA;YAE3D;UAAA;AAjOW8B,cAAiBje,GAAA,CA2BzB,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAAsC,eAAAA,GACA,EAAA,GAAA,EAAA8d,YAAAA,GACA,EAAA,GAAA,EAAAtT,cAAAA,CAAAA,GA9BQG,CAAAA,GAAAle,GAAAke,oBAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;ACdb,mBAAgBoT,GAA2BztB,IAA0CmH,IAA2C5I,IAAAA;AAC9H,kBAAMmvB,KAAOnvB,GAAQ6F,sBAAAA,GACfupB,IAAe3tB,GAAO4tB,iBAAiBrvB,EAAAA,GACvCsvB,IAAcC,SAASH,EAAaI,iBAAiB,cAAA,CAAA,GACrDC,IAAaF,SAASH,EAAaI,iBAAiB,aAAA,CAAA;AAC1D,mBAAO,CACL5mB,GAAM7C,UAAUopB,GAAKrpB,OAAOwpB,GAC5B1mB,GAAM3C,UAAUkpB,GAAKnpB,MAAMypB,CAAAA;UAE/B;AAAA,iBAAA,eAAA7xB,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,YAAAA,GAAA,6BAAA,QATAA,GAAA,6BAAAH,IA2BAG,GAAA,YAAA,SAA0B6D,IAA0CmH,IAAgD5I,IAAsB0vB,GAAkB3d,GAAkB4d,GAA2BC,GAAsBC,GAAuBC,GAAAA;AAEpP,gBAAA,CAAKH;AACH;AAGF,kBAAMphB,IAAS2gB,GAA2BztB,IAAQmH,IAAO5I,EAAAA;AACzD,mBAAKuO,KAILA,EAAO,CAAA,IAAK2D,KAAKib,MAAM5e,EAAO,CAAA,KAAMuhB,IAAcF,IAAe,IAAI,MAAMA,CAAAA,GAC3ErhB,EAAO,CAAA,IAAK2D,KAAKib,KAAK5e,EAAO,CAAA,IAAKshB,CAAAA,GAKlCthB,EAAO,CAAA,IAAK2D,KAAKC,IAAID,KAAKG,IAAI9D,EAAO,CAAA,GAAI,CAAA,GAAImhB,KAAYI,IAAc,IAAI,EAAA,GAC3EvhB,EAAO,CAAA,IAAK2D,KAAKC,IAAID,KAAKG,IAAI9D,EAAO,CAAA,GAAI,CAAA,GAAIwD,CAAAA,GAEtCxD,KAAAA;UACT;QAAA,GAAA,MAAA,CAAA5Q,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,qBAAA;AChDA,gBAAAC,KAAAJ,GAAA,IAAA;AAyEA,mBAASsyB,EAAmBC,IAAgBC,IAAiBC,IAA+BC,IAAAA;AAC1F,kBAAMxjB,KAAWqjB,KAASI,EAAkBJ,IAAQE,EAAAA,GAC9CtjB,KAASqjB,KAAUG,EAAkBH,IAASC,EAAAA,GAE9CG,IAAane,KAAKsO,IAAI7T,KAAWC,EAAAA,IAiCzC,SAA0BojB,IAAgBC,IAAiBC,IAAAA;AACzD,kBAAII,KAAc;AAClB,oBAAM3jB,KAAWqjB,KAASI,EAAkBJ,IAAQE,EAAAA,GAC9CtjB,KAASqjB,KAAUG,EAAkBH,IAASC,EAAAA;AAEpD,uBAASzyB,KAAI,GAAGA,KAAIyU,KAAKsO,IAAI7T,KAAWC,EAAAA,GAASnP,MAAK;AACpD,sBAAM8yB,KAAmD,QAAvCC,EAAkBR,IAAQC,EAAAA,IAAAA,KAAiC,GACvE9gB,KAAO+gB,GAAc/tB,OAAOC,MAAMgF,IAAIuF,KAAY4jB,KAAY9yB,EAAAA;AAAAA,iBAChE0R,QAAAA,KAAAA,SAAAA,GAAMshB,cACRH;cAAAA;AAIJ,qBAAOA;YACT,EA/CoEN,IAAQC,IAASC,EAAAA;AAEnF,mBAAOQ,EAAOL,GAAYhQ,EAASmQ,EAAkBR,IAAQC,EAAAA,GAAUE,EAAAA,CAAAA;UACzE;AAkDA,mBAASC,EAAkBO,IAAoBT,IAAAA;AAC7C,gBAAIne,KAAW,GACX5C,KAAO+gB,GAAc/tB,OAAOC,MAAMgF,IAAIupB,EAAAA,GACtCC,KAAYzhB,QAAAA,KAAAA,SAAAA,GAAMshB;AAEtB,mBAAOG,MAAaD,MAAc,KAAKA,KAAaT,GAAcjxB;AAChE8S,cAAAA,MACA5C,KAAO+gB,GAAc/tB,OAAOC,MAAMgF,IAAAA,EAAMupB,EAAAA,GACxCC,KAAYzhB,QAAAA,KAAAA,SAAAA,GAAMshB;AAGpB,mBAAO1e;UACT;AA6BA,mBAASye,EAAkBR,IAAgBC,IAAAA;AACzC,mBAAOD,KAASC,KAAU,MAAe;UAC3C;AAWA,mBAAS5X,EACPwY,IACAlkB,IACAmkB,IACAlkB,IACAmkB,IACAb,IAAAA;AAEA,gBAAIc,KAAaH,IACbF,KAAahkB,IACbskB,KAAY;AAEhB,mBAAOD,OAAeF,MAAUH,OAAe/jB;AAC7CokB,cAAAA,MAAcD,KAAU,IAAA,IAEpBA,MAAWC,KAAad,GAAcjkB,OAAO,KAC/CglB,MAAaf,GAAc/tB,OAAO+B,4BAChCysB,IAAAA,OAAmBE,IAAUG,EAAAA,GAE/BA,KAAa,GACbH,KAAW,GACXF,QAAAA,CACUI,MAAWC,KAAa,MAClCC,MAAaf,GAAc/tB,OAAO+B,4BAChCysB,IAAAA,OAAmB,GAAGE,KAAW,CAAA,GAEnCG,KAAad,GAAcjkB,OAAO,GAClC4kB,KAAWG,IACXL;AAIJ,mBAAOM,KAAYf,GAAc/tB,OAAO+B,4BACtCysB,IAAAA,OAAmBE,IAAUG,EAAAA;UAEjC;AAMA,mBAAS3Q,EAASkQ,IAAsBJ,IAAAA;AACtC,kBAAMe,KAAOf,KAAoB,MAAM;AACvC,mBAAOtyB,GAAA6Y,GAAGC,MAAMua,KAAMX;UACxB;AAQA,mBAASG,EAAOS,IAAeC,IAAAA;AAC7BD,YAAAA,KAAQjf,KAAKuW,MAAM0I,EAAAA;AACnB,gBAAIE,KAAM;AACV,qBAAS5zB,KAAI,GAAGA,KAAI0zB,IAAO1zB;AACzB4zB,cAAAA,MAAOD;AAET,mBAAOC;UACT;AApOA,UAAAzzB,GAAA,qBAAA,SAAmC0zB,IAAiBrB,IAAiBC,IAA+BC,IAAAA;AAClG,kBAAMrkB,KAASokB,GAAc/tB,OAAOkI,GAC9B2lB,IAASE,GAAc/tB,OAAOmI;AAGpC,gBAAA,CAAK4lB,GAAc/tB,OAAOie;AACxB,qBAsCJ,SAA0BtU,IAAgBkkB,IAAgBsB,IAAiBrB,IAAiBC,IAA+BC,IAAAA;AACzH,uBAAqF,MAAjFJ,EAAmBC,IAAQC,IAASC,IAAeC,EAAAA,EAAmB3wB,SACjE,KAEFkxB,EAAOrY,EACZvM,IAAQkkB,IAAQlkB,IAChBkkB,KAASI,EAAkBJ,IAAQE,EAAAA,GAAAA,OAAuBA,EAAAA,EAC1D1wB,QAAQ6gB,EAAS,KAAgB8P,EAAAA,CAAAA;cACrC,EA9C4BrkB,IAAQkkB,GAAQsB,GAASrB,IAASC,IAAeC,EAAAA,IACvEJ,EAAmBC,GAAQC,IAASC,IAAeC,EAAAA,IA+DzD,SAA4BrkB,IAAgBkkB,IAAgBsB,IAAiBrB,IAAiBC,IAA+BC,IAAAA;AAC3H,oBAAIxjB;AAEFA,gBAAAA,KADEojB,EAAmBC,IAAQC,IAASC,IAAeC,EAAAA,EAAmB3wB,SAAS,IACtEywB,KAAUG,EAAkBH,IAASC,EAAAA,IAErCF;AAGb,sBAAMpjB,KAASqjB,IACTM,IAyDR,SAA6BzkB,IAAgBkkB,IAAgBsB,IAAiBrB,IAAiBC,IAA+BC,IAAAA;AAC5H,sBAAIxjB;AAOJ,yBALEA,KADEojB,EAAmBuB,IAASrB,IAASC,IAAeC,EAAAA,EAAmB3wB,SAAS,IACvEywB,KAAUG,EAAkBH,IAASC,EAAAA,IAErCF,IAGRlkB,KAASwlB,MACZ3kB,MAAYsjB,MACXnkB,MAAUwlB,MACX3kB,KAAWsjB,KACJ,MAEF;gBACT,EAxEwCnkB,IAAQkkB,IAAQsB,IAASrB,IAASC,IAAeC,EAAAA;AAEvF,uBAAOO,EAAOrY,EACZvM,IAAQa,IAAU2kB,IAAS1kB,IACb,QAAd2jB,GAA+BL,EAAAA,EAC/B1wB,QAAQ6gB,EAASkQ,GAAWJ,EAAAA,CAAAA;cAChC,EA7EyBrkB,IAAQkkB,GAAQsB,IAASrB,IAASC,IAAeC,EAAAA;AAIxE,gBAAII;AACJ,gBAAIP,MAAWC;AAEb,qBADAM,IAAYzkB,KAASwlB,KAAU,MAAiB,KACzCZ,EAAOxe,KAAKsO,IAAI1U,KAASwlB,EAAAA,GAAUjR,EAASkQ,GAAWJ,EAAAA,CAAAA;AAEhEI,gBAAYP,IAASC,KAAU,MAAiB;AAChD,kBAAMsB,IAAgBrf,KAAKsO,IAAIwP,IAASC,EAAAA;AAIxC,mBAAOS,EAaT,SAAwBc,IAAetB,IAAAA;AACrC,qBAAOA,GAAcjkB,OAAOulB;YAC9B,EAlBqCxB,IAASC,KAAUqB,KAAUxlB,IAAQokB,EAAAA,KACrEqB,IAAgB,KAAKrB,GAAcjkB,OAAO,MACtB+jB,IAASC,KAAUnkB,KAASwlB,MAQpC,IAPYjR,EAASkQ,GAAWJ,EAAAA,CAAAA;UACjD;QAAA,GAAA,MAAA,SAAAxyB,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,cAAA;ACtCA,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAEMg0B,IAAwB,6BAIxBC,IAAc;AAGpB,cAAIC,IAAiB,GAORvT,IAAb,cAAiC,EAAArgB,WAAAA;YAe/BC,YACmB2L,IACAqf,IACAtO,IACAkX,IACMC,IACY3W,IACDlM,IACD5G,IACK0S,IACvBuK,IAAAA;AAEflnB,oBAAAA,GAXiB,KAAAwL,WAAAA,IACA,KAAAqf,iBAAAA,IACA,KAAAtO,mBAAAA,IACA,KAAAkX,cAAAA,IAEkB,KAAA1W,mBAAAA,IACD,KAAAlM,kBAAAA,IACD,KAAA5G,iBAAAA,IACK,KAAA0S,sBAAAA,IAtBhC,KAAAgX,iBAAyBH,KAKzB,KAAA3yB,eAA8B,CAAA,GAE9B,KAAA+yB,qBAAmC,CAAA,GAI3B,KAAA9U,kBAAkB1e,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,EAAqCE,OAevFrK,KAAKO,gBAAgBL,SAASC,cAAc,KAAA,GAC5CH,KAAKO,cAAcH,UAAUC,IA1CL,YAAA,GA2CxBL,KAAKO,cAAc6F,MAAMiU,aAAa,UACtCra,KAAKO,cAAcC,aAAa,eAAe,MAAA,GAC/CR,KAAKyzB,oBAAoBzzB,KAAK6J,eAAe6D,MAAM1N,KAAK6J,eAAenJ,IAAAA,GACvEV,KAAK0zB,sBAAsBxzB,SAASC,cAAc,KAAA,GAClDH,KAAK0zB,oBAAoBtzB,UAAUC,IA3Cf,iBAAA,GA4CpBL,KAAK0zB,oBAAoBlzB,aAAa,eAAe,MAAA,GAErDR,KAAKgG,cAAa,GAAA,EAAA2tB,wBAAAA,GAClB3zB,KAAK4zB,kBAAAA,GACL5zB,KAAK4B,SAAS5B,KAAKyQ,gBAAgBojB,eAAe,MAAM7zB,KAAK8zB,sBAAAA,CAAAA,CAAAA,GAE7D9zB,KAAK4B,SAASklB,GAAasB,eAAehpB,CAAAA,OAAKY,KAAK+zB,WAAW30B,EAAAA,CAAAA,CAAAA,GAC/DY,KAAK+zB,WAAWjN,GAAa7O,MAAAA,GAE7BjY,KAAKg0B,cAAcV,GAAqBjd,eAAe,EAAA4d,uBAAuB/zB,QAAAA,GAE9EF,KAAKoL,SAAShL,UAAUC,IAAI6yB,IAAwBlzB,KAAKuzB,cAAAA,GACzDvzB,KAAKyqB,eAAe7pB,YAAYZ,KAAKO,aAAAA,GACrCP,KAAKyqB,eAAe7pB,YAAYZ,KAAK0zB,mBAAAA,GAErC1zB,KAAK4B,SAAS5B,KAAKqzB,YAAYjpB,oBAAoBhL,CAAAA,OAAKY,KAAKk0B,iBAAiB90B,EAAAA,CAAAA,CAAAA,GAC9EY,KAAK4B,SAAS5B,KAAKqzB,YAAY9oB,oBAAoBnL,CAAAA,OAAKY,KAAKm0B,iBAAiB/0B,EAAAA,CAAAA,CAAAA,GAE9EY,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AACzBrD,qBAAKoL,SAAShL,UAAUuP,OAAOujB,IAAwBlzB,KAAKuzB,cAAAA,IAI5D,GAAA,EAAAjwB,yBAAwBtD,KAAKO,eAAeP,KAAK0zB,qBAAqB1zB,KAAKo0B,oBAAoBp0B,KAAKq0B,uBAAAA;cAAwB,CAAA,CAAA;YAEhI;YAEQT,oBAAAA;AACN,oBAAMlL,KAAM1oB,KAAKuc,oBAAoBmM;AACrC1oB,mBAAKgG,WAAWyiB,OAAOrmB,KAAKiE,QAAQrG,KAAK2c,iBAAiBtW,QAAQqiB,IAClE1oB,KAAKgG,WAAWyiB,OAAOrmB,KAAK+D,SAASwN,KAAKib,KAAK5uB,KAAK2c,iBAAiBxW,SAASuiB,EAAAA,GAC9E1oB,KAAKgG,WAAWyiB,OAAOviB,KAAKG,QAAQrG,KAAKgG,WAAWyiB,OAAOrmB,KAAKiE,QAAQsN,KAAKkV,MAAM7oB,KAAKyQ,gBAAgBM,WAAWujB,aAAAA,GACnHt0B,KAAKgG,WAAWyiB,OAAOviB,KAAKC,SAASwN,KAAKuW,MAAMlqB,KAAKgG,WAAWyiB,OAAOrmB,KAAK+D,SAASnG,KAAKyQ,gBAAgBM,WAAWsJ,UAAAA,GACrHra,KAAKgG,WAAWyiB,OAAOrmB,KAAKmF,OAAO,GACnCvH,KAAKgG,WAAWyiB,OAAOrmB,KAAKqF,MAAM,GAClCzH,KAAKgG,WAAWyiB,OAAOniB,OAAOD,QAAQrG,KAAKgG,WAAWyiB,OAAOviB,KAAKG,QAAQrG,KAAK6J,eAAe6D,MAC9F1N,KAAKgG,WAAWyiB,OAAOniB,OAAOH,SAASnG,KAAKgG,WAAWyiB,OAAOviB,KAAKC,SAASnG,KAAK6J,eAAenJ,MAChGV,KAAKgG,WAAWC,IAAIK,OAAOD,QAAQsN,KAAKkV,MAAM7oB,KAAKgG,WAAWyiB,OAAOniB,OAAOD,QAAQqiB,EAAAA,GACpF1oB,KAAKgG,WAAWC,IAAIK,OAAOH,SAASwN,KAAKkV,MAAM7oB,KAAKgG,WAAWyiB,OAAOniB,OAAOH,SAASuiB,EAAAA,GACtF1oB,KAAKgG,WAAWC,IAAIC,KAAKG,QAAQrG,KAAKgG,WAAWC,IAAIK,OAAOD,QAAQrG,KAAK6J,eAAe6D,MACxF1N,KAAKgG,WAAWC,IAAIC,KAAKC,SAASnG,KAAKgG,WAAWC,IAAIK,OAAOH,SAASnG,KAAK6J,eAAenJ;AAE1F,yBAAWe,MAAWzB,KAAKS;AACzBgB,gBAAAA,GAAQ2E,MAAMC,QAAQ,GAAGrG,KAAKgG,WAAWC,IAAIK,OAAOD,WACpD5E,GAAQ2E,MAAMD,SAAS,GAAGnG,KAAKgG,WAAWC,IAAIC,KAAKC,YACnD1E,GAAQ2E,MAAMiU,aAAa,GAAGra,KAAKgG,WAAWC,IAAIC,KAAKC,YAEvD1E,GAAQ2E,MAAMmuB,WAAW;AAGtBv0B,mBAAKq0B,4BACRr0B,KAAKq0B,0BAA0Bn0B,SAASC,cAAc,OAAA,GACtDH,KAAKyqB,eAAe7pB,YAAYZ,KAAKq0B,uBAAAA;AAGvC,oBAAMG,KACJ,GAAGx0B,KAAKy0B,yGAIGz0B,KAAKgG,WAAWC,IAAIC,KAAKG;AAGtCrG,mBAAKq0B,wBAAwBtvB,cAAcyvB,IAE3Cx0B,KAAK0zB,oBAAoBttB,MAAMD,SAASnG,KAAKmc,iBAAiB/V,MAAMD,QACpEnG,KAAKyqB,eAAerkB,MAAMC,QAAQ,GAAGrG,KAAKgG,WAAWC,IAAIK,OAAOD,WAChErG,KAAKyqB,eAAerkB,MAAMD,SAAS,GAAGnG,KAAKgG,WAAWC,IAAIK,OAAOH;YACnE;YAEQ4tB,WAAW9b,IAAAA;AACZjY,mBAAKo0B,uBACRp0B,KAAKo0B,qBAAqBl0B,SAASC,cAAc,OAAA,GACjDH,KAAKyqB,eAAe7pB,YAAYZ,KAAKo0B,kBAAAA;AAIvC,kBAAII,KACF,GAAGx0B,KAAKy0B,0CACGxc,GAAOyc,WAAWzuB,qBACZjG,KAAKyQ,gBAAgBM,WAAWwf,0BAClCvwB,KAAKyQ,gBAAgBM,WAAWyf;AAGjDgE,cAAAA,MACE,GAAGx0B,KAAKy0B,+BAA+B,EAAAE,8BACtB30B,KAAKyQ,gBAAgBM,WAAW6jB,eAE9C50B,KAAKy0B,0BAA0B,EAAAE,6BACjB30B,KAAKyQ,gBAAgBM,WAAW8jB,mBAE9C70B,KAAKy0B,0BAA0B,EAAAK,uCAIpCN,MACE,iCAAsCx0B,KAAKuzB,iBAA3C,kCAKFiB,MACE,4BAAiCx0B,KAAKuzB,iBAAtC,8BAEuBtb,GAAO8c,OAAO9uB,gBACzBgS,GAAO+c,aAAa/uB,mCAGTgS,GAAO+c,aAAa/uB,gBAC/BgS,GAAO8c,OAAO9uB,WAI5BuuB,MACE,GAAGx0B,KAAKy0B,oDAAmE,EAAAQ,gBAAgB,EAAAC,iDACpEjd,GAAO8c,OAAO9uB,8BAGlCjG,KAAKy0B,8CAA6D,EAAAQ,gBAAgB,EAAAE,2BAA2B,EAAAD,6DACzEl1B,KAAKuzB,iBAL5C,0BAOGvzB,KAAKy0B,8CAA6D,EAAAQ,gBAAgB,EAAAE,sBAAsB,EAAAD,uDACzEl1B,KAAKuzB,iBARvC,0BAUGvzB,KAAKy0B,8CAA6D,EAAAQ,gBAAgB,EAAAC,gDAC/Djd,GAAO8c,OAAO9uB,eACzBgS,GAAO+c,aAAa/uB,QAE5BjG,KAAKy0B,kCAA8C,EAAAQ,gBAAgB,EAAAG,wCACtDp1B,KAAKyQ,gBAAgBM,WAAWskB,qBAAqBpd,GAAO8c,OAAO9uB,cAEhFjG,KAAKy0B,kCAA8C,EAAAQ,gBAAgB,EAAAK,uDAC7Crd,GAAO8c,OAAO9uB,eAGzCuuB,MACE,GAAGx0B,KAAKy0B,+GAOLz0B,KAAKy0B,wFAEcxc,GAAOsd,0BAA0BtvB,QAEpDjG,KAAKy0B,kFAEcxc,GAAOud,kCAAkCvvB;AAGjE,yBAAK,CAAO/G,IAAGyuB,EAAAA,KAAM1V,GAAOC,KAAKvL,QAAAA;AAC/B6nB,gBAAAA,MACE,GAAGx0B,KAAKy0B,+BAAwCv1B,eAAcyuB,GAAE1nB,SAC7DjG,KAAKy0B,+BAAwCv1B,0BAAyByuB,GAAE1nB;AAE/EuuB,cAAAA,MACE,GAAGx0B,KAAKy0B,+BAAwC,EAAAgB,mCAAmC,EAAA1d,MAAM2d,OAAOzd,GAAOqQ,UAAAA,EAAYriB,SAChHjG,KAAKy0B,+BAAwC,EAAAgB,8CAA8Cxd,GAAOyc,WAAWzuB,UAElHjG,KAAKo0B,mBAAmBrvB,cAAcyvB;YACxC;YAEOmB,+BAAAA;AACL31B,mBAAK4zB,kBAAAA;YACP;YAEQH,oBAAoB/lB,IAAchN,IAAAA;AAExC,uBAASxB,KAAIc,KAAKS,aAAaQ,QAAQ/B,MAAKwB,IAAMxB,MAAK;AACrD,sBAAMuhB,KAAMvgB,SAASC,cAAc,KAAA;AACnCH,qBAAKO,cAAcK,YAAY6f,EAAAA,GAC/BzgB,KAAKS,aAAa8D,KAAKkc,EAAAA;cAAAA;AAGzB,qBAAOzgB,KAAKS,aAAaQ,SAASP;AAChCV,qBAAKO,cAAc2D,YAAYlE,KAAKS,aAAawD,IAAAA,CAAAA;YAErD;YAEOka,aAAazQ,IAAchN,IAAAA;AAChCV,mBAAKyzB,oBAAoB/lB,IAAMhN,EAAAA,GAC/BV,KAAK4zB,kBAAAA;YACP;YAEOgC,wBAAAA;AACL51B,mBAAK4zB,kBAAAA;YACP;YAEOxV,aAAAA;AACLpe,mBAAKO,cAAcH,UAAUuP,OAAOwjB,CAAAA;YACtC;YAEO9U,cAAAA;AACLre,mBAAKO,cAAcH,UAAUC,IAAI8yB,CAAAA;YACnC;YAEOxU,uBAAuB3c,IAAqCC,IAAmC2c,IAAAA;AAEpG,qBAAO5e,KAAK0zB,oBAAoB9uB,SAAS3D;AACvCjB,qBAAK0zB,oBAAoBxvB,YAAYlE,KAAK0zB,oBAAoB9uB,SAAS,CAAA,CAAA;AAOzE,kBAJA5E,KAAKg0B,YAAYrV,uBAAuB3c,IAAOC,IAAK2c,EAAAA,GACpD5e,KAAK61B,WAAW,GAAG71B,KAAK6J,eAAenJ,OAAO,CAAA,GAAA,CAGzCsB,MAAAA,CAAUC;AACb;AAIF,oBAAM6zB,KAAmB9zB,GAAM,CAAA,IAAKhC,KAAK6J,eAAejG,OAAOgC,OACzDmwB,KAAiB9zB,GAAI,CAAA,IAAKjC,KAAK6J,eAAejG,OAAOgC,OACrDowB,KAAyBriB,KAAKG,IAAIgiB,IAAkB,CAAA,GACpDG,KAAuBtiB,KAAKC,IAAImiB,IAAgB/1B,KAAK6J,eAAenJ,OAAO,CAAA;AAGjF,kBAAIs1B,MAA0Bh2B,KAAK6J,eAAenJ,QAAQu1B,KAAuB;AAC/E;AAIF,oBAAMC,KAAmBh2B,SAASgc,uBAAAA;AAElC,kBAAI0C,IAAkB;AACpB,sBAAMuX,KAAan0B,GAAM,CAAA,IAAKC,GAAI,CAAA;AAClCi0B,gBAAAA,GAAiBt1B,YACfZ,KAAKo2B,wBAAwBJ,IAAwBG,KAAal0B,GAAI,CAAA,IAAKD,GAAM,CAAA,GAAIm0B,KAAan0B,GAAM,CAAA,IAAKC,GAAI,CAAA,GAAIg0B,KAAuBD,KAAyB,CAAA,CAAA;cAAA,OAElK;AAEL,sBAAM1D,KAAWwD,OAAqBE,KAAyBh0B,GAAM,CAAA,IAAK,GACpEuwB,KAASyD,OAA2BD,KAAiB9zB,GAAI,CAAA,IAAKjC,KAAK6J,eAAe6D;AACxFwoB,gBAAAA,GAAiBt1B,YAAYZ,KAAKo2B,wBAAwBJ,IAAwB1D,IAAUC,EAAAA,CAAAA;AAE5F,sBAAM8D,KAAkBJ,KAAuBD,KAAyB;AAGxE,oBAFAE,GAAiBt1B,YAAYZ,KAAKo2B,wBAAwBJ,KAAyB,GAAG,GAAGh2B,KAAK6J,eAAe6D,MAAM2oB,EAAAA,CAAAA,GAE/GL,OAA2BC,IAAsB;AAEnD,wBAAM1D,KAASwD,OAAmBE,KAAuBh0B,GAAI,CAAA,IAAKjC,KAAK6J,eAAe6D;AACtFwoB,kBAAAA,GAAiBt1B,YAAYZ,KAAKo2B,wBAAwBH,IAAsB,GAAG1D,EAAAA,CAAAA;gBAAAA;cAAAA;AAGvFvyB,mBAAK0zB,oBAAoB9yB,YAAYs1B,EAAAA;YACvC;YAQQE,wBAAwB3V,IAAa6V,IAAkBC,IAAgB/iB,KAAmB,GAAA;AAChG,oBAAM/R,KAAUvB,SAASC,cAAc,KAAA;AAKvC,qBAJAsB,GAAQ2E,MAAMD,SAAYqN,KAAWxT,KAAKgG,WAAWC,IAAIC,KAAKC,SAAvC,MACvB1E,GAAQ2E,MAAMqB,MAASgZ,KAAMzgB,KAAKgG,WAAWC,IAAIC,KAAKC,SAAlC,MACpB1E,GAAQ2E,MAAMmB,OAAU+uB,KAAWt2B,KAAKgG,WAAWC,IAAIC,KAAKG,QAAvC,MACrB5E,GAAQ2E,MAAMC,QAAWrG,KAAKgG,WAAWC,IAAIC,KAAKG,SAASkwB,KAASD,MAA9C,MACf70B;YACT;YAEOyc,mBAAAA;YAEP;YAEQ4V,wBAAAA;AAEN9zB,mBAAK4zB,kBAAAA;YACP;YAEO5qB,QAAAA;AACL,yBAAW5J,MAAKY,KAAKS;AAQnBrB,gBAAAA,GAAEo3B,gBAAAA;YAEN;YAEOX,WAAW7zB,IAAeC,IAAAA;AAC/B,oBAAMw0B,KAAkBz2B,KAAK6J,eAAejG,OAAOiW,QAAQ7Z,KAAK6J,eAAejG,OAAOmI,GAChFgO,KAAUpG,KAAKC,IAAI5T,KAAK6J,eAAejG,OAAOkI,GAAG9L,KAAK6J,eAAe6D,OAAO,CAAA,GAC5EgpB,KAAc12B,KAAKyQ,gBAAgBM,WAAW2lB;AAEpD,uBAAS3qB,KAAI/J,IAAO+J,MAAK9J,IAAK8J,MAAK;AACjC,sBAAM4qB,KAAa32B,KAAKS,aAAasL,EAAAA,GAC/B0U,KAAM1U,KAAI/L,KAAK6J,eAAejG,OAAOgC,OACrCF,KAAW1F,KAAK6J,eAAejG,OAAOC,MAAMgF,IAAI4X,EAAAA,GAChDmW,KAAc52B,KAAKyQ,gBAAgBM,WAAW6lB;AAC/C52B,qBAAKwzB,mBAAmBznB,EAAAA,KAAM/L,KAAKwzB,mBAAmBznB,EAAAA,EAAG9K,WAAWjB,KAAK6J,eAAe6D,SAC3F1N,KAAKwzB,mBAAmBznB,EAAAA,IAAK,IAAI8qB,WAAW72B,KAAK6J,eAAe6D,IAAAA,IAElEipB,GAAWH,gBAAgBx2B,KAAKg0B,YAAY8C,UAAUpxB,IAAW+a,IAAKA,OAAQgW,IAAiBG,IAAa7c,IAAS2c,IAAa12B,KAAKgG,WAAWC,IAAIC,KAAKG,OAAOrG,KAAK6J,eAAe6D,MAAM1N,KAAKwzB,mBAAmBznB,EAAAA,CAAAA,CAAAA;cAAAA;YAExN;YAEY0oB,IAAAA,oBAAAA;AACV,qBAAO,IAAIvB,IAAwBlzB,KAAKuzB;YAC1C;YAEQW,iBAAiB90B,IAAAA;AACvBY,mBAAK+2B,kBAAkB33B,GAAE8Q,IAAI9Q,GAAEgR,IAAIhR,GAAE+Q,IAAI/Q,GAAEiR,IAAIjR,GAAEsO,MAAAA,IAAM;YACzD;YAEQymB,iBAAiB/0B,IAAAA;AACvBY,mBAAK+2B,kBAAkB33B,GAAE8Q,IAAI9Q,GAAEgR,IAAIhR,GAAE+Q,IAAI/Q,GAAEiR,IAAIjR,GAAEsO,MAAAA,KAAM;YACzD;YAEQqpB,kBAAkBjrB,IAAWsE,IAAYrE,IAAWsE,IAAY3C,IAAcspB,IAAAA;AAIpF,kBAHAlrB,KAAI9L,KAAKwzB,mBAAmBznB,EAAAA,EAAGD,EAAAA,GAC/BsE,KAAKpQ,KAAKwzB,mBAAmBnjB,EAAAA,EAAID,EAAAA,GAAAA,OAE7BtE,MAAAA,OAAYsE;AAIhB,uBAAOtE,OAAMsE,MAAMrE,OAAMsE,MAAI;AAC3B,wBAAMoQ,KAAMzgB,KAAKS,aAAasL,EAAAA;AAC9B,sBAAA,CAAK0U;AACH;AAEF,wBAAMwW,KAAOxW,GAAI7b,SAASkH,EAAAA;AACtBmrB,kBAAAA,OACFA,GAAK7wB,MAAM8wB,iBAAiBF,KAAU,cAAc,SAAA,EAEhDlrB,MAAK4B,OACT5B,KAAI,GACJC;gBAAAA;YAGN;UAAA;AApXW8T,cAAWvgB,GAAA,CAoBnB,EAAA,GAAA,EAAA63B,qBAAAA,GACA,EAAA,GAAA,EAAAta,gBAAAA,GACA,EAAA,GAAA,EAAAjK,eAAAA,GACA,EAAA,GAAA,EAAAtC,cAAAA,GACA,EAAA,GAAA,EAAAoM,mBAAAA,GACA,EAAA,GAAA,EAAAK,aAAAA,CAAAA,GAzBQ8C,CAAAA,GAAAxgB,GAAAwgB,cAAAA;QAAAA,GAAAA,MAAAA,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,cAAAA,KAAAA,QAAAA,KAAAA,cAAAA,SAAAA,IAAAA,IAAAA,IAAAA,IAAAA;AAAAA,gBAAAA,IAAAA,KAAAA,UAAAA,QAAAA,KAAAA,KAAAA,IAAAA,KAAAA,SAAAA,KAAAA,KAAAA,OAAAA,yBAAAA,IAAAA,EAAAA,IAAAA;AAAAA,gBAAAA,YAAAA,OAAAA,WAAAA,cAAAA,OAAAA,QAAAA;AAAAA,cAAAA,KAAAA,QAAAA,SAAAA,IAAAA,IAAAA,IAAAA,EAAAA;;AAAAA,uBAAAA,KAAAA,GAAAA,SAAAA,GAAAA,MAAAA,GAAAA;AAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,OAAAA,MAAAA,KAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,MAAAA;AAAAA,mBAAAA,KAAAA,KAAAA,MAAAA,OAAAA,eAAAA,IAAAA,IAAAA,EAAAA,GAAAA;UAAAA,GAAAA,IAAAA,QAAAA,KAAAA,WAAAA,SAAAA,IAAAA,IAAAA;AAAAA,mBAAAA,SAAAA,IAAAA,IAAAA;AAAAA,cAAAA,GAAAA,IAAAA,IAAAA,EAAAA;YAAAA;UAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,wBAAAA,GAAAA,+BAAAA,GAAAA,yBAAAA,GAAAA,2BAAAA,GAAAA,qBAAAA,GAAAA,eAAAA,GAAAA,sBAAAA,GAAAA,kBAAAA,GAAAA,eAAAA,GAAAA,YAAAA,GAAAA,aAAAA;ACzBb,gBAAA,IAAA3gB,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAEa,UAAAG,GAAAs1B,aAAa,cACbt1B,GAAA+3B,YAAY,aACZ/3B,GAAAy1B,eAAe,gBACfz1B,GAAAg4B,kBAAkB,mBAClBh4B,GAAAi4B,sBAAsB,uBACtBj4B,GAAA41B,eAAe,gBACf51B,GAAA81B,qBAAqB,sBACrB91B,GAAA61B,2BAA2B,sBAC3B71B,GAAA+1B,yBAAyB,oBACzB/1B,GAAAi2B,+BAA+B;AAE5C,cAAarB,IAAb,MAAA;YAOEx0B,YACmBqc,IACyBkB,IACRvM,IACI8L,IACPiT,IACMlZ,IACLoB,IAAAA;AANf,mBAAAoE,YAAAA,IACyB,KAAAkB,0BAAAA,IACR,KAAAvM,kBAAAA,IACI,KAAA8L,sBAAAA,IACP,KAAAiT,eAAAA,IACM,KAAAlZ,qBAAAA,IACL,KAAAoB,gBAAAA,IAb1B,KAAA6f,YAAsB,IAAI,EAAAvmB,YAI1B,KAAAwmB,oBAAAA;YAUL;YAEI7Y,uBAAuB3c,IAAqCC,IAAmC2c,IAAAA;AACpG5e,mBAAKy3B,kBAAkBz1B,IACvBhC,KAAK03B,gBAAgBz1B,IACrBjC,KAAKw3B,oBAAoB5Y;YAC3B;YAEOkY,UAAUpxB,IAAuB+a,IAAakX,IAAsBf,IAAiC7c,IAAiB2c,IAAsBxc,IAAmBxM,IAAckqB,IAAAA;AAKlL,oBAAM3b,IAAWjc,KAAK8b,UAAUI,uBAAAA,GAE1B2b,IAAe73B,KAAKgd,wBAAwB8a,oBAAoBrX,EAAAA;AAMtE,kBAAIxP,IAAa;AACjB,uBAASnF,KAAI6H,KAAKC,IAAIlO,GAASzE,QAAQyM,EAAAA,IAAQ,GAAG5B,MAAK,GAAGA;AACxD,oBAAIpG,GAAS6L,SAASzF,IAAG9L,KAAKu3B,SAAAA,EAAWQ,QAAAA,MAAc,EAAAC,kBAAmBL,MAAe7rB,OAAMiO,IAAU;AACvG9I,sBAAanF,KAAI;AACjB;gBAAA;AAIJ,oBAAMmM,IAASjY,KAAK0X,cAAcO;AAClC,kBAAIggB,IAAAA,IAEAnsB,IAAI;AACR,qBAAOA,IAAImF,GAAYnF,KAAK;AAC1BpG,gBAAAA,GAAS6L,SAASzF,GAAG9L,KAAKu3B,SAAAA;AAC1B,oBAAIlxB,KAAQrG,KAAKu3B,UAAUtd,SAAAA;AAI3B,oBAAc,MAAV5T,IAAa;AACfuxB,kBAAAA,GAAQ9rB,CAAAA,IAAKmsB;AACb;gBAAA;AAIF,oBAAIC,KAAAA,OACAC,IAAYrsB,GAKZ5F,IAAOlG,KAAKu3B;AAChB,oBAAIM,EAAa52B,SAAS,KAAK6K,MAAM+rB,EAAa,CAAA,EAAG,CAAA,GAAI;AACvDK,kBAAAA,KAAAA;AACA,wBAAM1qB,KAAQqqB,EAAa1zB,MAAAA;AAI3B+B,sBAAO,IAAI,EAAAkyB,eACTp4B,KAAKu3B,WACL7xB,GAAS2yB,kBAAAA,MAAwB7qB,GAAM,CAAA,GAAIA,GAAM,CAAA,CAAA,GACjDA,GAAM,CAAA,IAAKA,GAAM,CAAA,CAAA,GAInB2qB,IAAY3qB,GAAM,CAAA,IAAK,GAGvBnH,KAAQH,EAAK+T,SAAAA;gBAAAA;AAGf,sBAAMqe,IAAct4B,KAAK8b,UAAU3b,cAAc,MAAA;AAkBjD,oBAjBIkG,KAAQ,MACViyB,EAAYlyB,MAAMC,QAAW6T,KAAY7T,KAAf,OAGxB6xB,OAGFI,EAAYlyB,MAAMqlB,UAAU,UAKxB1R,MAAWjO,KAAKiO,MAAWoe,MAC7Bpe,KAAUjO,KAAAA,CAIT9L,KAAKwvB,aAAa+I,kBAAkBZ,MAAe7rB,MAAMiO;AAO5D,0BANAue,EAAYl4B,UAAUC,IAAIhB,GAAA41B,YAAAA,GAEtByB,MACF4B,EAAYl4B,UAAUC,IAAIhB,GAAA81B,kBAAAA,GAGpByB,IAAAA;oBACN,KAAK;AACH0B,wBAAYl4B,UAAUC,IAAIhB,GAAA+1B,sBAAAA;AAC1B;oBACF,KAAK;AACHkD,wBAAYl4B,UAAUC,IAAIhB,GAAAi2B,4BAAAA;AAC1B;oBACF;AACEgD,wBAAYl4B,UAAUC,IAAIhB,GAAA61B,wBAAAA;kBAAAA;AAuBhC,oBAlBIhvB,EAAKsyB,OAAAA,KACPF,EAAYl4B,UAAUC,IAAIhB,GAAAs1B,UAAAA,GAGxBzuB,EAAKuyB,SAAAA,KACPH,EAAYl4B,UAAUC,IAAIhB,GAAAy1B,YAAAA,GAGxB5uB,EAAKwyB,MAAAA,KACPJ,EAAYl4B,UAAUC,IAAIhB,GAAA+3B,SAAAA,GAGxBlxB,EAAKyyB,YAAAA,IACPL,EAAYvzB,cAAc,EAAA6zB,uBAE1BN,EAAYvzB,cAAcmB,EAAK2yB,SAAAA,KAAc,EAAAD,sBAG3C1yB,EAAK4yB,YAAAA,MACPR,EAAYl4B,UAAUC,IAAI,GAAGhB,GAAAg4B,mBAAmBnxB,EAAKuL,SAASsnB,gBAAAA,GAC9B,QAA5BT,EAAYvzB,gBACduzB,EAAYvzB,cAAc,MAAA,CAEvBmB,EAAK8yB,wBAAAA;AACR,sBAAI9yB,EAAK+yB,oBAAAA;AACPX,sBAAYlyB,MAAM8yB,sBAAsB,OAAO,EAAAC,cAAcnhB,WAAW9R,EAAKkzB,kBAAAA,CAAAA,EAAqBC,KAAK,GAAA;uBAClG;AACL,wBAAI3wB,KAAKxC,EAAKkzB,kBAAAA;AACVp5B,yBAAKyQ,gBAAgBM,WAAWuoB,8BAA8BpzB,EAAKsyB,OAAAA,KAAY9vB,KAAK,MACtFA,MAAM,IAER4vB,EAAYlyB,MAAM8yB,sBAAsBjhB,EAAOC,KAAKxP,EAAAA,EAAIzC;kBAAAA;AAK1DC,kBAAKqzB,gBAAAA,KACPjB,EAAYl4B,UAAUC,IAAIhB,GAAAi4B,mBAAAA;AAG5B,oBAAI5uB,IAAKxC,EAAKszB,WAAAA,GACVC,IAAcvzB,EAAKwzB,eAAAA,GACnBjxB,IAAKvC,EAAKyzB,WAAAA,GACVC,IAAc1zB,EAAK2zB,eAAAA;AACvB,sBAAMC,IAAAA,CAAAA,CAAc5zB,EAAK4zB,UAAAA;AACzB,oBAAIA,GAAW;AACb,wBAAMC,KAAOrxB;AACbA,sBAAKD,GACLA,IAAKsxB;AACL,wBAAMC,KAAQP;AACdA,sBAAcG,GACdA,IAAcI;gBAAAA;AAKhB,oBAAIC,GACAC,GACAC,IAAAA;AACJn6B,qBAAKsW,mBAAmB8jB,wBAAwBtuB,GAAG2U,IAAAA,QAAgB4Z,CAAAA,OAAAA;AACzC,4BAApBA,GAAE/wB,QAAQgxB,SAAmBH,MAG7BE,GAAEE,uBACJX,IAAc,UACdnxB,IAAK4xB,GAAEE,mBAAmB9hB,QAAQ,IAAI,UACtCwhB,IAAaI,GAAEE,qBAEbF,GAAEG,uBACJf,IAAc,UACd/wB,IAAK2xB,GAAEG,mBAAmB/hB,QAAQ,IAAI,UACtCyhB,IAAaG,GAAEG,qBAEjBL,IAA4B,UAApBE,GAAE/wB,QAAQgxB;gBAAe,CAAA;AAInC,sBAAMG,IAAgBz6B,KAAK06B,mBAAmB5uB,GAAG2U,EAAAA;AAsBjD,oBAAIka;AACJ,wBAtBKR,KACCliB,EAAO2iB,uBAAuBH,MAChChB,IAAc,UACd/wB,IAAKuP,EAAO2iB,oBAAoBniB,QAAQ,IAAI,UAC5CyhB,IAAajiB,EAAO2iB,sBAMpBH,MACFR,IAAaj6B,KAAKuc,oBAAoBse,YAAY5iB,EAAOsd,4BAA4Btd,EAAOud,mCAC5F2E,IAAAA,OAIEA,KACF7B,EAAYl4B,UAAUC,IAAI,sBAAA,GAKpBu5B,GAAAA;kBACN,KAAK;kBACL,KAAK;AACHe,wBAAa1iB,EAAOC,KAAKzP,CAAAA,GACzB6vB,EAAYl4B,UAAUC,IAAI,YAAYoI,GAAAA;AACtC;kBACF,KAAK;AACHkyB,wBAAa,EAAAliB,KAAKC,QAAQjQ,KAAM,IAAIA,KAAM,IAAI,KAAW,MAALA,CAAAA,GACpDzI,KAAK86B,UAAUxC,GAAa,qBAAqByC,GAAUtyB,MAAO,GAAGhD,SAAS,EAAA,GAAK,KAAK,CAAA,GAAA;AACxF;kBAEF;AACMq0B,yBACFa,IAAa1iB,EAAOyc,YACpB4D,EAAYl4B,UAAUC,IAAI,YAAY,EAAAo1B,wBAAAA,KAEtCkF,IAAa1iB,EAAOqQ;gBAAAA;AAY1B,wBAPK2R,KACC/zB,EAAKwyB,MAAAA,MACPuB,IAAa,EAAAliB,MAAMijB,gBAAgBL,GAAY,GAAA,IAK3ClB,GAAAA;kBACN,KAAK;kBACL,KAAK;AACCvzB,sBAAKsyB,OAAAA,KAAY9vB,IAAK,KAAK1I,KAAKyQ,gBAAgBM,WAAWuoB,+BAC7D5wB,KAAM,IAEH1I,KAAKi7B,sBAAsB3C,GAAaqC,GAAY1iB,EAAOC,KAAKxP,CAAAA,GAAKxC,GAAM+zB,GAAAA,MAAYxqB,KAC1F6oB,EAAYl4B,UAAUC,IAAI,YAAYqI,GAAAA;AAExC;kBACF,KAAK;AACH,0BAAMqP,KAAQ,EAAAU,KAAKC,QAChBhQ,KAAM,KAAM,KACZA,KAAO,IAAK,KACA,MAAb,CAAA;AAEG1I,yBAAKi7B,sBAAsB3C,GAAaqC,GAAY5iB,IAAO7R,GAAM+zB,GAAYC,CAAAA,KAChFl6B,KAAK86B,UAAUxC,GAAa,UAAUyC,EAASryB,EAAGjD,SAAS,EAAA,GAAK,KAAK,CAAA,GAAA;AAEvE;kBAEF;AACOzF,yBAAKi7B,sBAAsB3C,GAAaqC,GAAY1iB,EAAOyc,YAAYxuB,GAAM+zB,GAAAA,MAAYxqB,KACxFqqB,KACFxB,EAAYl4B,UAAUC,IAAI,YAAY,EAAAo1B,wBAAAA;gBAAAA;AAK9CxZ,kBAASrb,YAAY03B,CAAAA,GACrBV,GAAQ9rB,CAAAA,IAAAA,EAAOmsB,GAEfnsB,IAAIqsB;cAAAA;AASN,qBAJIrsB,IAAI4B,KAAO,KACbkqB,GAAQsD,SAASpvB,CAAAA,EAAGqvB,KAAAA,EAAOlD,CAAAA,GAGtBhc;YACT;YAEQgf,sBAAsBx5B,IAAsBgH,IAAYC,IAAYxC,IAAiB+zB,IAAgCC,IAAAA;AAC3H,kBAA6D,MAAzDl6B,KAAKyQ,gBAAgBM,WAAWqqB,yBAA8B,GAAA,EAAAC,iCAAgCn1B,GAAK6xB,QAAAA,CAAAA;AACrG,uBAAA;AAIF,kBAAIuD;AAWJ,qBAVKrB,MAAeC,OAClBoB,KAAgBt7B,KAAK0X,cAAcO,OAAOsjB,cAAcxyB,SAASN,GAAGgQ,MAAM/P,GAAG+P,IAAAA,IAAAA,WAI3E6iB,OACFA,KAAgB,EAAAvjB,MAAMyjB,oBAAoBvB,MAAcxxB,IAAIyxB,MAAcxxB,IAAI1I,KAAKyQ,gBAAgBM,WAAWqqB,oBAAAA,GAC9Gp7B,KAAK0X,cAAcO,OAAOsjB,cAAczyB,UAAUmxB,MAAcxxB,IAAIgQ,OAAOyhB,MAAcxxB,IAAI+P,MAAM6iB,QAAAA,KAAAA,KAAiB,IAAA,IAAA,CAAA,CAGlHA,OACFt7B,KAAK86B,UAAUr5B,IAAS,SAAS65B,GAAcr1B,KAAAA,GAAAA;YAKnD;YAEQ60B,UAAUr5B,IAAsB2E,IAAAA;AACtC3E,cAAAA,GAAQjB,aAAa,SAAS,GAAGiB,GAAQkC,aAAa,OAAA,KAAY,KAAKyC,KAAAA;YACzE;YAEQs0B,mBAAmB5uB,IAAWC,IAAAA;AACpC,oBAAM/J,KAAQhC,KAAKy3B,iBACbx1B,KAAMjC,KAAK03B;AACjB,qBAAA,EAAA,CAAK11B,MAAAA,CAAUC,QAGXjC,KAAKw3B,oBACHx1B,GAAM,CAAA,KAAMC,GAAI,CAAA,IACX6J,MAAK9J,GAAM,CAAA,KAAM+J,MAAK/J,GAAM,CAAA,KACjC8J,KAAI7J,GAAI,CAAA,KAAM8J,MAAK9J,GAAI,CAAA,IAEpB6J,KAAI9J,GAAM,CAAA,KAAM+J,MAAK/J,GAAM,CAAA,KAChC8J,MAAK7J,GAAI,CAAA,KAAM8J,MAAK9J,GAAI,CAAA,IAEpB8J,KAAI/J,GAAM,CAAA,KAAM+J,KAAI9J,GAAI,CAAA,KAC3BD,GAAM,CAAA,MAAOC,GAAI,CAAA,KAAM8J,OAAM/J,GAAM,CAAA,KAAM8J,MAAK9J,GAAM,CAAA,KAAM8J,KAAI7J,GAAI,CAAA,KAClED,GAAM,CAAA,IAAKC,GAAI,CAAA,KAAM8J,OAAM9J,GAAI,CAAA,KAAM6J,KAAI7J,GAAI,CAAA,KAC7CD,GAAM,CAAA,IAAKC,GAAI,CAAA,KAAM8J,OAAM/J,GAAM,CAAA,KAAM8J,MAAK9J,GAAM,CAAA;YACzD;UAAA;AAGF,mBAAS+4B,EAASv0B,IAAci1B,IAAiBx6B,IAAAA;AAC/C,mBAAOuF,GAAKvF,SAASA;AACnBuF,cAAAA,KAAOi1B,KAAUj1B;AAEnB,mBAAOA;UACT;AA/VaytB,cAAqB30B,GAAA,CAS7B,EAAA,GAAA,EAAA4d,uBAAAA,GACA,EAAA,GAAA,EAAAtK,eAAAA,GACA,EAAA,GAAA,EAAA8J,mBAAAA,GACA,EAAA,GAAA,EAAAgU,YAAAA,GACA,EAAA,GAAA,EAAAja,kBAAAA,GACA,EAAA,GAAA,EAAAsG,aAAAA,CAAAA,GAdQkX,CAAAA,GAAA50B,GAAA40B,wBAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,gBAAAA,GAAAA,cAAAA,GAAAA,yBAAAA;ACvBb,gBAAA30B,KAAAJ,GAAA,IAAA;AAEa,UAAAG,GAAAo2B,yBAAyB,KAEzBp2B,GAAAq8B,cAAc,KAIdr8B,GAAAs8B,gBAAoCr8B,GAAAub,aAAavb,GAAAs8B,eAAe,WAAW;QAAA,GAAA,MAAA,CAAAx8B,IAAAC,OAAA;ACCxF,mBAAgBw8B,GAAiBC,IAAAA;AAI/B,mBAAO,SAAUA,MAAaA,MAAa;UAC7C;AAAA,iBAAA,eAAAz8B,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,yBAAAA,GAAA,kCAAAA,GAAA,6BAAAA,GAAA,mBAAAA,GAAA,eAAA,QAZAA,GAAA,eAAA,SAAgC4H,IAAAA;AAC9B,gBAAA,CAAKA;AACH,oBAAM,IAAIvF,MAAM,yBAAA;AAElB,mBAAOuF;UACT,GAEA5H,GAAA,mBAAAH,IAOAG,GAAA,6BAAA,SAA2Cy8B,IAAAA;AACzC,mBAAO,SAAUA,MAAaA,MAAa;UAC7C,GAMAz8B,GAAA,kCAAA,SAAgDy8B,IAAAA;AAC9C,mBAAOD,GAAiBC,EAAAA,KAL1B,SAA2BA,IAAAA;AACzB,qBAAO,QAAUA,MAAaA,MAAa;YAC7C,EAG0DA,EAAAA;UAC1D,GAEAz8B,GAAA,yBAAA,WAAA;AACE,mBAAO,EACL4G,KAAK,EACHK,QAiBG,EACLD,OAAO,GACPF,QAAQ,EAAA,GAlBND,MAgBG,EACLG,OAAO,GACPF,QAAQ,EAAA,EAAA,GAhBRsiB,QAAQ,EACNniB,QAaG,EACLD,OAAO,GACPF,QAAQ,EAAA,GAdND,MAYG,EACLG,OAAO,GACPF,QAAQ,EAAA,GAbN/D,MAAM,EACJiE,OAAO,GACPF,QAAQ,GACRoB,MAAM,GACNE,KAAK,EAAA,EAAA,EAAA;UAIb;QAAA,GAAA,KAAA,CAAArI,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,iBAAA,QCvCAA,GAAA,iBAAA,MAAA;YAuBEI,YACUoK,IAAAA;AAAA,mBAAAA,iBAAAA,IApBH,KAAAkyB,oBAAAA,OAOA,KAAAC,uBAA+B;YAetC;YAKOrY,iBAAAA;AACL3jB,mBAAKyjB,iBAAAA,QACLzjB,KAAK0jB,eAAAA,QACL1jB,KAAK+7B,oBAAAA,OACL/7B,KAAKg8B,uBAAuB;YAC9B;YAKWC,IAAAA,sBAAAA;AACT,qBAAIj8B,KAAK+7B,oBACA,CAAC,GAAG,CAAA,IAGR/7B,KAAK0jB,gBAAiB1jB,KAAKyjB,kBAIzBzjB,KAAKk8B,2BAAAA,IAA+Bl8B,KAAK0jB,eAHvC1jB,KAAKyjB;YAIhB;YAMW0Y,IAAAA,oBAAAA;AACT,kBAAIn8B,KAAK+7B;AACP,uBAAO,CAAC/7B,KAAK6J,eAAe6D,MAAM1N,KAAK6J,eAAejG,OAAOiW,QAAQ7Z,KAAK6J,eAAenJ,OAAO,CAAA;AAGlG,kBAAKV,KAAKyjB,gBAAV;AAKA,oBAAA,CAAKzjB,KAAK0jB,gBAAgB1jB,KAAKk8B,2BAAAA,GAA8B;AAC3D,wBAAME,KAAkBp8B,KAAKyjB,eAAe,CAAA,IAAKzjB,KAAKg8B;AACtD,yBAAII,KAAkBp8B,KAAK6J,eAAe6D,OAEpC0uB,KAAkBp8B,KAAK6J,eAAe6D,QAAS,IAC1C,CAAC1N,KAAK6J,eAAe6D,MAAM1N,KAAKyjB,eAAe,CAAA,IAAK9P,KAAKuW,MAAMkS,KAAkBp8B,KAAK6J,eAAe6D,IAAAA,IAAQ,CAAA,IAE/G,CAAC0uB,KAAkBp8B,KAAK6J,eAAe6D,MAAM1N,KAAKyjB,eAAe,CAAA,IAAK9P,KAAKuW,MAAMkS,KAAkBp8B,KAAK6J,eAAe6D,IAAAA,CAAAA,IAEzH,CAAC0uB,IAAiBp8B,KAAKyjB,eAAe,CAAA,CAAA;gBAAA;AAI/C,oBAAIzjB,KAAKg8B,wBAEHh8B,KAAK0jB,aAAa,CAAA,MAAO1jB,KAAKyjB,eAAe,CAAA,GAAI;AAEnD,wBAAM2Y,KAAkBp8B,KAAKyjB,eAAe,CAAA,IAAKzjB,KAAKg8B;AACtD,yBAAII,KAAkBp8B,KAAK6J,eAAe6D,OACjC,CAAC0uB,KAAkBp8B,KAAK6J,eAAe6D,MAAM1N,KAAKyjB,eAAe,CAAA,IAAK9P,KAAKuW,MAAMkS,KAAkBp8B,KAAK6J,eAAe6D,IAAAA,CAAAA,IAEzH,CAACiG,KAAKG,IAAIsoB,IAAiBp8B,KAAK0jB,aAAa,CAAA,CAAA,GAAK1jB,KAAK0jB,aAAa,CAAA,CAAA;gBAAA;AAG/E,uBAAO1jB,KAAK0jB;cAAAA;YACd;YAKOwY,6BAAAA;AACL,oBAAMl6B,KAAQhC,KAAKyjB,gBACbxhB,KAAMjC,KAAK0jB;AACjB,qBAAA,EAAA,CAAK1hB,MAAAA,CAAUC,QAGRD,GAAM,CAAA,IAAKC,GAAI,CAAA,KAAOD,GAAM,CAAA,MAAOC,GAAI,CAAA,KAAMD,GAAM,CAAA,IAAKC,GAAI,CAAA;YACrE;YAOOo6B,WAAWte,IAAAA;AAUhB,qBARI/d,KAAKyjB,mBACPzjB,KAAKyjB,eAAe,CAAA,KAAM1F,KAExB/d,KAAK0jB,iBACP1jB,KAAK0jB,aAAa,CAAA,KAAM3F,KAItB/d,KAAK0jB,gBAAgB1jB,KAAK0jB,aAAa,CAAA,IAAK,KAC9C1jB,KAAK2jB,eAAAA,GAAAA,SAKH3jB,KAAKyjB,kBAAkBzjB,KAAKyjB,eAAe,CAAA,IAAK,MAClDzjB,KAAKyjB,eAAe,CAAA,IAAK,IAAA;YAG7B;UAAA;QAAA,GAAA,KAAA,SAAArkB,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,kBAAA;ACzIF,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,GAAA;AAGA,cAAa0d,IAAb,cAAqC,EAAApd,WAAAA;YAYnCC,YACES,IACAgJ,IACkCuH,IAAAA;AAElC7Q,oBAAAA,GAFkC,KAAA6Q,kBAAAA,IAZ7B,KAAApK,QAAgB,GAChB,KAAAF,SAAiB,GAKP,KAAAm2B,oBAAoBt8B,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACvC,KAAAoyB,mBAAmBv8B,KAAKs8B,kBAAkBjyB,OAQxDrK,KAAKw8B,mBAAmB,IAAIC,EAAmBv8B,IAAUgJ,IAAelJ,KAAKyQ,eAAAA,GAC7EzQ,KAAK4B,SAAS5B,KAAKyQ,gBAAgBisB,uBAAuB,CAAC,cAAc,UAAA,GAAa,MAAM18B,KAAK2f,QAAAA,CAAAA,CAAAA;YACnG;YAbW0F,IAAAA,eAAAA;AAA0B,qBAAOrlB,KAAKqG,QAAQ,KAAKrG,KAAKmG,SAAS;YAAG;YAexEwZ,UAAAA;AACL,oBAAM9O,KAAS7Q,KAAKw8B,iBAAiB7c,QAAAA;AACjC9O,cAAAA,GAAOxK,UAAUrG,KAAKqG,SAASwK,GAAO1K,WAAWnG,KAAKmG,WACxDnG,KAAKqG,QAAQwK,GAAOxK,OACpBrG,KAAKmG,SAAS0K,GAAO1K,QACrBnG,KAAKs8B,kBAAkB5sB,KAAAA;YAE3B;UAAA;AA7BWkN,cAAetd,GAAA,CAevB,EAAA,GAAA,EAAAsT,eAAAA,CAAAA,GAfQgK,CAAAA,GAAAvd,GAAAud,kBAAAA;AA+Cb,gBAAM6f,EAAAA;YAIJh9B,YACUqc,IACA6gB,IACAlsB,IAAAA;AAFA,mBAAAqL,YAAAA,IACA,KAAA6gB,iBAAAA,IACA,KAAAlsB,kBAAAA,IANF,KAAAmsB,UAA0B,EAAEv2B,OAAO,GAAGF,QAAQ,EAAA,GAQpDnG,KAAK68B,kBAAkB78B,KAAK8b,UAAU3b,cAAc,MAAA,GACpDH,KAAK68B,gBAAgBz8B,UAAUC,IAAI,4BAAA,GACnCL,KAAK68B,gBAAgB93B,cAAc,KACnC/E,KAAK68B,gBAAgBr8B,aAAa,eAAe,MAAA,GACjDR,KAAK28B,eAAe/7B,YAAYZ,KAAK68B,eAAAA;YACvC;YAEOld,UAAAA;AACL3f,mBAAK68B,gBAAgBz2B,MAAMmqB,aAAavwB,KAAKyQ,gBAAgBM,WAAWwf,YACxEvwB,KAAK68B,gBAAgBz2B,MAAMoqB,WAAW,GAAGxwB,KAAKyQ,gBAAgBM,WAAWyf;AAGzE,oBAAMsM,KAAW98B,KAAK68B,gBAAgBv1B,sBAAAA;AAStC,qBALuB,MAAnBw1B,GAASz2B,SAAmC,MAApBy2B,GAAS32B,WACnCnG,KAAK48B,QAAQv2B,QAAQy2B,GAASz2B,OAC9BrG,KAAK48B,QAAQz2B,SAASwN,KAAKib,KAAKkO,GAAS32B,MAAAA,IAGpCnG,KAAK48B;YACd;UAAA;QAAA,GAAA,MAAA,SAAAx9B,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,yBAAAA,GAAA,iBAAA;AClFF,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA;AAGA,gBAAak5B,UAAuB,EAAAe,cAAAA;YASlC15B,YAAYs9B,IAAsBC,IAAe32B,IAAAA;AAC/CzG,oBAAAA,GANK,KAAAq9B,UAAkB,GAGlB,KAAAC,eAAuB,IAI5Bl9B,KAAK0I,KAAKq0B,GAAUr0B,IACpB1I,KAAKyI,KAAKs0B,GAAUt0B,IACpBzI,KAAKk9B,eAAeF,IACpBh9B,KAAKmuB,SAAS9nB;YAChB;YAEO82B,aAAAA;AAEL,qBAAO;YACT;YAEOljB,WAAAA;AACL,qBAAOja,KAAKmuB;YACd;YAEO0K,WAAAA;AACL,qBAAO74B,KAAKk9B;YACd;YAEOnF,UAAAA;AAGL,qBAAO;YACT;YAEOqF,gBAAgBn2B,IAAAA;AACrB,oBAAM,IAAIvF,MAAM,iBAAA;YAClB;YAEO27B,gBAAAA;AACL,qBAAO,CAACr9B,KAAK0I,IAAI1I,KAAK64B,SAAAA,GAAY74B,KAAKia,SAAAA,GAAYja,KAAK+3B,QAAAA,CAAAA;YAC1D;UAAA;AA1CF,UAAA14B,GAAA,iBAAA;AA6CA,cAAa4d,IAAb,MAAaA,GAAAA;YAOXxd,YAC0BoK,IAAAA;AAAA,mBAAAA,iBAAAA,IALlB,KAAAyzB,oBAAwC,CAAA,GACxC,KAAAC,yBAAiC,GACjC,KAAAhG,YAAsB,IAAI,EAAAvmB;YAI9B;YAEGpP,SAASyH,IAAAA;AACd,oBAAMm0B,KAA2B,EAC/BC,IAAIz9B,KAAKu9B,0BACTl0B,SAAAA,GAAAA;AAIF,qBADArJ,KAAKs9B,kBAAkB/4B,KAAKi5B,EAAAA,GACrBA,GAAOC;YAChB;YAEO1a,WAAWF,IAAAA;AAChB,uBAAS3jB,KAAI,GAAGA,KAAIc,KAAKs9B,kBAAkBr8B,QAAQ/B;AACjD,oBAAIc,KAAKs9B,kBAAkBp+B,EAAAA,EAAGu+B,OAAO5a;AAEnC,yBADA7iB,KAAKs9B,kBAAkBtyB,OAAO9L,IAAG,CAAA,GAAA;AAKrC,qBAAA;YACF;YAEO44B,oBAAoBrX,IAAAA;AACzB,kBAAsC,MAAlCzgB,KAAKs9B,kBAAkBr8B;AACzB,uBAAO,CAAA;AAGT,oBAAM2P,KAAO5Q,KAAK6J,eAAejG,OAAOC,MAAMgF,IAAI4X,EAAAA;AAClD,kBAAA,CAAK7P,MAAwB,MAAhBA,GAAK3P;AAChB,uBAAO,CAAA;AAGT,oBAAMy8B,KAA6B,CAAA,GAC7BC,KAAU/sB,GAAKynB,kBAAAA,IAAkB;AAMvC,kBAAIuF,KAAmB,GACnBC,KAAqB,GACrBC,KAAwB,GACxBC,KAAcntB,GAAKotB,MAAM,CAAA,GACzBC,KAAcrtB,GAAKstB,MAAM,CAAA;AAE7B,uBAASpyB,KAAI,GAAGA,KAAI8E,GAAKM,iBAAAA,GAAoBpF;AAG3C,oBAFA8E,GAAKW,SAASzF,IAAG9L,KAAKu3B,SAAAA,GAEY,MAA9Bv3B,KAAKu3B,UAAUtd,SAAAA,GAAnB;AAMA,sBAAIja,KAAKu3B,UAAU7uB,OAAOq1B,MAAe/9B,KAAKu3B,UAAU9uB,OAAOw1B,IAAa;AAG1E,wBAAInyB,KAAI8xB,KAAmB,GAAG;AAC5B,4BAAM/F,KAAe73B,KAAKm+B,iBACxBR,IACAG,IACAD,IACAjtB,IACAgtB,EAAAA;AAEF,+BAAS1+B,KAAI,GAAGA,KAAI24B,GAAa52B,QAAQ/B;AACvCw+B,wBAAAA,GAAOn5B,KAAKszB,GAAa34B,EAAAA,CAAAA;oBAAAA;AAK7B0+B,oBAAAA,KAAmB9xB,IACnBgyB,KAAwBD,IACxBE,KAAc/9B,KAAKu3B,UAAU7uB,IAC7Bu1B,KAAcj+B,KAAKu3B,UAAU9uB;kBAAAA;AAG/Bo1B,kBAAAA,MAAsB79B,KAAKu3B,UAAUsB,SAAAA,EAAW53B,UAAU,EAAA23B,qBAAqB33B;gBAAAA;AAIjF,kBAAIjB,KAAK6J,eAAe6D,OAAOkwB,KAAmB,GAAG;AACnD,sBAAM/F,KAAe73B,KAAKm+B,iBACxBR,IACAG,IACAD,IACAjtB,IACAgtB,EAAAA;AAEF,yBAAS1+B,KAAI,GAAGA,KAAI24B,GAAa52B,QAAQ/B;AACvCw+B,kBAAAA,GAAOn5B,KAAKszB,GAAa34B,EAAAA,CAAAA;cAAAA;AAI7B,qBAAOw+B;YACT;YAUQS,iBAAiBvtB,IAAcwtB,IAAoBC,IAAkB34B,IAAuB4sB,IAAAA;AAClG,oBAAM9rB,KAAOoK,GAAKsf,UAAUkO,IAAYC,EAAAA;AAIxC,kBAAIC,KAAsC,CAAA;AAC1C,kBAAA;AACEA,gBAAAA,KAAkBt+B,KAAKs9B,kBAAkB,CAAA,EAAGj0B,QAAQ7C,EAAAA;cAAAA,SAC7C+3B,IAAP;AACA7rB,wBAAQ6rB,MAAMA,EAAAA;cAAAA;AAEhB,uBAASr/B,KAAI,GAAGA,KAAIc,KAAKs9B,kBAAkBr8B,QAAQ/B;AAEjD,oBAAA;AACE,wBAAMs/B,KAAex+B,KAAKs9B,kBAAkBp+B,EAAAA,EAAGmK,QAAQ7C,EAAAA;AACvD,2BAASsH,KAAI,GAAGA,KAAI0wB,GAAav9B,QAAQ6M;AACvCmP,oBAAAA,GAAuBwhB,aAAaH,IAAiBE,GAAa1wB,EAAAA,CAAAA;gBAAAA,SAE7DywB,IAAP;AACA7rB,0BAAQ6rB,MAAMA,EAAAA;gBAAAA;AAIlB,qBADAv+B,KAAK0+B,0BAA0BJ,IAAiB54B,IAAU4sB,EAAAA,GACnDgM;YACT;YAUQI,0BAA0BhB,IAA4B9sB,IAAmB0hB,IAAAA;AAC/E,kBAAIqM,KAAoB,GACpBC,KAAAA,OACAf,KAAqB,GACrBgB,KAAenB,GAAOiB,EAAAA;AAG1B,kBAAKE,IAAL;AAIA,yBAAS/yB,KAAIwmB,IAAUxmB,KAAI9L,KAAK6J,eAAe6D,MAAM5B,MAAK;AACxD,wBAAMzF,KAAQuK,GAAKqJ,SAASnO,EAAAA,GACtB7K,KAAS2P,GAAKkuB,UAAUhzB,EAAAA,EAAG7K,UAAU,EAAA23B,qBAAqB33B;AAIhE,sBAAc,MAAVoF,IAAJ;AAWA,wBAAA,CANKu4B,MAAuBC,GAAa,CAAA,KAAMhB,OAC7CgB,GAAa,CAAA,IAAK/yB,IAClB8yB,KAAAA,OAIEC,GAAa,CAAA,KAAMhB,IAAoB;AAOzC,0BANAgB,GAAa,CAAA,IAAK/yB,IAGlB+yB,KAAenB,GAAAA,EAASiB,EAAAA,GAAAA,CAGnBE;AACH;AAOEA,sBAAAA,GAAa,CAAA,KAAMhB,MACrBgB,GAAa,CAAA,IAAK/yB,IAClB8yB,KAAAA,QAEAA,KAAAA;oBAAsB;AAM1Bf,oBAAAA,MAAsB58B;kBAAAA;gBAAAA;AAKpB49B,gBAAAA,OACFA,GAAa,CAAA,IAAK7+B,KAAK6J,eAAe6D;cAAAA;YAE1C;YAUQqxB,OAAAA,aAAoBrB,IAA4BsB,IAAAA;AACtD,kBAAIC,KAAAA;AACJ,uBAAS//B,KAAI,GAAGA,KAAIw+B,GAAOz8B,QAAQ/B,MAAK;AACtC,sBAAMsO,KAAQkwB,GAAOx+B,EAAAA;AACrB,oBAAK+/B,IAAL;AAwBE,sBAAID,GAAS,CAAA,KAAMxxB,GAAM,CAAA;AAIvB,2BADAkwB,GAAOx+B,KAAI,CAAA,EAAG,CAAA,IAAK8/B,GAAS,CAAA,GACrBtB;AAGT,sBAAIsB,GAAS,CAAA,KAAMxxB,GAAM,CAAA;AAKvB,2BAFAkwB,GAAOx+B,KAAI,CAAA,EAAG,CAAA,IAAKyU,KAAKG,IAAIkrB,GAAS,CAAA,GAAIxxB,GAAM,CAAA,CAAA,GAC/CkwB,GAAO1yB,OAAO9L,IAAG,CAAA,GACVw+B;AAKTA,kBAAAA,GAAO1yB,OAAO9L,IAAG,CAAA,GACjBA;gBAAAA,OA1CF;AACE,sBAAI8/B,GAAS,CAAA,KAAMxxB,GAAM,CAAA;AAGvB,2BADAkwB,GAAO1yB,OAAO9L,IAAG,GAAG8/B,EAAAA,GACbtB;AAGT,sBAAIsB,GAAS,CAAA,KAAMxxB,GAAM,CAAA;AAIvB,2BADAA,GAAM,CAAA,IAAKmG,KAAKC,IAAIorB,GAAS,CAAA,GAAIxxB,GAAM,CAAA,CAAA,GAChCkwB;AAGLsB,kBAAAA,GAAS,CAAA,IAAKxxB,GAAM,CAAA,MAGtBA,GAAM,CAAA,IAAKmG,KAAKC,IAAIorB,GAAS,CAAA,GAAIxxB,GAAM,CAAA,CAAA,GACvCyxB,KAAAA;gBAAU;cAAA;AAoChB,qBARIA,KAEFvB,GAAOA,GAAOz8B,SAAS,CAAA,EAAG,CAAA,IAAK+9B,GAAS,CAAA,IAGxCtB,GAAOn5B,KAAKy6B,EAAAA,GAGPtB;YACT;UAAA;AAvRWzgB,cAAsB3d,GAAA,CAQ9B,EAAA,GAAA,EAAAgR,cAAAA,CAAAA,GARQ2M,CAAAA,GAAA5d,GAAA4d,yBAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,qBAAAA,QCnDb5d,GAAA,qBAAA,MAAA;YAMEI,YACU8vB,IACQrsB,IAAAA;AADR,mBAAAqsB,YAAAA,IACQ,KAAArsB,SAAAA,IALV,KAAAg8B,aAAAA,OACA,KAAAC,mBAAAA,QAMNn/B,KAAKuvB,UAAUvuB,iBAAiB,SAAS,MAAMhB,KAAKk/B,aAAAA,IAAa,GACjEl/B,KAAKuvB,UAAUvuB,iBAAiB,QAAQ,MAAMhB,KAAKk/B,aAAAA,KAAa;YAClE;YAEWxW,IAAAA,MAAAA;AACT,qBAAO1oB,KAAKkD,OAAO+Q;YACrB;YAEW4mB,IAAAA,YAAAA;AAKT,qBAAA,WAJI76B,KAAKm/B,qBACPn/B,KAAKm/B,mBAAmBn/B,KAAKk/B,cAAcl/B,KAAKuvB,UAAUxT,cAAcqjB,SAAAA,GACxEC,eAAe,MAAMr/B,KAAKm/B,mBAAAA,MAAmB1vB,IAExCzP,KAAKm/B;YACd;UAAA;QAAA,GAAA,MAAA,SAAA//B,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,eAAA;AC1BF,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAEA,cAAaye,IAAb,MAAA;YAGEle,YACmCE,IACEgd,IAAAA;AADF,mBAAAhd,iBAAAA,IACE,KAAAgd,mBAAAA;YAErC;YAEO1M,UAAU5F,IAA2C5I,IAAsB0vB,IAAkB3d,IAAkB+d,IAAAA;AACpH,sBAAO,GAAA,EAAAthB,WACL/M,QACAmH,IACA5I,IACA0vB,IACA3d,IACAxT,KAAK2c,iBAAiB0I,cACtBrlB,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG,OACxCrG,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,QACxCorB,EAAAA;YAEJ;YAEOvR,qBAAqB3V,IAAmB5I,IAAAA;AAC7C,oBAAMuO,MAAS,GAAA,EAAA2gB,4BAA2BztB,QAAQmH,IAAO5I,EAAAA;AAIzD,kBAAA,EAAA,CAAKzB,KAAK2c,iBAAiB0I,gBACtBrV,GAAO,CAAA,IAAK,KACZA,GAAO,CAAA,IAAK,KACZA,GAAO,CAAA,KAAMhQ,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOD,SACvD2J,GAAO,CAAA,KAAMhQ,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOH;AAI5D,uBAAO,EACLqa,KAAK7M,KAAKuW,MAAMla,GAAO,CAAA,IAAKhQ,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKG,KAAAA,GACpEoa,KAAK9M,KAAKuW,MAAMla,GAAO,CAAA,IAAKhQ,KAAKL,eAAeqG,WAAWC,IAAIC,KAAKC,MAAAA,GACpE2F,GAAG6H,KAAKuW,MAAMla,GAAO,CAAA,CAAA,GACrBjE,GAAG4H,KAAKuW,MAAMla,GAAO,CAAA,CAAA,EAAA;YAEzB;UAAA;AA1CW2N,cAAYre,GAAA,CAIpB,EAAA,GAAA,EAAA8d,cAAAA,GACA,EAAA,GAAA,EAAAP,gBAAAA,CAAAA,GALQc,CAAAA,GAAAte,GAAAse,eAAAA;QAAAA,GAAAA,MAAAA,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,cAAAA,KAAAA,QAAAA,KAAAA,cAAAA,SAAAA,IAAAA,IAAAA,IAAAA,IAAAA;AAAAA,gBAAAA,IAAAA,KAAAA,UAAAA,QAAAA,KAAAA,KAAAA,IAAAA,KAAAA,SAAAA,KAAAA,KAAAA,OAAAA,yBAAAA,IAAAA,EAAAA,IAAAA;AAAAA,gBAAAA,YAAAA,OAAAA,WAAAA,cAAAA,OAAAA,QAAAA;AAAAA,cAAAA,KAAAA,QAAAA,SAAAA,IAAAA,IAAAA,IAAAA,EAAAA;;AAAAA,uBAAAA,KAAAA,GAAAA,SAAAA,GAAAA,MAAAA,GAAAA;AAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,OAAAA,MAAAA,KAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,MAAAA;AAAAA,mBAAAA,KAAAA,KAAAA,MAAAA,OAAAA,eAAAA,IAAAA,IAAAA,EAAAA,GAAAA;UAAAA,GAAAA,IAAAA,QAAAA,KAAAA,WAAAA,SAAAA,IAAAA,IAAAA;AAAAA,mBAAAA,SAAAA,IAAAA,IAAAA;AAAAA,cAAAA,GAAAA,IAAAA,IAAAA,EAAAA;YAAAA;UAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,gBAAAA;ACFb,gBAAA,IAAAze,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AASA,cAAaie,IAAb,cAAmC,EAAA3d,WAAAA;YA+BjCC,YACUgU,IACRrM,IACiBkY,IACkB3C,IACf2iB,IACJ3N,IACK4N,IACNzY,IAAAA;AAuDf,kBArDAlnB,MAAAA,GATQ,KAAA6T,YAAAA,IAG2B,KAAAkJ,mBAAAA,IA7B7B,KAAA6iB,oBAAoB,IAAI,EAAAC,qBAExB,KAAAC,YAAAA,OACA,KAAAC,oBAAAA,OACA,KAAAC,0BAAAA,MACA,KAAAC,yBAAAA,OACA,KAAAC,eAAuB,GACvB,KAAAC,gBAAwB,GACxB,KAAAC,kBAAmC,EACzCh+B,OAAAA,QACAC,KAAAA,QACA2c,kBAAAA,MAAkB,GAGH,KAAAqhB,sBAAsBjgC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACzC,KAAApH,qBAAsB/C,KAAKigC,oBAAoB51B,OAC9C,KAAA61B,4BAA4BlgC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/C,KAAAgF,2BAA2BnP,KAAKkgC,0BAA0B71B,OACzD,KAAAiL,YAAYtV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAApI,WAAW/B,KAAKsV,UAAUjL,OACzB,KAAA81B,oBAAoBngC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACvC,KAAAi2B,mBAAmBpgC,KAAKmgC,kBAAkB91B,OAgBxDrK,KAAK4B,SAAS,EAAE4H,SAAS,MAAA;AAAK,oBAAApK;AAAC,uBAAc,UAAdA,KAAAY,KAAKqgC,cAAAA,WAASjhC,KAAA,SAAAA,GAAEoK,QAAAA;cAAS,EAAA,CAAA,GAExDxJ,KAAKsgC,mBAAmB,IAAI,EAAAC,gBAAgBhB,GAAmBr8B,QAAQ,CAAClB,IAAOC,OAAQjC,KAAKqB,YAAYW,IAAOC,EAAAA,CAAAA,GAC/GjC,KAAK4B,SAAS5B,KAAKsgC,gBAAAA,GAEnBtgC,KAAKgD,oBAAoB,IAAI,EAAAC,iBAAiBs8B,GAAmBr8B,MAAAA,GACjElD,KAAKgD,kBAAkBG,YAAY,MAAMnD,KAAK21B,6BAAAA,CAAAA,GAC9C31B,KAAK4B,SAAS5B,KAAKgD,iBAAAA,GAEnBhD,KAAK4B,SAAS+vB,GAAc9vB,SAAS,MAAM7B,KAAKwgC,aAAAA,CAAAA,CAAAA,GAChDxgC,KAAK4B,SAAS+vB,GAAc9Y,QAAQmP,iBAAiB,MAAA;AAAK,oBAAA5oB;AAAC,uBAAc,UAAdA,KAAAY,KAAKqgC,cAAAA,WAASjhC,KAAA,SAAAA,GAAE4J,MAAAA;cAAO,CAAA,CAAA,GAClFhJ,KAAK4B,SAAS0d,GAAeuU,eAAe,MAAM7zB,KAAK8zB,sBAAAA,CAAAA,CAAAA,GACvD9zB,KAAK4B,SAAS5B,KAAK2c,iBAAiB4f,iBAAiB,MAAMv8B,KAAK41B,sBAAAA,CAAAA,CAAAA,GAKhE51B,KAAK4B,SAAS09B,GAAkBtU,uBAAuB,MAAMhrB,KAAKwgC,aAAAA,CAAAA,CAAAA,GAClExgC,KAAK4B,SAAS09B,GAAkBrU,oBAAoB,MAAMjrB,KAAKwgC,aAAAA,CAAAA,CAAAA,GAG/DxgC,KAAK4B,SAAS0d,GAAeod,uBAAuB,CAClD,gBACA,8BACA,iBACA,cACA,cACA,YACA,cACA,kBACA,sBAAA,GACC,MAAA;AACD18B,qBAAKgJ,MAAAA,GACLhJ,KAAKme,aAAawT,GAAcjkB,MAAMikB,GAAcjxB,IAAAA,GACpDV,KAAKwgC,aAAAA;cAAc,CAAA,CAAA,GAIrBxgC,KAAK4B,SAAS0d,GAAeod,uBAAuB,CAClD,eACA,aAAA,GACC,MAAM18B,KAAKqiB,YAAYsP,GAAc/tB,OAAOmI,GAAG4lB,GAAc/tB,OAAOmI,GAAAA,IAAG,CAAA,CAAA,GAI1E/L,KAAK4B,UAAS,GAAA,EAAAwB,0BAAyBm8B,GAAmBr8B,QAAQ,UAAU,MAAMlD,KAAK21B,6BAAAA,CAAAA,CAAAA,GAEvF31B,KAAK4B,SAASklB,GAAasB,eAAe,MAAMpoB,KAAKwgC,aAAAA,CAAAA,CAAAA,GAIjD,0BAA0BjB,GAAmBr8B,QAAQ;AACvD,sBAAMu9B,KAAW,IAAIlB,GAAmBr8B,OAAOw9B,qBAAqBthC,CAAAA,OAAKY,KAAK2gC,0BAA0BvhC,GAAEA,GAAE6B,SAAS,CAAA,CAAA,GAAK,EAAE2/B,WAAW,EAAA,CAAA;AACvIH,gBAAAA,GAASI,QAAQz5B,EAAAA,GACjBpH,KAAK4B,SAAS,EAAE4H,SAAS,MAAMi3B,GAASK,WAAAA,EAAAA,CAAAA;cAAAA;YAE5C;YAtEW96B,IAAAA,aAAAA;AAAkC,qBAAOhG,KAAKqgC,UAAWr6B;YAAY;YAwExE26B,0BAA0BI,IAAAA;AAChC/gC,mBAAK0/B,YAAAA,WAAYqB,GAAMC,iBAA4D,MAA5BD,GAAME,oBAAAA,CAA4BF,GAAMC,gBAG1FhhC,KAAK0/B,aAAc1/B,KAAK2c,iBAAiB0I,gBAC5CrlB,KAAK2c,iBAAiBgD,QAAAA,GAAAA,CAGnB3f,KAAK0/B,aAAa1/B,KAAK2/B,sBAC1B3/B,KAAKw/B,kBAAkB0B,MAAAA,GACvBlhC,KAAKqiB,YAAY,GAAGriB,KAAKyT,YAAY,CAAA,GACrCzT,KAAK2/B,oBAAAA;YAET;YAEOtd,YAAYrgB,IAAeC,IAAak/B,KAAAA,OAAwB;AACjEnhC,mBAAK0/B,YACP1/B,KAAK2/B,oBAAAA,QAGFwB,OACHnhC,KAAK4/B,0BAAAA,QAEP5/B,KAAKsgC,iBAAiB/6B,QAAQvD,IAAOC,IAAKjC,KAAKyT,SAAAA;YACjD;YAEQpS,YAAYW,IAAeC,IAAAA;AAC5BjC,mBAAKqgC,cAGVrgC,KAAKqgC,UAAUxK,WAAW7zB,IAAOC,EAAAA,GAG7BjC,KAAK6/B,2BACP7/B,KAAKqgC,UAAU1hB,uBAAuB3e,KAAKggC,gBAAgBh+B,OAAOhC,KAAKggC,gBAAgB/9B,KAAKjC,KAAKggC,gBAAgBphB,gBAAAA,GACjH5e,KAAK6/B,yBAAAA,QAIF7/B,KAAK4/B,2BACR5/B,KAAKkgC,0BAA0BxwB,KAAK,EAAE1N,OAAAA,IAAOC,KAAAA,GAAAA,CAAAA,GAE/CjC,KAAKsV,UAAU5F,KAAK,EAAE1N,OAAAA,IAAOC,KAAAA,GAAAA,CAAAA,GAC7BjC,KAAK4/B,0BAAAA;YACP;YAEOviB,OAAO3P,IAAchN,IAAAA;AAC1BV,mBAAKyT,YAAY/S,IACjBV,KAAKohC,oBAAAA;YACP;YAEQtN,wBAAAA;AACD9zB,mBAAKqgC,cAGVrgC,KAAKqiB,YAAY,GAAGriB,KAAKyT,YAAY,CAAA,GACrCzT,KAAKohC,oBAAAA;YACP;YAEQA,sBAAAA;AACDphC,mBAAKqgC,cAINrgC,KAAKqgC,UAAUr6B,WAAWC,IAAIK,OAAOD,UAAUrG,KAAK8/B,gBAAgB9/B,KAAKqgC,UAAUr6B,WAAWC,IAAIK,OAAOH,WAAWnG,KAAK+/B,iBAG7H//B,KAAKigC,oBAAoBvwB,KAAK1P,KAAKqgC,UAAUr6B,UAAAA;YAC/C;YAEOwX,cAAAA;AACL,qBAAA,CAAA,CAASxd,KAAKqgC;YAChB;YAEO5iB,YAAY4jB,IAAAA;AAAAA,kBAAAA;AAEH,wBAAdhiC,KAAAW,KAAKqgC,cAAAA,WAAShhC,MAAAA,GAAEmK,QAAAA,GAChBxJ,KAAKqgC,YAAYgB,IACjBrhC,KAAKqgC,UAAU3hB,gBAAgBtf,CAAAA,OAAKY,KAAKqiB,YAAYjjB,GAAE4C,OAAO5C,GAAE6C,KAAAA,IAAK,CAAA,GAGrEjC,KAAK6/B,yBAAAA,MACL7/B,KAAKwgC,aAAAA;YACP;YAEOrtB,mBAAmBxC,IAAAA;AACxB,qBAAO3Q,KAAKsgC,iBAAiBntB,mBAAmBxC,EAAAA;YAClD;YAEQ6vB,eAAAA;AACFxgC,mBAAK0/B,YACP1/B,KAAK2/B,oBAAAA,OAEL3/B,KAAKqiB,YAAY,GAAGriB,KAAKyT,YAAY,CAAA;YAEzC;YAEOgS,oBAAAA;AAAAA,kBAAAA,IAAAA;AACAzlB,mBAAKqgC,cAGsB,UAAhChhC,MAAAD,KAAAY,KAAKqgC,WAAU5a,sBAAAA,WAAiBpmB,MAAAA,GAAA,KAAAD,EAAA,GAChCY,KAAKwgC,aAAAA;YACP;YAEO7K,+BAAAA;AAGL31B,mBAAK2c,iBAAiBgD,QAAAA,GAEjB3f,KAAKqgC,cAGVrgC,KAAKqgC,UAAU1K,6BAAAA,GACf31B,KAAKqiB,YAAY,GAAGriB,KAAKyT,YAAY,CAAA;YACvC;YAEO0K,aAAazQ,IAAchN,IAAAA;AAC3BV,mBAAKqgC,cAGNrgC,KAAK0/B,YACP1/B,KAAKw/B,kBAAkB72B,IAAI,MAAM3I,KAAKqgC,UAAWliB,aAAazQ,IAAMhN,EAAAA,CAAAA,IAEpEV,KAAKqgC,UAAUliB,aAAazQ,IAAMhN,EAAAA,GAEpCV,KAAKwgC,aAAAA;YACP;YAGO5K,wBAAAA;AAAAA,kBAAAA;AACS,wBAAdx2B,KAAAY,KAAKqgC,cAAAA,WAASjhC,MAAAA,GAAEw2B,sBAAAA;YAClB;YAEOxX,aAAAA;AAAAA,kBAAAA;AACS,wBAAdhf,KAAAY,KAAKqgC,cAAAA,WAASjhC,MAAAA,GAAEgf,WAAAA;YAClB;YAEOC,cAAAA;AAAAA,kBAAAA;AACS,wBAAdjf,KAAAY,KAAKqgC,cAAAA,WAASjhC,MAAAA,GAAEif,YAAAA;YAClB;YAEOM,uBAAuB3c,IAAqCC,IAAmC2c,IAAAA;AAAAA,kBAAAA;AACpG5e,mBAAKggC,gBAAgBh+B,QAAQA,IAC7BhC,KAAKggC,gBAAgB/9B,MAAMA,IAC3BjC,KAAKggC,gBAAgBphB,mBAAmBA,IAC1B,UAAdtf,KAAAU,KAAKqgC,cAAAA,WAAS/gC,MAAAA,GAAEqf,uBAAuB3c,IAAOC,IAAK2c,EAAAA;YACrD;YAEOV,mBAAAA;AAAAA,kBAAAA;AACS,wBAAd9e,KAAAY,KAAKqgC,cAAAA,WAASjhC,MAAAA,GAAE8e,iBAAAA;YAClB;YAEOlV,QAAAA;AAAAA,kBAAAA;AACS,wBAAd5J,KAAAY,KAAKqgC,cAAAA,WAASjhC,MAAAA,GAAE4J,MAAAA;YAClB;UAAA;AAhQWmU,cAAa7d,GAAA,CAkCrB,EAAA,GAAA,EAAAsT,eAAAA,GACA,EAAA,GAAA,EAAAiK,gBAAAA,GACA,EAAA,GAAA,EAAApG,kBAAAA,GACA,EAAA,GAAA,EAAAnG,cAAAA,GACA,EAAA,GAAA,EAAAoM,mBAAAA,GACA,EAAA,GAAA,EAAAK,aAAAA,CAAAA,GAvCQI,CAAAA,GAAA9d,GAAA8d,gBAAAA;QAAAA,GAAAA,MAAAA,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,cAAAA,KAAAA,QAAAA,KAAAA,cAAAA,SAAAA,IAAAA,IAAAA,IAAAA,IAAAA;AAAAA,gBAAAA,IAAAA,KAAAA,UAAAA,QAAAA,KAAAA,KAAAA,IAAAA,KAAAA,SAAAA,KAAAA,KAAAA,OAAAA,yBAAAA,IAAAA,EAAAA,IAAAA;AAAAA,gBAAAA,YAAAA,OAAAA,WAAAA,cAAAA,OAAAA,QAAAA;AAAAA,cAAAA,KAAAA,QAAAA,SAAAA,IAAAA,IAAAA,IAAAA,EAAAA;;AAAAA,uBAAAA,KAAAA,GAAAA,SAAAA,GAAAA,MAAAA,GAAAA;AAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,OAAAA,MAAAA,KAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,MAAAA;AAAAA,mBAAAA,KAAAA,KAAAA,MAAAA,OAAAA,eAAAA,IAAAA,IAAAA,EAAAA,GAAAA;UAAAA,GAAAA,IAAAA,QAAAA,KAAAA,WAAAA,SAAAA,IAAAA,IAAAA;AAAAA,mBAAAA,SAAAA,IAAAA,IAAAA;AAAAA,cAAAA,GAAAA,IAAAA,IAAAA,EAAAA;YAAAA;UAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,mBAAAA;ACfb,gBAAA,IAAAje,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAwBMoiC,IAA0Brc,OAAOC,aAAa,GAAA,GAC9Cqc,IAA+B,IAAIC,OAAOF,GAAyB,GAAA;AA4BzE,cAAahjB,IAAb,cAAsC,EAAA9e,WAAAA;YAmDpCC,YACmB2L,IACAqf,IACAgX,IACgB53B,IACF2lB,IACCnkB,IACEoF,IACD9Q,IACK4c,IAAAA;AAEtC3c,oBAAAA,GAViB,KAAAwL,WAAAA,IACA,KAAAqf,iBAAAA,IACA,KAAAgX,aAAAA,IACgB,KAAA53B,iBAAAA,IACF,KAAA2lB,eAAAA,IACC,KAAAnkB,gBAAAA,IACE,KAAAoF,kBAAAA,IACD,KAAA9Q,iBAAAA,IACK,KAAA4c,sBAAAA,IAnDhC,KAAAmlB,oBAA4B,GAqB5B,KAAAC,WAAAA,MAKA,KAAApK,YAAsB,IAAI,EAAAvmB,YAE1B,KAAA4wB,sBAA8B,GAC9B,KAAAC,mBAAAA,OACA,KAAAC,qBAAAA,QACA,KAAAC,mBAAAA,QAES,KAAAC,yBAAyBhiC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC5C,KAAA0U,wBAAwB7e,KAAKgiC,uBAAuB33B,OACnD,KAAA43B,mBAAmBjiC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACtC,KAAAuU,kBAAkB1e,KAAKiiC,iBAAiB53B,OACvC,KAAAkL,qBAAqBvV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACxC,KAAAqL,oBAAoBxV,KAAKuV,mBAAmBlL,OAC3C,KAAA63B,wBAAwBliC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC3C,KAAAqU,uBAAuBxe,KAAKkiC,sBAAsB73B,OAgBhErK,KAAKmiC,qBAAqB93B,CAAAA,OAASrK,KAAKuL,iBAAiBlB,EAAAA,GACzDrK,KAAKoiC,mBAAmB/3B,CAAAA,OAASrK,KAAKyL,eAAepB,EAAAA,GACrDrK,KAAKwvB,aAAa6S,YAAY,MAAA;AACxBriC,qBAAKwa,gBACPxa,KAAK2jB,eAAAA;cAAAA,CAAAA,GAGT3jB,KAAKsiC,gBAAgBtiC,KAAK6J,eAAejG,OAAOC,MAAM0+B,OAAOxkB,CAAAA,OAAU/d,KAAKwiC,YAAYzkB,EAAAA,CAAAA,GACxF/d,KAAK4B,SAAS5B,KAAK6J,eAAegP,QAAQmP,iBAAiB5oB,CAAAA,OAAKY,KAAKyiC,sBAAsBrjC,EAAAA,CAAAA,CAAAA,GAE3FY,KAAKof,OAAAA,GAELpf,KAAK0iC,SAAS,IAAI,EAAAC,eAAe3iC,KAAK6J,cAAAA,GACtC7J,KAAK4iC,uBAAuB,GAE5B5iC,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AACzBrD,qBAAK6iC,0BAAAA;cAA2B,CAAA,CAAA;YAEpC;YAEO7rB,QAAAA;AACLhX,mBAAK2jB,eAAAA;YACP;YAMOxE,UAAAA;AACLnf,mBAAK2jB,eAAAA,GACL3jB,KAAK2hC,WAAAA;YACP;YAKOviB,SAAAA;AACLpf,mBAAK2hC,WAAAA;YACP;YAEWle,IAAAA,iBAAAA;AAAiD,qBAAOzjB,KAAK0iC,OAAOzG;YAAqB;YACzFvY,IAAAA,eAAAA;AAA+C,qBAAO1jB,KAAK0iC,OAAOvG;YAAmB;YAKrF3hB,IAAAA,eAAAA;AACT,oBAAMxY,KAAQhC,KAAK0iC,OAAOzG,qBACpBh6B,KAAMjC,KAAK0iC,OAAOvG;AACxB,qBAAA,EAAA,CAAKn6B,MAAAA,CAAUC,MAGRD,GAAM,CAAA,MAAOC,GAAI,CAAA,KAAMD,GAAM,CAAA,MAAOC,GAAI,CAAA;YACjD;YAKW8F,IAAAA,gBAAAA;AACT,oBAAM/F,KAAQhC,KAAK0iC,OAAOzG,qBACpBh6B,KAAMjC,KAAK0iC,OAAOvG;AACxB,kBAAA,CAAKn6B,MAAAA,CAAUC;AACb,uBAAO;AAGT,oBAAM2B,KAAS5D,KAAK6J,eAAejG,QAC7BiN,KAAmB,CAAA;AAEzB,kBAAkC,MAA9B7Q,KAAK4iC,sBAA+C;AAEtD,oBAAI5gC,GAAM,CAAA,MAAOC,GAAI,CAAA;AACnB,yBAAO;AAKT,sBAAMqwB,KAAWtwB,GAAM,CAAA,IAAKC,GAAI,CAAA,IAAKD,GAAM,CAAA,IAAKC,GAAI,CAAA,GAC9CswB,KAASvwB,GAAM,CAAA,IAAKC,GAAI,CAAA,IAAKA,GAAI,CAAA,IAAKD,GAAM,CAAA;AAClD,yBAAS9C,KAAI8C,GAAM,CAAA,GAAI9C,MAAK+C,GAAI,CAAA,GAAI/C,MAAK;AACvC,wBAAM4jC,KAAWl/B,GAAO+B,4BAA4BzG,IAAAA,MAASozB,IAAUC,EAAAA;AACvE1hB,kBAAAA,GAAOtM,KAAKu+B,EAAAA;gBAAAA;cAAAA,OAET;AAEL,sBAAMC,KAAiB/gC,GAAM,CAAA,MAAOC,GAAI,CAAA,IAAKA,GAAI,CAAA,IAAA;AACjD4O,gBAAAA,GAAOtM,KAAKX,GAAO+B,4BAA4B3D,GAAM,CAAA,GAAA,MAAUA,GAAM,CAAA,GAAI+gC,EAAAA,CAAAA;AAGzE,yBAAS7jC,KAAI8C,GAAM,CAAA,IAAK,GAAG9C,MAAK+C,GAAI,CAAA,IAAK,GAAG/C,MAAK;AAC/C,wBAAM4a,KAAalW,GAAOC,MAAMgF,IAAI3J,EAAAA,GAC9B4jC,KAAWl/B,GAAO+B,4BAA4BzG,IAAAA,IAAG;AAAA,mBACnD4a,QAAAA,KAAAA,SAAAA,GAAYoY,aACdrhB,GAAOA,GAAO5P,SAAS,CAAA,KAAM6hC,KAE7BjyB,GAAOtM,KAAKu+B,EAAAA;gBAAAA;AAKhB,oBAAI9gC,GAAM,CAAA,MAAOC,GAAI,CAAA,GAAI;AACvB,wBAAM6X,KAAalW,GAAOC,MAAMgF,IAAI5G,GAAI,CAAA,CAAA,GAClC6gC,KAAWl/B,GAAO+B,4BAA4B1D,GAAI,CAAA,GAAA,MAAU,GAAGA,GAAI,CAAA,CAAA;AACrE6X,kBAAAA,MAAcA,GAAYoY,YAC5BrhB,GAAOA,GAAO5P,SAAS,CAAA,KAAM6hC,KAE7BjyB,GAAOtM,KAAKu+B,EAAAA;gBAAAA;cAAAA;AAWlB,qBAJwBjyB,GAAO7D,IAAI4D,CAAAA,OAC1BA,GAAKnK,QAAQ86B,GAA8B,GAAA,CAAA,EACjDlI,KAAKvkB,EAAQ8P,YAAY,SAAS,IAAA;YAGvC;YAKOjB,iBAAAA;AACL3jB,mBAAK0iC,OAAO/e,eAAAA,GACZ3jB,KAAK6iC,0BAAAA,GACL7iC,KAAKuF,QAAAA,GACLvF,KAAKuV,mBAAmB7F,KAAAA;YAC1B;YAOOnK,QAAQy9B,IAAAA;AAERhjC,mBAAKwnB,2BACRxnB,KAAKwnB,yBAAyBxnB,KAAKuc,oBAAoBrZ,OAAOkQ,sBAAsB,MAAMpT,KAAKuoB,SAAAA,CAAAA,IAK7FzT,EAAQmG,WAAW+nB,MACChjC,KAAK+H,cACT9G,UAChBjB,KAAKgiC,uBAAuBtyB,KAAK1P,KAAK+H,aAAAA;YAG5C;YAMQwgB,WAAAA;AACNvoB,mBAAKwnB,yBAAAA,QACLxnB,KAAKiiC,iBAAiBvyB,KAAK,EACzB1N,OAAOhC,KAAK0iC,OAAOzG,qBACnBh6B,KAAKjC,KAAK0iC,OAAOvG,mBACjBvd,kBAAgD,MAA9B5e,KAAK4iC,qBAAAA,CAAAA;YAE3B;YAMQK,oBAAoB54B,IAAAA;AAC1B,oBAAM2F,KAAShQ,KAAKkjC,sBAAsB74B,EAAAA,GACpCrI,KAAQhC,KAAK0iC,OAAOzG,qBACpBh6B,KAAMjC,KAAK0iC,OAAOvG;AAExB,qBAAA,CAAA,EAAKn6B,MAAUC,MAAQ+N,OAIhBhQ,KAAKmjC,sBAAsBnzB,IAAQhO,IAAOC,EAAAA;YACnD;YAEOmhC,kBAAkBt3B,IAAWC,IAAAA;AAClC,oBAAM/J,KAAQhC,KAAK0iC,OAAOzG,qBACpBh6B,KAAMjC,KAAK0iC,OAAOvG;AACxB,qBAAA,EAAA,CAAKn6B,MAAAA,CAAUC,OAGRjC,KAAKmjC,sBAAsB,CAACr3B,IAAGC,EAAAA,GAAI/J,IAAOC,EAAAA;YACnD;YAEUkhC,sBAAsBnzB,IAA0BhO,IAAyBC,IAAAA;AACjF,qBAAQ+N,GAAO,CAAA,IAAKhO,GAAM,CAAA,KAAMgO,GAAO,CAAA,IAAK/N,GAAI,CAAA,KAC3CD,GAAM,CAAA,MAAOC,GAAI,CAAA,KAAM+N,GAAO,CAAA,MAAOhO,GAAM,CAAA,KAAMgO,GAAO,CAAA,KAAMhO,GAAM,CAAA,KAAMgO,GAAO,CAAA,IAAK/N,GAAI,CAAA,KAC1FD,GAAM,CAAA,IAAKC,GAAI,CAAA,KAAM+N,GAAO,CAAA,MAAO/N,GAAI,CAAA,KAAM+N,GAAO,CAAA,IAAK/N,GAAI,CAAA,KAC7DD,GAAM,CAAA,IAAKC,GAAI,CAAA,KAAM+N,GAAO,CAAA,MAAOhO,GAAM,CAAA,KAAMgO,GAAO,CAAA,KAAMhO,GAAM,CAAA;YACzE;YAMQqhC,oBAAoBh5B,IAAmBi5B,IAAAA;AAAAA,kBAAAA,IAAAA;AAE7C,oBAAM91B,KAAyC,UAAjClO,KAA2B,UAA3BJ,KAAAc,KAAKyhC,WAAW/2B,gBAAAA,WAAWxL,KAAA,SAAAA,GAAEiN,SAAAA,WAAI7M,KAAA,SAAAA,GAAEkO;AACjD,kBAAIA;AAIF,uBAHAxN,KAAK0iC,OAAOjf,iBAAiB,CAACjW,GAAMxL,MAAM8J,IAAI,GAAG0B,GAAMxL,MAAM+J,IAAI,CAAA,GACjE/L,KAAK0iC,OAAO1G,wBAAuB,GAAA,EAAAuH,gBAAe/1B,IAAOxN,KAAK6J,eAAe6D,IAAAA,GAC7E1N,KAAK0iC,OAAOhf,eAAAA,QAAejU;AAI7B,oBAAMO,KAAShQ,KAAKkjC,sBAAsB74B,EAAAA;AAC1C,qBAAA,CAAA,CAAI2F,OACFhQ,KAAKwjC,cAAcxzB,IAAQszB,EAAAA,GAC3BtjC,KAAK0iC,OAAOhf,eAAAA,QAAejU;YAI/B;YAKOmU,YAAAA;AACL5jB,mBAAK0iC,OAAO3G,oBAAAA,MACZ/7B,KAAKuF,QAAAA,GACLvF,KAAKuV,mBAAmB7F,KAAAA;YAC1B;YAEOmU,YAAY7hB,IAAeC,IAAAA;AAChCjC,mBAAK0iC,OAAO/e,eAAAA,GACZ3hB,KAAQ2R,KAAKG,IAAI9R,IAAO,CAAA,GACxBC,KAAM0R,KAAKC,IAAI3R,IAAKjC,KAAK6J,eAAejG,OAAOC,MAAM5C,SAAS,CAAA,GAC9DjB,KAAK0iC,OAAOjf,iBAAiB,CAAC,GAAGzhB,EAAAA,GACjChC,KAAK0iC,OAAOhf,eAAe,CAAC1jB,KAAK6J,eAAe6D,MAAMzL,EAAAA,GACtDjC,KAAKuF,QAAAA,GACLvF,KAAKuV,mBAAmB7F,KAAAA;YAC1B;YAMQ8yB,YAAYzkB,IAAAA;AACG/d,mBAAK0iC,OAAOrG,WAAWte,EAAAA,KAE1C/d,KAAKuF,QAAAA;YAET;YAMQ29B,sBAAsB74B,IAAAA;AAC5B,oBAAM2F,KAAShQ,KAAKqL,cAAc4E,UAAU5F,IAAOrK,KAAKyqB,gBAAgBzqB,KAAK6J,eAAe6D,MAAM1N,KAAK6J,eAAenJ,MAAAA,IAAM;AAC5H,kBAAKsP;AAUL,uBALAA,GAAO,CAAA,KACPA,GAAO,CAAA,KAGPA,GAAO,CAAA,KAAMhQ,KAAK6J,eAAejG,OAAOgC,OACjCoK;YACT;YAOQyzB,2BAA2Bp5B,IAAAA;AACjC,kBAAIq5B,MAAS,GAAA,EAAA/S,4BAA2B3wB,KAAKuc,oBAAoBrZ,QAAQmH,IAAOrK,KAAKyqB,cAAAA,EAAgB,CAAA;AACrG,oBAAMkZ,KAAiB3jC,KAAKL,eAAeqG,WAAWC,IAAIK,OAAOH;AACjE,qBAAIu9B,MAAU,KAAKA,MAAUC,KACpB,KAELD,KAASC,OACXD,MAAUC,KAGZD,KAAS/vB,KAAKC,IAAID,KAAKG,IAAI4vB,IAAAA,GA1YG,GAAA,EAAA,GA2Y9BA,MA3Y8B,IA4YtBA,KAAS/vB,KAAKsO,IAAIyhB,EAAAA,IAAW/vB,KAAKkV,MAAe,KAAT6a,EAAAA;YAClD;YAOO9hB,qBAAqBvX,IAAAA;AAC1B,qBAAIyK,EAAQ5P,QACHmF,GAAMwW,UAAU7gB,KAAKyQ,gBAAgBM,WAAW6yB,gCAGlDv5B,GAAMyW;YACf;YAMO9B,gBAAgB3U,IAAAA;AAIrB,kBAHArK,KAAK4hC,sBAAsBv3B,GAAMw5B,YAGZ,MAAjBx5B,GAAMyQ,UAAAA,CAAgB9a,KAAKwa,iBAKV,MAAjBnQ,GAAMyQ,QAAV;AAKA,oBAAA,CAAK9a,KAAK2hC,UAAU;AAClB,sBAAA,CAAK3hC,KAAK4hB,qBAAqBvX,EAAAA;AAC7B;AAIFA,kBAAAA,GAAMrC,gBAAAA;gBAAAA;AAIRqC,gBAAAA,GAAM3F,eAAAA,GAGN1E,KAAK0hC,oBAAoB,GAErB1hC,KAAK2hC,YAAYt3B,GAAMyW,WACzB9gB,KAAK8jC,wBAAwBz5B,EAAAA,IAER,MAAjBA,GAAM05B,SACR/jC,KAAKgkC,mBAAmB35B,EAAAA,IACE,MAAjBA,GAAM05B,SACf/jC,KAAKikC,mBAAmB55B,EAAAA,IACE,MAAjBA,GAAM05B,UACf/jC,KAAKkkC,mBAAmB75B,EAAAA,GAI5BrK,KAAKmkC,uBAAAA,GACLnkC,KAAKuF,QAAAA,IAAQ;cAAA;YACf;YAKQ4+B,yBAAAA;AAEFnkC,mBAAKyqB,eAAe1O,kBACtB/b,KAAKyqB,eAAe1O,cAAc/a,iBAAiB,aAAahB,KAAKmiC,kBAAAA,GACrEniC,KAAKyqB,eAAe1O,cAAc/a,iBAAiB,WAAWhB,KAAKoiC,gBAAAA,IAErEpiC,KAAKokC,2BAA2BpkC,KAAKuc,oBAAoBrZ,OAAOmhC,YAAY,MAAMrkC,KAAKskC,YAAAA,GA5c9D,EAAA;YA6c3B;YAKQzB,4BAAAA;AACF7iC,mBAAKyqB,eAAe1O,kBACtB/b,KAAKyqB,eAAe1O,cAAc3X,oBAAoB,aAAapE,KAAKmiC,kBAAAA,GACxEniC,KAAKyqB,eAAe1O,cAAc3X,oBAAoB,WAAWpE,KAAKoiC,gBAAAA,IAExEpiC,KAAKuc,oBAAoBrZ,OAAOqhC,cAAcvkC,KAAKokC,wBAAAA,GACnDpkC,KAAKokC,2BAAAA;YACP;YAOQN,wBAAwBz5B,IAAAA;AAC1BrK,mBAAK0iC,OAAOjf,mBACdzjB,KAAK0iC,OAAOhf,eAAe1jB,KAAKkjC,sBAAsB74B,EAAAA;YAE1D;YAOQ25B,mBAAmB35B,IAAAA;AAOzB,kBANArK,KAAK0iC,OAAO1G,uBAAuB,GACnCh8B,KAAK0iC,OAAO3G,oBAAAA,OACZ/7B,KAAK4iC,uBAAuB5iC,KAAKsiB,mBAAmBjY,EAAAA,IAAS,IAAuB,GAGpFrK,KAAK0iC,OAAOjf,iBAAiBzjB,KAAKkjC,sBAAsB74B,EAAAA,GAAAA,CACnDrK,KAAK0iC,OAAOjf;AACf;AAEFzjB,mBAAK0iC,OAAOhf,eAAAA;AAGZ,oBAAM9S,KAAO5Q,KAAK6J,eAAejG,OAAOC,MAAMgF,IAAI7I,KAAK0iC,OAAOjf,eAAe,CAAA,CAAA;AACxE7S,cAAAA,MAKDA,GAAK3P,WAAWjB,KAAK0iC,OAAOjf,eAAe,CAAA,KAMM,MAAjD7S,GAAK4zB,SAASxkC,KAAK0iC,OAAOjf,eAAe,CAAA,CAAA,KAC3CzjB,KAAK0iC,OAAOjf,eAAe,CAAA;YAE/B;YAMQwgB,mBAAmB55B,IAAAA;AACrBrK,mBAAKqjC,oBAAoBh5B,IAAAA,IAAO,MAClCrK,KAAK4iC,uBAAuB;YAEhC;YAOQsB,mBAAmB75B,IAAAA;AACzB,oBAAM2F,KAAShQ,KAAKkjC,sBAAsB74B,EAAAA;AACtC2F,cAAAA,OACFhQ,KAAK4iC,uBAAuB,GAC5B5iC,KAAKykC,cAAcz0B,GAAO,CAAA,CAAA;YAE9B;YAMOsS,mBAAmBjY,IAAAA;AACxB,qBAAOA,GAAMwW,UAAAA,EAAY/L,EAAQ5P,SAASlF,KAAKyQ,gBAAgBM,WAAW6yB;YAC5E;YAOQr4B,iBAAiBlB,IAAAA;AAQvB,kBAJAA,GAAM1F,yBAAAA,GAAAA,CAID3E,KAAK0iC,OAAOjf;AACf;AAKF,oBAAMihB,KAAuB1kC,KAAK0iC,OAAOhf,eAAe,CAAC1jB,KAAK0iC,OAAOhf,aAAa,CAAA,GAAI1jB,KAAK0iC,OAAOhf,aAAa,CAAA,CAAA,IAAM;AAIrH,kBADA1jB,KAAK0iC,OAAOhf,eAAe1jB,KAAKkjC,sBAAsB74B,EAAAA,GAAAA,CACjDrK,KAAK0iC,OAAOhf;AAEf,uBAAA,KADA1jB,KAAKuF,QAAAA,IAAQ;AAKmB,oBAA9BvF,KAAK4iC,uBACH5iC,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK1jB,KAAK0iC,OAAOjf,eAAe,CAAA,IAC3DzjB,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK,IAE9B1jB,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK1jB,KAAK6J,eAAe6D,OAEb,MAA9B1N,KAAK4iC,wBACd5iC,KAAK2kC,gBAAgB3kC,KAAK0iC,OAAOhf,YAAAA,GAInC1jB,KAAK0hC,oBAAoB1hC,KAAKyjC,2BAA2Bp5B,EAAAA,GAKvB,MAA9BrK,KAAK4iC,yBACH5iC,KAAK0hC,oBAAoB,IAC3B1hC,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK1jB,KAAK6J,eAAe6D,OACzC1N,KAAK0hC,oBAAoB,MAClC1hC,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK;AAOlC,oBAAM9f,KAAS5D,KAAK6J,eAAejG;AACnC,kBAAI5D,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK9f,GAAOC,MAAM5C,QAAQ;AACrD,sBAAM2P,KAAOhN,GAAOC,MAAMgF,IAAI7I,KAAK0iC,OAAOhf,aAAa,CAAA,CAAA;AACnD9S,gBAAAA,MAAuD,MAA/CA,GAAK4zB,SAASxkC,KAAK0iC,OAAOhf,aAAa,CAAA,CAAA,KACjD1jB,KAAK0iC,OAAOhf,aAAa,CAAA;cAAA;AAKxBghB,cAAAA,MACHA,GAAqB,CAAA,MAAO1kC,KAAK0iC,OAAOhf,aAAa,CAAA,KACrDghB,GAAqB,CAAA,MAAO1kC,KAAK0iC,OAAOhf,aAAa,CAAA,KACrD1jB,KAAKuF,QAAAA,IAAQ;YAEjB;YAMQ++B,cAAAA;AACN,kBAAKtkC,KAAK0iC,OAAOhf,gBAAiB1jB,KAAK0iC,OAAOjf,kBAG1CzjB,KAAK0hC,mBAAmB;AAC1B1hC,qBAAKkiC,sBAAsBxyB,KAAK,EAAEqO,QAAQ/d,KAAK0hC,mBAAmBjjB,qBAAAA,MAAqB,CAAA;AAKvF,sBAAM7a,KAAS5D,KAAK6J,eAAejG;AAC/B5D,qBAAK0hC,oBAAoB,KACO,MAA9B1hC,KAAK4iC,yBACP5iC,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK1jB,KAAK6J,eAAe6D,OAEpD1N,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK/P,KAAKC,IAAIhQ,GAAOgC,QAAQ5F,KAAK6J,eAAenJ,MAAMkD,GAAOC,MAAM5C,SAAS,CAAA,MAEpE,MAA9BjB,KAAK4iC,yBACP5iC,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK,IAEhC1jB,KAAK0iC,OAAOhf,aAAa,CAAA,IAAK9f,GAAOgC,QAEvC5F,KAAKuF,QAAAA;cAAAA;YAET;YAMQkG,eAAepB,IAAAA;AACrB,oBAAMu6B,KAAcv6B,GAAMw5B,YAAY7jC,KAAK4hC;AAI3C,kBAFA5hC,KAAK6iC,0BAAAA,GAED7iC,KAAK+H,cAAc9G,UAAU,KAAK2jC,KAjpBP,OAipBmDv6B,GAAMwW,UAAU7gB,KAAKyQ,gBAAgBM,WAAW8zB,qBAAAA;AAChI,oBAAI7kC,KAAK6J,eAAejG,OAAOiW,UAAU7Z,KAAK6J,eAAejG,OAAOgC,OAAO;AACzE,wBAAMk/B,KAAc9kC,KAAKqL,cAAc4E,UACrC5F,IACArK,KAAKoL,UACLpL,KAAK6J,eAAe6D,MACpB1N,KAAK6J,eAAenJ,MAAAA,KACpB;AAEF,sBAAIokC,MAAAA,WAAeA,GAAY,CAAA,KAAA,WAAoBA,GAAY,CAAA,GAAkB;AAC/E,0BAAMhjB,MAAW,GAAA,EAAAijB,oBAAmBD,GAAY,CAAA,IAAK,GAAGA,GAAY,CAAA,IAAK,GAAG9kC,KAAK6J,gBAAgB7J,KAAKwvB,aAAazoB,gBAAgBgb,qBAAAA;AACnI/hB,yBAAKwvB,aAAaxoB,iBAAiB8a,IAAAA,IAAU;kBAAA;gBAAA;cAAA;AAIjD9hB,qBAAKglC,6BAAAA;YAET;YAEQA,+BAAAA;AACN,oBAAMhjC,KAAQhC,KAAK0iC,OAAOzG,qBACpBh6B,KAAMjC,KAAK0iC,OAAOvG,mBAClB3hB,KAAAA,EAAAA,CAAiBxY,MAAAA,CAAWC,MAAQD,GAAM,CAAA,MAAOC,GAAI,CAAA,KAAMD,GAAM,CAAA,MAAOC,GAAI,CAAA;AAE7EuY,cAAAA,KAQAxY,MAAUC,OAIVjC,KAAK8hC,sBAAuB9hC,KAAK+hC,oBACpC//B,GAAM,CAAA,MAAOhC,KAAK8hC,mBAAmB,CAAA,KAAM9/B,GAAM,CAAA,MAAOhC,KAAK8hC,mBAAmB,CAAA,KAChF7/B,GAAI,CAAA,MAAOjC,KAAK+hC,iBAAiB,CAAA,KAAM9/B,GAAI,CAAA,MAAOjC,KAAK+hC,iBAAiB,CAAA,KAExE/hC,KAAKilC,uBAAuBjjC,IAAOC,IAAKuY,EAAAA,KAfpCxa,KAAK6hC,oBACP7hC,KAAKilC,uBAAuBjjC,IAAOC,IAAKuY,EAAAA;YAgB9C;YAEQyqB,uBAAuBjjC,IAAqCC,IAAmCuY,IAAAA;AACrGxa,mBAAK8hC,qBAAqB9/B,IAC1BhC,KAAK+hC,mBAAmB9/B,IACxBjC,KAAK6hC,mBAAmBrnB,IACxBxa,KAAKuV,mBAAmB7F,KAAAA;YAC1B;YAEQ+yB,sBAAsBrjC,IAAAA;AAC5BY,mBAAK2jB,eAAAA,GAKL3jB,KAAKsiC,cAAc94B,QAAAA,GACnBxJ,KAAKsiC,gBAAgBljC,GAAE6oB,aAAapkB,MAAM0+B,OAAOxkB,CAAAA,OAAU/d,KAAKwiC,YAAYzkB,EAAAA,CAAAA;YAC9E;YAQQmnB,oCAAoCprB,IAAyBhO,IAAAA;AACnE,kBAAIq5B,KAAYr5B;AAChB,uBAAS5M,KAAI,GAAG4M,MAAK5M,IAAGA,MAAK;AAC3B,sBAAM+B,KAAS6Y,GAAWvI,SAASrS,IAAGc,KAAKu3B,SAAAA,EAAWsB,SAAAA,EAAW53B;AAC/B,sBAA9BjB,KAAKu3B,UAAUtd,SAAAA,IAGjBkrB,OACSlkC,KAAS,KAAK6K,OAAM5M,OAI7BimC,MAAalkC,KAAS;cAAA;AAG1B,qBAAOkkC;YACT;YAEO7hB,aAAa9C,IAAaC,IAAaxf,IAAAA;AAC5CjB,mBAAK0iC,OAAO/e,eAAAA,GACZ3jB,KAAK6iC,0BAAAA,GACL7iC,KAAK0iC,OAAOjf,iBAAiB,CAACjD,IAAKC,EAAAA,GACnCzgB,KAAK0iC,OAAO1G,uBAAuB/6B,IACnCjB,KAAKuF,QAAAA,GACLvF,KAAKglC,6BAAAA;YACP;YAEO78B,iBAAiBhB,IAAAA;AACjBnH,mBAAKijC,oBAAoB97B,EAAAA,MACxBnH,KAAKqjC,oBAAoBl8B,IAAAA,KAAI,KAC/BnH,KAAKuF,QAAAA,IAAQ,GAEfvF,KAAKglC,6BAAAA;YAET;YAMQI,WAAWp1B,IAA0BszB,IAAuC+B,KAAAA,MAAyCC,KAAAA,MAAmC;AAE9J,kBAAIt1B,GAAO,CAAA,KAAMhQ,KAAK6J,eAAe6D;AACnC;AAGF,oBAAM9J,KAAS5D,KAAK6J,eAAejG,QAC7BkW,KAAalW,GAAOC,MAAMgF,IAAImH,GAAO,CAAA,CAAA;AAC3C,kBAAA,CAAK8J;AACH;AAGF,oBAAMlJ,KAAOhN,GAAO+B,4BAA4BqK,GAAO,CAAA,GAAA,KAAI;AAG3D,kBAAIouB,KAAap+B,KAAKklC,oCAAoCprB,IAAY9J,GAAO,CAAA,CAAA,GACzEquB,KAAWD;AAGf,oBAAMmH,KAAav1B,GAAO,CAAA,IAAKouB;AAC/B,kBAAIoH,KAAoB,GACpBC,KAAqB,GACrBC,KAAqB,GACrBC,KAAsB;AAE1B,kBAAgC,QAA5B/0B,GAAKg1B,OAAOxH,EAAAA,GAAqB;AAEnC,uBAAOA,KAAa,KAAqC,QAAhCxtB,GAAKg1B,OAAOxH,KAAa,CAAA;AAChDA,kBAAAA;AAEF,uBAAOC,KAAWztB,GAAK3P,UAAwC,QAA9B2P,GAAKg1B,OAAOvH,KAAW,CAAA;AACtDA,kBAAAA;cAAAA,OAEG;AAKL,oBAAI/L,KAAWtiB,GAAO,CAAA,GAClBuiB,KAASviB,GAAO,CAAA;AAIkB,sBAAlC8J,GAAWG,SAASqY,EAAAA,MACtBkT,MACAlT,OAEkC,MAAhCxY,GAAWG,SAASsY,EAAAA,MACtBkT,MACAlT;AAIF,sBAAMtxB,KAAS6Y,GAAWglB,UAAUvM,EAAAA,EAAQtxB;AAO5C,qBANIA,KAAS,MACX0kC,MAAuB1kC,KAAS,GAChCo9B,MAAYp9B,KAAS,IAIhBqxB,KAAW,KAAK8L,KAAa,KAAA,CAAMp+B,KAAK6lC,qBAAqB/rB,GAAWvI,SAAS+gB,KAAW,GAAGtyB,KAAKu3B,SAAAA,CAAAA,KAAa;AACtHzd,kBAAAA,GAAWvI,SAAS+gB,KAAW,GAAGtyB,KAAKu3B,SAAAA;AACvC,wBAAMt2B,KAASjB,KAAKu3B,UAAUsB,SAAAA,EAAW53B;AACP,wBAA9BjB,KAAKu3B,UAAUtd,SAAAA,KAEjBurB,MACAlT,QACSrxB,KAAS,MAGlBykC,MAAsBzkC,KAAS,GAC/Bm9B,MAAcn9B,KAAS,IAEzBm9B,MACA9L;gBAAAA;AAEF,uBAAOC,KAASzY,GAAW7Y,UAAUo9B,KAAW,IAAIztB,GAAK3P,UAAAA,CAAWjB,KAAK6lC,qBAAqB/rB,GAAWvI,SAASghB,KAAS,GAAGvyB,KAAKu3B,SAAAA,CAAAA,KAAa;AAC9Izd,kBAAAA,GAAWvI,SAASghB,KAAS,GAAGvyB,KAAKu3B,SAAAA;AACrC,wBAAMt2B,KAASjB,KAAKu3B,UAAUsB,SAAAA,EAAW53B;AACP,wBAA9BjB,KAAKu3B,UAAUtd,SAAAA,KAEjBwrB,MACAlT,QACStxB,KAAS,MAGlB0kC,MAAuB1kC,KAAS,GAChCo9B,MAAYp9B,KAAS,IAEvBo9B,MACA9L;gBAAAA;cAAAA;AAKJ8L,cAAAA;AAIA,kBAAIr8B,KACAo8B,KACEmH,KACAC,KACAE,IAIFzkC,KAAS0S,KAAKC,IAAI5T,KAAK6J,eAAe6D,MACxC2wB,KACED,KACAoH,KACAC,KACAC,KACAC,EAAAA;AAEJ,kBAAKrC,MAA4E,OAA5C1yB,GAAKk1B,MAAM1H,IAAYC,EAAAA,EAAU0H,KAAAA,GAAtE;AAKA,oBAAIV,MACY,MAAVrjC,MAA8C,OAA/B8X,GAAWksB,aAAa,CAAA,GAAqB;AAC9D,wBAAMC,KAAqBriC,GAAOC,MAAMgF,IAAImH,GAAO,CAAA,IAAK,CAAA;AACxD,sBAAIi2B,MAAsBnsB,GAAWoY,aAA+E,OAAlE+T,GAAmBD,aAAahmC,KAAK6J,eAAe6D,OAAO,CAAA,GAAqB;AAChI,0BAAMw4B,KAA2BlmC,KAAKolC,WAAW,CAACplC,KAAK6J,eAAe6D,OAAO,GAAGsC,GAAO,CAAA,IAAK,CAAA,GAAA,OAAI,MAAO,KAAM;AAC7G,wBAAIk2B,IAA0B;AAC5B,4BAAMxC,KAAS1jC,KAAK6J,eAAe6D,OAAOw4B,GAAyBlkC;AACnEA,sBAAAA,MAAS0hC,IACTziC,MAAUyiC;oBAAAA;kBAAAA;gBAAAA;AAOlB,oBAAI4B,MACEtjC,KAAQf,OAAWjB,KAAK6J,eAAe6D,QAAkE,OAA1DoM,GAAWksB,aAAahmC,KAAK6J,eAAe6D,OAAO,CAAA,GAAqB;AACzH,wBAAMy4B,KAAiBviC,GAAOC,MAAMgF,IAAImH,GAAO,CAAA,IAAK,CAAA;AACpD,uBAAIm2B,QAAAA,KAAAA,SAAAA,GAAgBjU,cAAgD,OAAnCiU,GAAeH,aAAa,CAAA,GAAqB;AAChF,0BAAMI,KAAuBpmC,KAAKolC,WAAW,CAAC,GAAGp1B,GAAO,CAAA,IAAK,CAAA,GAAA,OAAI,OAAO,IAAO;AAC3Eo2B,oBAAAA,OACFnlC,MAAUmlC,GAAqBnlC;kBAAAA;gBAAAA;AAMvC,uBAAO,EAAEe,OAAAA,IAAOf,QAAAA,GAAAA;cAAAA;YAClB;YAOUuiC,cAAcxzB,IAA0BszB,IAAAA;AAChD,oBAAM+C,KAAermC,KAAKolC,WAAWp1B,IAAQszB,EAAAA;AAC7C,kBAAI+C,IAAc;AAEhB,uBAAOA,GAAarkC,QAAQ;AAC1BqkC,kBAAAA,GAAarkC,SAAShC,KAAK6J,eAAe6D,MAC1CsC,GAAO,CAAA;AAEThQ,qBAAK0iC,OAAOjf,iBAAiB,CAAC4iB,GAAarkC,OAAOgO,GAAO,CAAA,CAAA,GACzDhQ,KAAK0iC,OAAO1G,uBAAuBqK,GAAaplC;cAAAA;YAEpD;YAMQ0jC,gBAAgB30B,IAAAA;AACtB,oBAAMq2B,KAAermC,KAAKolC,WAAWp1B,IAAAA,IAAQ;AAC7C,kBAAIq2B,IAAc;AAChB,oBAAIh4B,KAAS2B,GAAO,CAAA;AAGpB,uBAAOq2B,GAAarkC,QAAQ;AAC1BqkC,kBAAAA,GAAarkC,SAAShC,KAAK6J,eAAe6D,MAC1CW;AAKF,oBAAA,CAAKrO,KAAK0iC,OAAOxG,2BAAAA;AACf,yBAAOmK,GAAarkC,QAAQqkC,GAAaplC,SAASjB,KAAK6J,eAAe6D;AACpE24B,oBAAAA,GAAaplC,UAAUjB,KAAK6J,eAAe6D,MAC3CW;AAIJrO,qBAAK0iC,OAAOhf,eAAe,CAAC1jB,KAAK0iC,OAAOxG,2BAAAA,IAA+BmK,GAAarkC,QAAQqkC,GAAarkC,QAAQqkC,GAAaplC,QAAQoN,EAAAA;cAAAA;YAE1I;YAOQw3B,qBAAqB3/B,IAAAA;AAG3B,qBAAwB,MAApBA,GAAK+T,SAAAA,KAGFja,KAAKyQ,gBAAgBM,WAAWu1B,cAAcv7B,QAAQ7E,GAAK2yB,SAAAA,CAAAA,KAAe;YACnF;YAMU4L,cAAc7zB,IAAAA;AACtB,oBAAM21B,KAAevmC,KAAK6J,eAAejG,OAAO4iC,uBAAuB51B,EAAAA,GACjEpD,KAAsB,EAC1BxL,OAAO,EAAE8J,GAAG,GAAGC,GAAGw6B,GAAaE,MAAAA,GAC/BxkC,KAAK,EAAE6J,GAAG9L,KAAK6J,eAAe6D,OAAO,GAAG3B,GAAGw6B,GAAaG,KAAAA,EAAAA;AAE1D1mC,mBAAK0iC,OAAOjf,iBAAiB,CAAC,GAAG8iB,GAAaE,KAAAA,GAC9CzmC,KAAK0iC,OAAOhf,eAAAA,QACZ1jB,KAAK0iC,OAAO1G,wBAAuB,GAAA,EAAAuH,gBAAe/1B,IAAOxN,KAAK6J,eAAe6D,IAAAA;YAC/E;UAAA;AA57BW4Q,cAAgBhf,GAAA,CAuDxB,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAAogB,YAAAA,GACA,EAAA,GAAA,EAAA9S,aAAAA,GACA,EAAA,GAAA,EAAAhL,eAAAA,GACA,EAAA,GAAA,EAAAwK,cAAAA,GACA,EAAA,GAAA,EAAAV,mBAAAA,CAAAA,GA5DQ4B,CAAAA,GAAAjf,GAAAif,mBAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,gBAAAA,GAAAA,0BAAAA,GAAAA,oBAAAA,GAAAA,iBAAAA,GAAAA,gBAAAA,GAAAA,sBAAAA,GAAAA,mBAAAA;AC9Db,gBAAAhf,KAAAJ,GAAA,IAAA;AAIa,UAAAG,GAAAwd,oBAAmB,GAAAvd,GAAAqnC,iBAAkC,iBAAA,GAarDtnC,GAAAqd,uBAAsB,GAAApd,GAAAqnC,iBAAqC,oBAAA,GAiB3DtnC,GAAAue,iBAAgB,GAAAte,GAAAqnC,iBAA+B,cAAA,GAQ/CtnC,GAAA+d,kBAAiB,GAAA9d,GAAAqnC,iBAAgC,eAAA,GAmCjDtnC,GAAAkf,qBAAoB,GAAAjf,GAAAqnC,iBAAmC,kBAAA,GA6BvDtnC,GAAA6d,2BAA0B,GAAA5d,GAAAqnC,iBAAyC,wBAAA,GASnEtnC,GAAA0d,iBAAgB,GAAAzd,GAAAqnC,iBAA+B,cAAA;QAAA,GAAA,MAAA,SAAAvnC,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,eAAAA,GAAA,sBAAA;ACvH5D,gBAAA,IAAAH,GAAA,IAAA,GAGA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAWM0nC,IAAqB,EAAA3gC,IAAIyS,QAAQ,SAAA,GACjCmuB,IAAqB,EAAA5gC,IAAIyS,QAAQ,SAAA,GACjCouB,IAAiB,EAAA7gC,IAAIyS,QAAQ,SAAA,GAC7BquB,IAAwB,EAAA9gC,IAAIyS,QAAQ,SAAA,GACpCsuB,IAAoB,EACxB/gC,KAAK,4BACLwS,MAAM,WAAA;AAIK,UAAApZ,GAAA4nC,sBAAsBn4B,OAAOo4B,QAAO,MAAA;AAC/C,kBAAMjvB,KAAS,CAEb,EAAAhS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GAEZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,GACZ,EAAAzS,IAAIyS,QAAQ,SAAA,CAAA,GAKR1J,KAAI,CAAC,GAAM,IAAM,KAAM,KAAM,KAAM,GAAA;AACzC,qBAAS9P,KAAI,GAAGA,KAAI,KAAKA,MAAK;AAC5B,oBAAMuK,KAAIuF,GAAG9P,KAAI,KAAM,IAAI,CAAA,GACrBioC,KAAIn4B,GAAG9P,KAAI,IAAK,IAAI,CAAA,GACpBkoC,KAAIp4B,GAAE9P,KAAI,CAAA;AAChB+Y,cAAAA,GAAO1T,KAAK,EACV0B,KAAK,EAAA6R,SAASuvB,MAAM59B,IAAG09B,IAAGC,EAAAA,GAC1B3uB,MAAM,EAAAX,SAASwvB,OAAO79B,IAAG09B,IAAGC,EAAAA,EAAAA,CAAAA;YAAAA;AAKhC,qBAASloC,KAAI,GAAGA,KAAI,IAAIA,MAAK;AAC3B,oBAAMyuB,KAAI,IAAQ,KAAJzuB;AACd+Y,cAAAA,GAAO1T,KAAK,EACV0B,KAAK,EAAA6R,SAASuvB,MAAM1Z,IAAGA,IAAGA,EAAAA,GAC1BlV,MAAM,EAAAX,SAASwvB,OAAO3Z,IAAGA,IAAGA,EAAAA,EAAAA,CAAAA;YAAAA;AAIhC,mBAAO1V;UACR,GA7CgD,CAAA;AA+CjD,cAAa6E,IAAb,cAAkC,EAAAtd,WAAAA;YAYhCC,YACoCgR,IAAAA;AAElC7Q,oBAAAA,GAFkC,KAAA6Q,kBAAAA,IAJnB,KAAA82B,kBAAkBvnC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACrC,KAAAie,iBAAiBpoB,KAAKunC,gBAAgBl9B,OAOpDrK,KAAKwnC,iBAAiB,IAAI,EAAAC,sBAC1BznC,KAAK0nC,UAAU,EACbhT,YAAYkS,GACZte,YAAYue,GACZ9R,QAAQ+R,GACR9R,cAAc+R,GACdnM,qBAAAA,QACA+M,gCAAgCX,GAChCzR,2BAA2B,EAAAxd,MAAM6vB,MAAMf,GAAoBG,CAAAA,GAC3Da,wCAAwCb,GACxCxR,mCAAmC,EAAAzd,MAAM6vB,MAAMf,GAAoBG,CAAAA,GACnE9uB,MAAM7Y,GAAA4nC,oBAAoBnB,MAAAA,GAC1BvK,eAAev7B,KAAKwnC,eAAAA,GAEtBxnC,KAAK8nC,qBAAAA,GACL9nC,KAAK+nC,UAAU/nC,KAAKyQ,gBAAgBM,WAAWi3B,KAAAA,GAE/ChoC,KAAK4B,SAAS5B,KAAKyQ,gBAAgB8O,uBAAuB,wBAAwB,MAAMvf,KAAKwnC,eAAex+B,MAAAA,CAAAA,CAAAA,GAC5GhJ,KAAK4B,SAAS5B,KAAKyQ,gBAAgB8O,uBAAuB,SAAS,MAAMvf,KAAK+nC,UAAU/nC,KAAKyQ,gBAAgBM,WAAWi3B,KAAAA,CAAAA,CAAAA;YAC1H;YA7BW/vB,IAAAA,SAAAA;AAA6B,qBAAOjY,KAAK0nC;YAAS;YAoCrDK,UAAUC,KAAgB,CAAC,GAAA;AACjC,oBAAM/vB,KAASjY,KAAK0nC;AAkBpB,kBAjBAzvB,GAAOyc,aAAauT,EAAWD,GAAMtT,YAAYkS,CAAAA,GACjD3uB,GAAOqQ,aAAa2f,EAAWD,GAAM1f,YAAYue,CAAAA,GACjD5uB,GAAO8c,SAASkT,EAAWD,GAAMjT,QAAQ+R,CAAAA,GACzC7uB,GAAO+c,eAAeiT,EAAWD,GAAMhT,cAAc+R,CAAAA,GACrD9uB,GAAO0vB,iCAAiCM,EAAWD,GAAME,qBAAqBlB,CAAAA,GAC9E/uB,GAAOsd,4BAA4B,EAAAxd,MAAM6vB,MAAM3vB,GAAOqQ,YAAYrQ,GAAO0vB,8BAAAA,GACzE1vB,GAAO4vB,yCAAyCI,EAAWD,GAAMG,6BAA6BlwB,GAAO0vB,8BAAAA,GACrG1vB,GAAOud,oCAAoC,EAAAzd,MAAM6vB,MAAM3vB,GAAOqQ,YAAYrQ,GAAO4vB,sCAAAA,GACjF5vB,GAAO2iB,sBAAsBoN,GAAMpN,sBAAsBqN,EAAWD,GAAMpN,qBAAqB,EAAAwN,UAAAA,IAAAA,QAC3FnwB,GAAO2iB,wBAAwB,EAAAwN,eACjCnwB,GAAO2iB,sBAAAA,SAOL,EAAA7iB,MAAMswB,SAASpwB,GAAO0vB,8BAAAA,GAAiC;AACzD,sBAAMW,KAAU;AAChBrwB,gBAAAA,GAAO0vB,iCAAiC,EAAA5vB,MAAMuwB,QAAQrwB,GAAO0vB,gCAAgCW,EAAAA;cAAAA;AAE/F,kBAAI,EAAAvwB,MAAMswB,SAASpwB,GAAO4vB,sCAAAA,GAAyC;AACjE,sBAAMS,KAAU;AAChBrwB,gBAAAA,GAAO4vB,yCAAyC,EAAA9vB,MAAMuwB,QAAQrwB,GAAO4vB,wCAAwCS,EAAAA;cAAAA;AAmB/G,kBAjBArwB,GAAOC,OAAO7Y,GAAA4nC,oBAAoBnB,MAAAA,GAClC7tB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMO,OAAOlpC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC7DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMQ,KAAKnpC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC3DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMS,OAAOppC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC7DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMU,QAAQrpC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC9DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMW,MAAMtpC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC5DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMY,SAASvpC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC/DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMa,MAAMxpC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC5DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMc,OAAOzpC,GAAA4nC,oBAAoB,CAAA,CAAA,GAC7DhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMe,aAAa1pC,GAAA4nC,oBAAoB,CAAA,CAAA,GACnEhvB,GAAOC,KAAK,CAAA,IAAK+vB,EAAWD,GAAMgB,WAAW3pC,GAAA4nC,oBAAoB,CAAA,CAAA,GACjEhvB,GAAOC,KAAK,EAAA,IAAM+vB,EAAWD,GAAMiB,aAAa5pC,GAAA4nC,oBAAoB,EAAA,CAAA,GACpEhvB,GAAOC,KAAK,EAAA,IAAM+vB,EAAWD,GAAMkB,cAAc7pC,GAAA4nC,oBAAoB,EAAA,CAAA,GACrEhvB,GAAOC,KAAK,EAAA,IAAM+vB,EAAWD,GAAMmB,YAAY9pC,GAAA4nC,oBAAoB,EAAA,CAAA,GACnEhvB,GAAOC,KAAK,EAAA,IAAM+vB,EAAWD,GAAMoB,eAAe/pC,GAAA4nC,oBAAoB,EAAA,CAAA,GACtEhvB,GAAOC,KAAK,EAAA,IAAM+vB,EAAWD,GAAMqB,YAAYhqC,GAAA4nC,oBAAoB,EAAA,CAAA,GACnEhvB,GAAOC,KAAK,EAAA,IAAM+vB,EAAWD,GAAMsB,aAAajqC,GAAA4nC,oBAAoB,EAAA,CAAA,GAChEe,GAAMuB,cAAc;AACtB,sBAAMC,KAAa71B,KAAKC,IAAIqE,GAAOC,KAAKjX,SAAS,IAAI+mC,GAAMuB,aAAatoC,MAAAA;AACxE,yBAAS/B,KAAI,GAAGA,KAAIsqC,IAAYtqC;AAC9B+Y,kBAAAA,GAAOC,KAAKhZ,KAAI,EAAA,IAAM+oC,EAAWD,GAAMuB,aAAarqC,EAAAA,GAAIG,GAAA4nC,oBAAoB/nC,KAAI,EAAA,CAAA;cAAA;AAIpFc,mBAAKwnC,eAAex+B,MAAAA,GACpBhJ,KAAK8nC,qBAAAA,GACL9nC,KAAKunC,gBAAgB73B,KAAK1P,KAAKiY,MAAAA;YACjC;YAEOW,aAAa6wB,IAAAA;AAClBzpC,mBAAK0pC,cAAcD,EAAAA,GACnBzpC,KAAKunC,gBAAgB73B,KAAK1P,KAAKiY,MAAAA;YACjC;YAEQyxB,cAAcD,IAAAA;AAEpB,kBAAA,WAAIA;AAMJ,wBAAQA,IAAAA;kBACN,KAAK;AACHzpC,yBAAK0nC,QAAQhT,aAAa10B,KAAK2pC,eAAejV;AAC9C;kBACF,KAAK;AACH10B,yBAAK0nC,QAAQpf,aAAatoB,KAAK2pC,eAAerhB;AAC9C;kBACF,KAAK;AACHtoB,yBAAK0nC,QAAQ3S,SAAS/0B,KAAK2pC,eAAe5U;AAC1C;kBACF;AACE/0B,yBAAK0nC,QAAQxvB,KAAKuxB,EAAAA,IAAQzpC,KAAK2pC,eAAezxB,KAAKuxB,EAAAA;gBAAAA;;AAhBrD,yBAASvqC,KAAI,GAAGA,KAAIc,KAAK2pC,eAAezxB,KAAKjX,QAAAA,EAAU/B;AACrDc,uBAAK0nC,QAAQxvB,KAAKhZ,EAAAA,IAAKc,KAAK2pC,eAAezxB,KAAKhZ,EAAAA;YAiBtD;YAEOsZ,aAAa7H,IAAAA;AAClBA,cAAAA,GAAS3Q,KAAK0nC,OAAAA,GAEd1nC,KAAKunC,gBAAgB73B,KAAK1P,KAAKiY,MAAAA;YACjC;YAEQ6vB,uBAAAA;AACN9nC,mBAAK2pC,iBAAiB,EACpBjV,YAAY10B,KAAK0nC,QAAQhT,YACzBpM,YAAYtoB,KAAK0nC,QAAQpf,YACzByM,QAAQ/0B,KAAK0nC,QAAQ3S,QACrB7c,MAAMlY,KAAK0nC,QAAQxvB,KAAK4tB,MAAAA,EAAAA;YAE5B;UAAA;AAGF,mBAASmC,EACP2B,IACAC,IAAAA;AAEA,gBAAA,WAAID;AACF,kBAAA;AACE,uBAAO,EAAA3jC,IAAIyS,QAAQkxB,EAAAA;cAAAA,SACnBxqC,IAAA;cAAA;AAIJ,mBAAOyqC;UACT;AA3Ja/sB,cAAYxd,GAAA,CAapB,EAAA,GAAA,EAAAsT,eAAAA,CAAAA,GAbQkK,CAAAA,GAAAzd,GAAAyd,eAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,eAAAA;ACzEb,gBAAAxd,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA;AAgBA,gBAAa4qC,UAAwB,EAAAtqC,WAAAA;YAYnCC,YACUsqC,IAAAA;AAERnqC,oBAAAA,GAFQ,KAAAmqC,aAAAA,IARM,KAAAC,kBAAkBhqC,KAAK4B,SAAS,IAAItC,GAAA6K,cAAAA,GACpC,KAAA8/B,WAAWjqC,KAAKgqC,gBAAgB3/B,OAChC,KAAA6/B,kBAAkBlqC,KAAK4B,SAAS,IAAItC,GAAA6K,cAAAA,GACpC,KAAAggC,WAAWnqC,KAAKkqC,gBAAgB7/B,OAChC,KAAA+/B,gBAAgBpqC,KAAK4B,SAAS,IAAItC,GAAA6K,cAAAA,GAClC,KAAAo4B,SAASviC,KAAKoqC,cAAc//B,OAM1CrK,KAAKqqC,SAAS,IAAIC,MAAStqC,KAAK+pC,UAAAA,GAChC/pC,KAAKuqC,cAAc,GACnBvqC,KAAKwqC,UAAU;YACjB;YAEWC,IAAAA,YAAAA;AACT,qBAAOzqC,KAAK+pC;YACd;YAEWU,IAAAA,UAAUC,IAAAA;AAEnB,kBAAI1qC,KAAK+pC,eAAeW;AACtB;AAKF,oBAAMC,KAAW,IAAIL,MAAqBI,EAAAA;AAC1C,uBAASxrC,KAAI,GAAGA,KAAIyU,KAAKC,IAAI82B,IAAc1qC,KAAKiB,MAAAA,GAAS/B;AACvDyrC,gBAAAA,GAASzrC,EAAAA,IAAKc,KAAKqqC,OAAOrqC,KAAK4qC,gBAAgB1rC,EAAAA,CAAAA;AAEjDc,mBAAKqqC,SAASM,IACd3qC,KAAK+pC,aAAaW,IAClB1qC,KAAKuqC,cAAc;YACrB;YAEWtpC,IAAAA,SAAAA;AACT,qBAAOjB,KAAKwqC;YACd;YAEWvpC,IAAAA,OAAO4pC,IAAAA;AAChB,kBAAIA,KAAY7qC,KAAKwqC;AACnB,yBAAStrC,KAAIc,KAAKwqC,SAAStrC,KAAI2rC,IAAW3rC;AACxCc,uBAAKqqC,OAAOnrC,EAAAA,IAAAA;AAGhBc,mBAAKwqC,UAAUK;YACjB;YAUOhiC,IAAI+E,IAAAA;AACT,qBAAO5N,KAAKqqC,OAAOrqC,KAAK4qC,gBAAgBh9B,EAAAA,CAAAA;YAC1C;YAUOjF,IAAIiF,IAAe3G,IAAAA;AACxBjH,mBAAKqqC,OAAOrqC,KAAK4qC,gBAAgBh9B,EAAAA,CAAAA,IAAU3G;YAC7C;YAOO1C,KAAK0C,IAAAA;AACVjH,mBAAKqqC,OAAOrqC,KAAK4qC,gBAAgB5qC,KAAKwqC,OAAAA,CAAAA,IAAYvjC,IAC9CjH,KAAKwqC,YAAYxqC,KAAK+pC,cACxB/pC,KAAKuqC,cAAAA,EAAgBvqC,KAAKuqC,cAAcvqC,KAAK+pC,YAC7C/pC,KAAKoqC,cAAc16B,KAAK,CAAA,KAExB1P,KAAKwqC;YAET;YAOOM,UAAAA;AACL,kBAAI9qC,KAAKwqC,YAAYxqC,KAAK+pC;AACxB,sBAAM,IAAIroC,MAAM,0CAAA;AAIlB,qBAFA1B,KAAKuqC,cAAAA,EAAgBvqC,KAAKuqC,cAAcvqC,KAAK+pC,YAC7C/pC,KAAKoqC,cAAc16B,KAAK,CAAA,GACjB1P,KAAKqqC,OAAOrqC,KAAK4qC,gBAAgB5qC,KAAKwqC,UAAU,CAAA,CAAA;YACzD;YAKWO,IAAAA,SAAAA;AACT,qBAAO/qC,KAAKwqC,YAAYxqC,KAAK+pC;YAC/B;YAMO9lC,MAAAA;AACL,qBAAOjE,KAAKqqC,OAAOrqC,KAAK4qC,gBAAgB5qC,KAAKwqC,YAAY,CAAA,CAAA;YAC3D;YAWOx/B,OAAOhJ,IAAegpC,OAAwBC,IAAAA;AAEnD,kBAAID,IAAa;AACf,yBAAS9rC,KAAI8C,IAAO9C,KAAIc,KAAKwqC,UAAUQ,IAAa9rC;AAClDc,uBAAKqqC,OAAOrqC,KAAK4qC,gBAAgB1rC,EAAAA,CAAAA,IAAMc,KAAKqqC,OAAOrqC,KAAK4qC,gBAAgB1rC,KAAI8rC,EAAAA,CAAAA;AAE9EhrC,qBAAKwqC,WAAWQ,IAChBhrC,KAAKgqC,gBAAgBt6B,KAAK,EAAE9B,OAAO5L,IAAO+b,QAAQitB,GAAAA,CAAAA;cAAAA;AAIpD,uBAAS9rC,KAAIc,KAAKwqC,UAAU,GAAGtrC,MAAK8C,IAAO9C;AACzCc,qBAAKqqC,OAAOrqC,KAAK4qC,gBAAgB1rC,KAAI+rC,GAAMhqC,MAAAA,CAAAA,IAAWjB,KAAKqqC,OAAOrqC,KAAK4qC,gBAAgB1rC,EAAAA,CAAAA;AAEzF,uBAASA,KAAI,GAAGA,KAAI+rC,GAAMhqC,QAAQ/B;AAChCc,qBAAKqqC,OAAOrqC,KAAK4qC,gBAAgB5oC,KAAQ9C,EAAAA,CAAAA,IAAM+rC,GAAM/rC,EAAAA;AAOvD,kBALI+rC,GAAMhqC,UACRjB,KAAKkqC,gBAAgBx6B,KAAK,EAAE9B,OAAO5L,IAAO+b,QAAQktB,GAAMhqC,OAAAA,CAAAA,GAItDjB,KAAKwqC,UAAUS,GAAMhqC,SAASjB,KAAK+pC,YAAY;AACjD,sBAAMmB,KAAelrC,KAAKwqC,UAAUS,GAAMhqC,SAAUjB,KAAK+pC;AACzD/pC,qBAAKuqC,eAAeW,IACpBlrC,KAAKwqC,UAAUxqC,KAAK+pC,YACpB/pC,KAAKoqC,cAAc16B,KAAKw7B,EAAAA;cAAAA;AAExBlrC,qBAAKwqC,WAAWS,GAAMhqC;YAE1B;YAMOkqC,UAAUvY,IAAAA;AACXA,cAAAA,KAAQ5yB,KAAKwqC,YACf5X,KAAQ5yB,KAAKwqC,UAEfxqC,KAAKuqC,eAAe3X,IACpB5yB,KAAKwqC,WAAW5X,IAChB5yB,KAAKoqC,cAAc16B,KAAKkjB,EAAAA;YAC1B;YAEOwY,cAAcppC,IAAe4wB,IAAe8Q,IAAAA;AACjD,kBAAA,EAAI9Q,MAAS,IAAb;AAGA,oBAAI5wB,KAAQ,KAAKA,MAAShC,KAAKwqC;AAC7B,wBAAM,IAAI9oC,MAAM,6BAAA;AAElB,oBAAIM,KAAQ0hC,KAAS;AACnB,wBAAM,IAAIhiC,MAAM,8CAAA;AAGlB,oBAAIgiC,KAAS,GAAG;AACd,2BAASxkC,KAAI0zB,KAAQ,GAAG1zB,MAAK,GAAGA;AAC9Bc,yBAAK2I,IAAI3G,KAAQ9C,KAAIwkC,IAAQ1jC,KAAK6I,IAAI7G,KAAQ9C,EAAAA,CAAAA;AAEhD,wBAAMmsC,KAAgBrpC,KAAQ4wB,KAAQ8Q,KAAU1jC,KAAKwqC;AACrD,sBAAIa,KAAe;AAEjB,yBADArrC,KAAKwqC,WAAWa,IACTrrC,KAAKwqC,UAAUxqC,KAAK+pC;AACzB/pC,2BAAKwqC,WACLxqC,KAAKuqC,eACLvqC,KAAKoqC,cAAc16B,KAAK,CAAA;gBAAA;AAI5B,2BAASxQ,KAAI,GAAGA,KAAI0zB,IAAO1zB;AACzBc,yBAAK2I,IAAI3G,KAAQ9C,KAAIwkC,IAAQ1jC,KAAK6I,IAAI7G,KAAQ9C,EAAAA,CAAAA;cAAAA;YAGpD;YAQQ0rC,gBAAgBh9B,IAAAA;AACtB,sBAAQ5N,KAAKuqC,cAAc38B,MAAS5N,KAAK+pC;YAC3C;UAAA;AAxNF,UAAA1qC,GAAA,eAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,QAAA,QCfAA,GAAA,QAAA,SAAgBisC,GAASC,IAAQC,KAAgB,GAAA;AAC/C,gBAAmB,YAAA,OAARD;AACT,qBAAOA;AAIT,kBAAME,KAAoBnB,MAAMoB,QAAQH,EAAAA,IAAO,CAAA,IAAK,CAAC;AAErD,uBAAW3oC,KAAO2oC;AAEhBE,cAAAA,GAAa7oC,CAAAA,IAAO4oC,MAAS,IAAID,GAAI3oC,CAAAA,IAAQ2oC,GAAI3oC,CAAAA,KAAQ0oC,GAAMC,GAAI3oC,CAAAA,GAAM4oC,KAAQ,CAAA;AAGnF,mBAAOC;UACT;QAAA,GAAA,MAAA,CAAArsC,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,gBAAAA,GAAA,cAAAA,GAAA,OAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,QAAAA,GAAA,WAAAA,GAAA,aAAA;ACjBA,gBAAAC,KAAAJ,GAAA,IAAA;AAGA,cAAIysC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK;AAUT,cAAiBh0B,GA2LAi0B,GAoCAtzB;AA8FjB,mBAAgBuzB,EAAYre,IAAAA;AAC1B,kBAAMruB,KAAIquB,GAAEloB,SAAS,EAAA;AACrB,mBAAOnG,GAAE2B,SAAS,IAAI,MAAM3B,KAAIA;UAClC;AAQA,mBAAgB2sC,EAAcC,IAAYC,IAAAA;AACxC,mBAAID,KAAKC,MACCA,KAAK,SAASD,KAAK,SAErBA,KAAK,SAASC,KAAK;UAC7B;AArVa,UAAA9sC,GAAA+oC,aAAqB,EAChCniC,KAAK,aACLwS,MAAM,EAAA,GAMR,SAAiBX,IAAAA;AACC,YAAA1Y,GAAAioC,QAAhB,SAAsB59B,IAAW09B,IAAWC,IAAWnoC,IAAAA;AACrD,qBAAA,WAAIA,KACK,IAAI+sC,EAAYviC,EAAAA,IAAKuiC,EAAY7E,EAAAA,IAAK6E,EAAY5E,EAAAA,IAAK4E,EAAY/sC,EAAAA,MAErE,IAAI+sC,EAAYviC,EAAAA,IAAKuiC,EAAY7E,EAAAA,IAAK6E,EAAY5E,EAAAA;YAC3D,GAEgBhoC,GAAAkoC,SAAhB,SAAuB79B,IAAW09B,IAAWC,IAAWnoC,KAAY,KAAA;AAIlE,sBAAQwK,MAAK,KAAK09B,MAAK,KAAKC,MAAK,IAAInoC,QAAO;YAC9C;UACD,EAdgB6Y,IAAAzY,GAAAyY,aAAAzY,GAAAyY,WAAQ,CAAA,EAAA,GAmBzB,SAAiB1Y,IAAA;AAgDf,qBAAgBkpC,GAAQvwB,IAAeuwB,IAAAA;AAGrC,qBAFAwD,IAAKn4B,KAAKkV,MAAgB,MAAVyf,EAAAA,GAAAA,CACfqD,GAAIC,GAAIC,CAAAA,IAAMpzB,EAAK2zB,WAAWr0B,GAAMU,IAAAA,GAC9B,EACLxS,KAAK6R,EAASuvB,MAAMsE,GAAIC,GAAIC,GAAIC,CAAAA,GAChCrzB,MAAMX,EAASwvB,OAAOqE,GAAIC,GAAIC,GAAIC,CAAAA,EAAAA;YAEtC;AAtDgB,YAAA1sC,GAAAwoC,QAAhB,SAAsBn/B,IAAYC,IAAAA;AAEhC,kBADAojC,KAAgB,MAAVpjC,GAAG+P,QAAe,KACb,MAAPqzB;AACF,uBAAO,EACL7lC,KAAKyC,GAAGzC,KACRwS,MAAM/P,GAAG+P,KAAAA;AAGb,oBAAM4zB,KAAO3jC,GAAG+P,QAAQ,KAAM,KACxB6zB,KAAO5jC,GAAG+P,QAAQ,KAAM,KACxB8zB,KAAO7jC,GAAG+P,QAAQ,IAAK,KACvB+zB,KAAO/jC,GAAGgQ,QAAQ,KAAM,KACxBg0B,KAAOhkC,GAAGgQ,QAAQ,KAAM,KACxBi0B,KAAOjkC,GAAGgQ,QAAQ,IAAK;AAM7B,qBALAkzB,IAAKa,KAAM74B,KAAKkV,OAAOwjB,KAAMG,MAAOV,CAAAA,GACpCF,IAAKa,KAAM94B,KAAKkV,OAAOyjB,KAAMG,MAAOX,CAAAA,GACpCD,IAAKa,KAAM/4B,KAAKkV,OAAO0jB,KAAMG,MAAOZ,CAAAA,GAG7B,EAAE7lC,KAFG6R,EAASuvB,MAAMsE,GAAIC,GAAIC,CAAAA,GAErBpzB,MADDX,EAASwvB,OAAOqE,GAAIC,GAAIC,CAAAA,EAAAA;YAEvC,GAEgBzsC,GAAAipC,WAAhB,SAAyBtwB,IAAAA;AACvB,qBAA+B,QAAV,MAAbA,GAAMU;YAChB,GAEgBrZ,GAAAo8B,sBAAhB,SAAoC/yB,IAAYC,IAAYikC,IAAAA;AAC1D,oBAAM97B,KAAS4H,EAAK+iB,oBAAoB/yB,GAAGgQ,MAAM/P,GAAG+P,MAAMk0B,EAAAA;AAC1D,kBAAK97B;AAGL,uBAAO4H,EAAKC,QACT7H,MAAU,KAAK,KACfA,MAAU,KAAK,KACfA,MAAU,IAAK,GAAA;YAEpB,GAEgBzR,GAAAs2B,SAAhB,SAAuB3d,IAAAA;AACrB,oBAAM60B,MAA0B,MAAb70B,GAAMU,UAAiB;AAE1C,qBAAA,CADCkzB,GAAIC,GAAIC,CAAAA,IAAMpzB,EAAK2zB,WAAWQ,EAAAA,GACxB,EACL3mC,KAAK6R,EAASuvB,MAAMsE,GAAIC,GAAIC,CAAAA,GAC5BpzB,MAAMm0B,GAAAA;YAEV,GAEgBxtC,GAAAkpC,UAAOjpC,IASPD,GAAA47B,kBAAhB,SAAgCjjB,IAAe80B,IAAAA;AAE7C,qBADAf,IAAkB,MAAb/zB,GAAMU,MACJ6vB,GAAQvwB,IAAQ+zB,IAAKe,KAAU,GAAA;YACxC,GAEgBztC,GAAA4Y,aAAhB,SAA2BD,IAAAA;AACzB,qBAAO,CAAEA,GAAMU,QAAQ,KAAM,KAAOV,GAAMU,QAAQ,KAAM,KAAOV,GAAMU,QAAQ,IAAK,GAAA;YACpF;UACD,EAjEgBpZ,GAAA0Y,UAAA1Y,GAAA0Y,QAAK,CAAA,EAAA,GAsEtB,SAAiB3Y,IAAA;AACf,gBAAI0tC,IACAC;AACJ,gBAAA,CAAKztC,GAAA0tC,QAAQ;AACX,oBAAM1mC,KAASpG,SAASC,cAAc,QAAA;AACtCmG,cAAAA,GAAOD,QAAQ,GACfC,GAAOH,SAAS;AAChB,oBAAM0nB,KAAMvnB,GAAOwnB,WAAW,MAAM,EAClCmf,oBAAAA,KAAoB,CAAA;AAElBpf,cAAAA,OACFif,KAAOjf,IACPif,GAAKI,2BAA2B,QAChCH,KAAeD,GAAKK,qBAAqB,GAAG,GAAG,GAAG,CAAA;YAAA;AAWtC,YAAA/tC,GAAAsZ,UAAhB,SAAwBzS,IAAAA;AAEtB,kBAAIA,GAAImnC,MAAM,gBAAA;AACZ,wBAAQnnC,GAAIhF,QAAAA;kBACV,KAAK;AAIH,2BAHA0qC,IAAK3a,SAAS/qB,GAAI6/B,MAAM,GAAG,CAAA,EAAG3T,OAAO,CAAA,GAAI,EAAA,GACzCyZ,IAAK5a,SAAS/qB,GAAI6/B,MAAM,GAAG,CAAA,EAAG3T,OAAO,CAAA,GAAI,EAAA,GACzC0Z,IAAK7a,SAAS/qB,GAAI6/B,MAAM,GAAG,CAAA,EAAG3T,OAAO,CAAA,GAAI,EAAA,GAClC1Z,EAAKC,QAAQizB,GAAIC,GAAIC,CAAAA;kBAE9B,KAAK;AAKH,2BAJAF,IAAK3a,SAAS/qB,GAAI6/B,MAAM,GAAG,CAAA,EAAG3T,OAAO,CAAA,GAAI,EAAA,GACzCyZ,IAAK5a,SAAS/qB,GAAI6/B,MAAM,GAAG,CAAA,EAAG3T,OAAO,CAAA,GAAI,EAAA,GACzC0Z,IAAK7a,SAAS/qB,GAAI6/B,MAAM,GAAG,CAAA,EAAG3T,OAAO,CAAA,GAAI,EAAA,GACzC2Z,IAAK9a,SAAS/qB,GAAI6/B,MAAM,GAAG,CAAA,EAAG3T,OAAO,CAAA,GAAI,EAAA,GAClC1Z,EAAKC,QAAQizB,GAAIC,GAAIC,GAAIC,CAAAA;kBAElC,KAAK;AACH,2BAAO,EACL7lC,KAAAA,IACAwS,OAAOuY,SAAS/qB,GAAI6/B,MAAM,CAAA,GAAI,EAAA,KAAO,IAAI,SAAU,EAAA;kBAEvD,KAAK;AACH,2BAAO,EACL7/B,KAAAA,IACAwS,MAAMuY,SAAS/qB,GAAI6/B,MAAM,CAAA,GAAI,EAAA,MAAQ,EAAA;gBAAA;AAM7C,oBAAMuH,KAAYpnC,GAAImnC,MAAM,oFAAA;AAC5B,kBAAIC;AAKF,uBAJA1B,IAAK3a,SAASqc,GAAU,CAAA,CAAA,GACxBzB,IAAK5a,SAASqc,GAAU,CAAA,CAAA,GACxBxB,IAAK7a,SAASqc,GAAU,CAAA,CAAA,GACxBvB,IAAKn4B,KAAKkV,MAAoE,OAAA,WAA7DwkB,GAAU,CAAA,IAAmB,IAAIC,WAAWD,GAAU,CAAA,CAAA,EAAA,GAChE50B,EAAKC,QAAQizB,GAAIC,GAAIC,GAAIC,CAAAA;AAIlC,kBAAA,CAAKgB,MAAAA,CAASC;AACZ,sBAAM,IAAIrrC,MAAM,qCAAA;AAOlB,kBAFAorC,GAAK3d,YAAY4d,IACjBD,GAAK3d,YAAYlpB,IACa,YAAA,OAAnB6mC,GAAK3d;AACd,sBAAM,IAAIztB,MAAM,qCAAA;AAOlB,kBAJAorC,GAAK1d,SAAS,GAAG,GAAG,GAAG,CAAA,GAAA,CACtBuc,GAAIC,GAAIC,GAAIC,CAAAA,IAAMgB,GAAKS,aAAa,GAAG,GAAG,GAAG,CAAA,EAAGvrB,MAGtC,QAAP8pB;AACF,sBAAM,IAAIpqC,MAAM,qCAAA;AAMlB,qBAAO,EACL+W,MAAMX,EAASwvB,OAAOqE,GAAIC,GAAIC,GAAIC,CAAAA,GAClC7lC,KAAAA,GAAAA;YAEJ;UACD,EA7FgB5G,GAAA4G,QAAA5G,GAAA4G,MAAG,CAAA,EAAA,GAkGpB,SAAiB7G,IAAA;AAsBf,qBAAgBouC,GAAmB/jC,IAAW09B,IAAWC,IAAAA;AACvD,oBAAMqG,KAAKhkC,KAAI,KACTikC,KAAKvG,KAAI,KACTwG,KAAKvG,KAAI;AAIf,qBAAY,UAHDqG,MAAM,UAAUA,KAAK,QAAQ95B,KAAKi6B,KAAKH,KAAK,SAAS,OAAO,GAAA,KAG7C,UAFfC,MAAM,UAAUA,KAAK,QAAQ/5B,KAAKi6B,KAAKF,KAAK,SAAS,OAAO,GAAA,KAE/B,UAD7BC,MAAM,UAAUA,KAAK,QAAQh6B,KAAKi6B,KAAKD,KAAK,SAAS,OAAO,GAAA;YAEzE;AAvBgB,YAAAvuC,GAAAyuC,oBAAhB,SAAkC9B,IAAAA;AAChC,qBAAOyB,GACJzB,MAAO,KAAM,KACbA,MAAO,IAAM,KACA,MAAd3sC,EAAA;YACJ,GAUgBA,GAAAouC,qBAAkBnuC;UASnC,EA/BgB0sC,IAAA1sC,GAAA0sC,QAAA1sC,GAAA0sC,MAAG,CAAA,EAAA,GAoCpB,SAAiBtzB,IAAAA;AAyCf,qBAAgBq1B,GAAgBC,IAAgBC,IAAgBrB,IAAAA;AAG9D,oBAAMH,KAAOuB,MAAU,KAAM,KACvBtB,KAAOsB,MAAU,KAAM,KACvBrB,KAAOqB,MAAW,IAAK;AAC7B,kBAAI1B,KAAO2B,MAAU,KAAM,KACvB1B,KAAO0B,MAAU,KAAM,KACvBzB,KAAOyB,MAAW,IAAK,KACvBC,KAAKhC,EAAcF,EAAIyB,mBAAmBnB,IAAKC,IAAKC,EAAAA,GAAMR,EAAIyB,mBAAmBhB,IAAKC,IAAKC,EAAAA,CAAAA;AAC/F,qBAAOuB,KAAKtB,OAAUN,KAAM,KAAKC,KAAM,KAAKC,KAAM;AAEhDF,gBAAAA,MAAO14B,KAAKG,IAAI,GAAGH,KAAKib,KAAW,MAANyd,EAAAA,CAAAA,GAC7BC,MAAO34B,KAAKG,IAAI,GAAGH,KAAKib,KAAW,MAAN0d,EAAAA,CAAAA,GAC7BC,MAAO54B,KAAKG,IAAI,GAAGH,KAAKib,KAAW,MAAN2d,EAAAA,CAAAA,GAC7B0B,KAAKhC,EAAcF,EAAIyB,mBAAmBnB,IAAKC,IAAKC,EAAAA,GAAMR,EAAIyB,mBAAmBhB,IAAKC,IAAKC,EAAAA,CAAAA;AAE7F,sBAAQL,MAAO,KAAKC,MAAO,KAAKC,MAAO,IAAI,SAAU;YACvD;AAEA,qBAAgB2B,GAAkBH,IAAgBC,IAAgBrB,IAAAA;AAGhE,oBAAMH,KAAOuB,MAAU,KAAM,KACvBtB,KAAOsB,MAAU,KAAM,KACvBrB,KAAOqB,MAAW,IAAK;AAC7B,kBAAI1B,KAAO2B,MAAU,KAAM,KACvB1B,KAAO0B,MAAU,KAAM,KACvBzB,KAAOyB,MAAW,IAAK,KACvBC,KAAKhC,EAAcF,EAAIyB,mBAAmBnB,IAAKC,IAAKC,EAAAA,GAAMR,EAAIyB,mBAAmBhB,IAAKC,IAAKC,EAAAA,CAAAA;AAC/F,qBAAOuB,KAAKtB,OAAUN,KAAM,OAAQC,KAAM,OAAQC,KAAM;AAEtDF,gBAAAA,KAAM14B,KAAKC,IAAI,KAAMy4B,KAAM14B,KAAKib,KAAmB,OAAb,MAAMyd,GAAAA,CAAAA,GAC5CC,KAAM34B,KAAKC,IAAI,KAAM04B,KAAM34B,KAAKib,KAAmB,OAAb,MAAM0d,GAAAA,CAAAA,GAC5CC,KAAM54B,KAAKC,IAAI,KAAM24B,KAAM54B,KAAKib,KAAmB,OAAb,MAAM2d,GAAAA,CAAAA,GAC5C0B,KAAKhC,EAAcF,EAAIyB,mBAAmBnB,IAAKC,IAAKC,EAAAA,GAAMR,EAAIyB,mBAAmBhB,IAAKC,IAAKC,EAAAA,CAAAA;AAE7F,sBAAQL,MAAO,KAAKC,MAAO,KAAKC,MAAO,IAAI,SAAU;YACvD;AAjEgB,YAAAntC,GAAAo8B,sBAAhB,SAAoCuS,IAAgBC,IAAgBrB,IAAAA;AAClE,oBAAMwB,KAAMpC,EAAI8B,kBAAkBE,MAAU,CAAA,GACtCK,KAAMrC,EAAI8B,kBAAkBG,MAAU,CAAA;AAE5C,kBADW/B,EAAckC,IAAKC,EAAAA,IACrBzB,IAAO;AACd,oBAAIyB,KAAMD,IAAK;AACb,wBAAME,KAAUP,GAAgBC,IAAQC,IAAQrB,EAAAA,GAC1C2B,KAAerC,EAAckC,IAAKpC,EAAI8B,kBAAkBQ,MAAW,CAAA,CAAA;AACzE,sBAAIC,KAAe3B,IAAO;AACxB,0BAAM4B,KAAUL,GAAkBH,IAAQC,IAAQrB,EAAAA;AAElD,2BAAO2B,KADcrC,EAAckC,IAAKpC,EAAI8B,kBAAkBU,MAAW,CAAA,CAAA,IACpCF,KAAUE;kBAAAA;AAEjD,yBAAOF;gBAAAA;AAET,sBAAMA,KAAUH,GAAkBH,IAAQC,IAAQrB,EAAAA,GAC5C2B,KAAerC,EAAckC,IAAKpC,EAAI8B,kBAAkBQ,MAAW,CAAA,CAAA;AACzE,oBAAIC,KAAe3B,IAAO;AACxB,wBAAM4B,KAAUT,GAAgBC,IAAQC,IAAQrB,EAAAA;AAEhD,yBAAO2B,KADcrC,EAAckC,IAAKpC,EAAI8B,kBAAkBU,MAAW,CAAA,CAAA,IACpCF,KAAUE;gBAAAA;AAEjD,uBAAOF;cAAAA;YAGX,GAEgBjvC,GAAA0uC,kBAAezuC,IAoBfD,GAAA8uC,oBAAiBhvC,IAqBjBE,GAAAgtC,aAAhB,SAA2BnlC,IAAAA;AACzB,qBAAO,CAAEA,MAAS,KAAM,KAAOA,MAAS,KAAM,KAAOA,MAAS,IAAK,KAAc,MAARA,EAAAA;YAC3E,GAEgB7H,GAAAsZ,UAAhB,SAAwBjP,IAAW09B,IAAWC,IAAWnoC,IAAAA;AACvD,qBAAO,EACLgH,KAAK6R,EAASuvB,MAAM59B,IAAG09B,IAAGC,IAAGnoC,EAAAA,GAC7BwZ,MAAMX,EAASwvB,OAAO79B,IAAG09B,IAAGC,IAAGnoC,EAAAA,EAAAA;YAEnC;UACD,EA5FgBwZ,IAAApZ,GAAAoZ,SAAApZ,GAAAoZ,OAAI,CAAA,EAAA,GA8FrBpZ,GAAA,cAAA,GAWAA,GAAA,gBAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,eAAA;ACtUA,gBAAAC,KAAAJ,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAGA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAGA,cAAIsvC,IAAAA;AAEJ,gBAAsB55B,UAAqBtV,GAAAE,WAAAA;YAqDzCC,YACE6J,IAAAA;AAEA1J,oBAAAA,GAxCe,KAAA6uC,YAAYzuC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAAukC,WAAW1uC,KAAKyuC,UAAUpkC,OACzB,KAAAskC,UAAU3uC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC7B,KAAAykC,SAAS5uC,KAAK2uC,QAAQtkC,OAC5B,KAAAwkC,cAAc7uC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC1B,KAAA7H,aAAatC,KAAK6uC,YAAYxkC,OAC7B,KAAAykC,YAAY9uC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAAtI,WAAW7B,KAAK8uC,UAAUzkC,OACvB,KAAA0kC,iBAAiB/uC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACtC,KAAA6kC,gBAAgBhvC,KAAK+uC,eAAe1kC,OAO1C,KAAAyU,YAAY9e,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GA2BtCnK,KAAKoW,wBAAwB,IAAI,EAAA64B,wBACjCjvC,KAAKsf,iBAAiBtf,KAAK4B,SAAS,IAAI,EAAAstC,eAAe5lC,EAAAA,CAAAA,GACvDtJ,KAAKoW,sBAAsBI,WAAW,EAAA5D,iBAAiB5S,KAAKsf,cAAAA,GAC5Dtf,KAAK6J,iBAAiB7J,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAA84B,aAAAA,CAAAA,GAC9EnvC,KAAKoW,sBAAsBI,WAAW,EAAAlG,gBAAgBtQ,KAAK6J,cAAAA,GAC3D7J,KAAK4b,cAAc5b,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAA+4B,UAAAA,CAAAA,GAC3EpvC,KAAKoW,sBAAsBI,WAAW,EAAA64B,aAAarvC,KAAK4b,WAAAA,GACxD5b,KAAK8G,cAAc9G,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAAi5B,WAAAA,CAAAA,GAC3EtvC,KAAKoW,sBAAsBI,WAAW,EAAAka,cAAc1wB,KAAK8G,WAAAA,GACzD9G,KAAKif,mBAAmBjf,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAAk5B,gBAAAA,CAAAA,GAChFvvC,KAAKoW,sBAAsBI,WAAW,EAAAg5B,mBAAmBxvC,KAAKif,gBAAAA,GAC9Djf,KAAKyvC,iBAAiBzvC,KAAK4B,SAAS5B,KAAKoW,sBAAsBC,eAAe,EAAAq5B,cAAAA,CAAAA,GAC9E1vC,KAAKoW,sBAAsBI,WAAW,EAAAm5B,iBAAiB3vC,KAAKyvC,cAAAA,GAC5DzvC,KAAK4vC,kBAAkB5vC,KAAKoW,sBAAsBC,eAAe,EAAAw5B,cAAAA,GACjE7vC,KAAKoW,sBAAsBI,WAAW,EAAAs5B,iBAAiB9vC,KAAK4vC,eAAAA,GAC5D5vC,KAAK0Q,kBAAkB1Q,KAAKoW,sBAAsBC,eAAe,EAAA05B,cAAAA,GACjE/vC,KAAKoW,sBAAsBI,WAAW,EAAA3D,iBAAiB7S,KAAK0Q,eAAAA,GAG5D1Q,KAAK0W,gBAAgB1W,KAAK4B,SAAS,IAAI,EAAAouC,aAAahwC,KAAK6J,gBAAgB7J,KAAK4vC,iBAAiB5vC,KAAK8G,aAAa9G,KAAK4b,aAAa5b,KAAKsf,gBAAgBtf,KAAK0Q,iBAAiB1Q,KAAKif,kBAAkBjf,KAAKyvC,cAAAA,CAAAA,GAC1MzvC,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK0W,cAAcpU,YAAYtC,KAAK6uC,WAAAA,CAAAA,GAC/D7uC,KAAK4B,SAAS5B,KAAK0W,aAAAA,GAGnB1W,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK6J,eAAehI,UAAU7B,KAAK8uC,SAAAA,CAAAA,GAC9D9uC,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK8G,YAAY8nC,QAAQ5uC,KAAK2uC,OAAAA,CAAAA,GACzD3uC,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAK8G,YAAY4nC,UAAU1uC,KAAKyuC,SAAAA,CAAAA,GAC3DzuC,KAAK4B,SAAS5B,KAAK8G,YAAYmpC,wBAAwB,MAAMjwC,KAAKkkB,eAAAA,CAAAA,CAAAA,GAClElkB,KAAK4B,SAAS5B,KAAK8G,YAAYu7B,YAAY,MAAOriC,KAAKkwC,aAAaC,gBAAAA,CAAAA,CAAAA,GACpEnwC,KAAK4B,SAAS5B,KAAKsf,eAAeC,uBAAuB,eAAengB,CAAAA,OAAKY,KAAKowC,+BAA+BhxC,EAAAA,CAAAA,CAAAA,GACjHY,KAAK4B,SAAS5B,KAAK6J,eAAe3H,SAASmI,CAAAA,OAAAA;AACzCrK,qBAAK8e,UAAUpP,KAAK,EAAEnM,UAAUvD,KAAK6J,eAAejG,OAAOgC,OAAO6c,QAAQ,EAAA,CAAA,GAC1EziB,KAAK0W,cAAc25B,eAAerwC,KAAK6J,eAAejG,OAAOklB,WAAW9oB,KAAK6J,eAAejG,OAAO0sC,YAAAA;cAAa,CAAA,CAAA,GAElHtwC,KAAK4B,SAAS5B,KAAK0W,cAAcxU,SAASmI,CAAAA,OAAAA;AACxCrK,qBAAK8e,UAAUpP,KAAK,EAAEnM,UAAUvD,KAAK6J,eAAejG,OAAOgC,OAAO6c,QAAQ,EAAA,CAAA,GAC1EziB,KAAK0W,cAAc25B,eAAerwC,KAAK6J,eAAejG,OAAOklB,WAAW9oB,KAAK6J,eAAejG,OAAO0sC,YAAAA;cAAa,CAAA,CAAA,GAIlHtwC,KAAKkwC,eAAelwC,KAAK4B,SAAS,IAAI,EAAA2uC,YAAY,CAACvuB,IAAMwuB,OAAkBxwC,KAAK0W,cAAc+5B,MAAMzuB,IAAMwuB,EAAAA,CAAAA,CAAAA,GAC1GxwC,KAAK4B,UAAS,GAAA,EAAAyV,cAAarX,KAAKkwC,aAAalB,eAAehvC,KAAK+uC,cAAAA,CAAAA,GAEjE/uC,KAAK4B,UAAS,GAAAtC,GAAA+D,cAAa,MAAA;AAAA,oBAAAjE;AACR,0BAAjBA,KAAAY,KAAK0wC,iBAAAA,WAAYtxC,MAAAA,GAAEoK,QAAAA,GACnBxJ,KAAK0wC,eAAAA;cAAwB,CAAA,CAAA;YAEjC;YAzEWxuC,IAAAA,WAAAA;AAOT,qBANKlC,KAAK2wC,iBACR3wC,KAAK2wC,eAAe3wC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACtCnK,KAAK8e,UAAUzU,MAAMlD,CAAAA,OAAAA;AAAAA,oBAAAA;AACF,0BAAjB9H,KAAAW,KAAK2wC,iBAAAA,WAAYtxC,MAAAA,GAAEqQ,KAAKvI,GAAG5D,QAAAA;cAAS,CAAA,IAGjCvD,KAAK2wC,aAAatmC;YAC3B;YAEWqD,IAAAA,OAAAA;AAAiB,qBAAO1N,KAAK6J,eAAe6D;YAAM;YAClDhN,IAAAA,OAAAA;AAAiB,qBAAOV,KAAK6J,eAAenJ;YAAM;YAClDmY,IAAAA,UAAAA;AAAwB,qBAAO7Y,KAAK6J,eAAegP;YAAS;YAC5DvP,IAAAA,UAAAA;AAAwC,qBAAOtJ,KAAKsf,eAAehW;YAAS;YAC5EA,IAAAA,QAAQA,IAAAA;AACjB,yBAAW1G,MAAO0G;AAChBtJ,qBAAKsf,eAAehW,QAAQ1G,EAAAA,IAAO0G,GAAQ1G,EAAAA;YAE/C;YAyDOguC,MAAM5uB,IAA2BrR,IAAAA;AACtC3Q,mBAAKkwC,aAAaU,MAAM5uB,IAAMrR,EAAAA;YAChC;YAWOkgC,UAAU7uB,IAA2B8uB,IAAAA;AACtC9wC,mBAAK4b,YAAY4F,YAAY,EAAAuvB,aAAaC,QAAAA,CAASxC,MACrDxuC,KAAK4b,YAAYjJ,KAAK,mDAAA,GACtB67B,IAAAA,OAEFxuC,KAAKkwC,aAAaW,UAAU7uB,IAAM8uB,EAAAA;YACpC;YAEOzzB,OAAOvR,IAAWC,IAAAA;AACnBklC,oBAAMnlC,EAAAA,KAAMmlC,MAAMllC,EAAAA,MAItBD,KAAI6H,KAAKG,IAAIhI,IAAG,EAAAolC,YAAAA,GAChBnlC,KAAI4H,KAAKG,IAAI/H,IAAG,EAAAolC,YAAAA,GAEhBnxC,KAAK6J,eAAewT,OAAOvR,IAAGC,EAAAA;YAChC;YAOOqlC,OAAOC,IAA2Bnf,KAAAA,OAAqB;AAC5DlyB,mBAAK6J,eAAeunC,OAAOC,IAAWnf,EAAAA;YACxC;YASO1tB,YAAYge,IAAc/D,IAA+BgE,IAAAA;AAC9DziB,mBAAK6J,eAAerF,YAAYge,IAAM/D,IAAqBgE,EAAAA;YAC7D;YAMO6uB,YAAYC,IAAAA;AACjBvxC,mBAAK6J,eAAeynC,YAAYC,EAAAA;YAClC;YAKOC,cAAAA;AACLxxC,mBAAK6J,eAAe2nC,YAAAA;YACtB;YAKOttB,iBAAAA;AACLlkB,mBAAK6J,eAAeqa,eAAAA;YACtB;YAEOutB,aAAa7gC,IAAAA;AAClB5Q,mBAAK6J,eAAe4nC,aAAa7gC,EAAAA;YACnC;YAGO8gC,mBAAmBjU,IAAyB9sB,IAAAA;AACjD,qBAAO3Q,KAAK0W,cAAcg7B,mBAAmBjU,IAAI9sB,EAAAA;YACnD;YAGOghC,mBAAmBlU,IAAyB9sB,IAAAA;AACjD,qBAAO3Q,KAAK0W,cAAci7B,mBAAmBlU,IAAI9sB,EAAAA;YACnD;YAGOihC,mBAAmBnU,IAAyB9sB,IAAAA;AACjD,qBAAO3Q,KAAK0W,cAAck7B,mBAAmBnU,IAAI9sB,EAAAA;YACnD;YAGOkhC,mBAAmBh6B,IAAelH,IAAAA;AACvC,qBAAO3Q,KAAK0W,cAAcm7B,mBAAmBh6B,IAAOlH,EAAAA;YACtD;YAEUuF,SAAAA;AACJlW,mBAAKsf,eAAevO,WAAW+gC,eACjC9xC,KAAK+xC,mBAAAA;YAET;YAEO/6B,QAAAA;AACLhX,mBAAK0W,cAAcM,MAAAA,GACnBhX,KAAK6J,eAAemN,MAAAA,GACpBhX,KAAK4vC,gBAAgB54B,MAAAA,GACrBhX,KAAK8G,YAAYkQ,MAAAA,GACjBhX,KAAKif,iBAAiBjI,MAAAA;YACxB;YAEQo5B,+BAA+BnpC,IAAAA;AAAAA,kBAAAA;AACjCA,cAAAA,KACFjH,KAAK+xC,mBAAAA,KAEY,UAAjB1yC,KAAAW,KAAK0wC,iBAAAA,WAAYrxC,MAAAA,GAAEmK,QAAAA,GACnBxJ,KAAK0wC,eAAAA;YAET;YAEUqB,qBAAAA;AACR,kBAAA,CAAK/xC,KAAK0wC,cAAc;AACtB,sBAAMsB,KAA6B,CAAA;AACnCA,gBAAAA,GAAYztC,KAAKvE,KAAKsC,WAAW,EAAA2vC,8BAA8B3wC,KAAK,MAAMtB,KAAK6J,cAAAA,CAAAA,CAAAA,GAC/EmoC,GAAYztC,KAAKvE,KAAK4xC,mBAAmB,EAAEM,OAAO,IAAA,GAAO,QACvD,GAAA,EAAAD,+BAA8BjyC,KAAK6J,cAAAA,GAAAA,MAC5B,CAAA,GAET7J,KAAK0wC,eAAe,EAClBlnC,SAAS,MAAA;AACP,6BAAW6wB,MAAK2X;AACd3X,oBAAAA,GAAE7wB,QAAAA;gBAAAA,EAAAA;cAAAA;YAKZ;UAAA;AArPF,UAAAnK,GAAA,eAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,eAAAA,GAAA,eAAA,QCxBAA,GAAA,eAAA,MAAA;YAAA,cAAA;AACU,mBAAA8yC,aAAgC,CAAA,GAEhC,KAAAC,YAAAA;YAwCV;YAtCa/nC,IAAAA,QAAAA;AAmBT,qBAlBKrK,KAAKqyC,WACRryC,KAAKqyC,SAAUl+B,CAAAA,QACbnU,KAAKmyC,WAAW5tC,KAAK4P,EAAAA,GACF,EACjB3K,SAAS,MAAA;AACP,oBAAA,CAAKxJ,KAAKoyC;AACR,2BAASlzC,KAAI,GAAGA,KAAIc,KAAKmyC,WAAWlxC,QAAQ/B;AAC1C,wBAAIc,KAAKmyC,WAAWjzC,EAAAA,MAAOiV;AAEzB,6BAAA,KADAnU,KAAKmyC,WAAWnnC,OAAO9L,IAAG,CAAA;;cAAA,EAAA,KAUjCc,KAAKqyC;YACd;YAEO3iC,KAAK4iC,IAASC,IAAAA;AACnB,oBAAMC,KAA2B,CAAA;AACjC,uBAAStzC,KAAI,GAAGA,KAAIc,KAAKmyC,WAAWlxC,QAAQ/B;AAC1CszC,gBAAAA,GAAMjuC,KAAKvE,KAAKmyC,WAAWjzC,EAAAA,CAAAA;AAE7B,uBAASA,KAAI,GAAGA,KAAIszC,GAAMvxC,QAAQ/B;AAChCszC,gBAAAA,GAAMtzC,EAAAA,EAAGuzC,KAAAA,QAAgBH,IAAMC,EAAAA;YAEnC;YAEO/oC,UAAAA;AACDxJ,mBAAKmyC,eACPnyC,KAAKmyC,WAAWlxC,SAAS,IAE3BjB,KAAKoyC,YAAAA;YACP;UAAA,GAGF/yC,GAAA,eAAA,SAAgCqzC,IAAiBC,IAAAA;AAC/C,mBAAOD,GAAKtzC,CAAAA,OAAKuzC,GAAGjjC,KAAKtQ,EAAAA,CAAAA;UAC3B;QAAA,GAAA,MAAA,SAAAA,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,eAAAA,GAAA,2BAAA;AC7DA,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GAKM0zC,IAAoC,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAA,GAgCnFC,IAAyB;AAQ/B,mBAASC,EAAoBppC,IAAWqpC,IAAAA;AACtC,gBAAIrpC,KAAI;AACN,qBAAOqpC,GAAKC,eAAAA;AAEd,oBAAQtpC,IAAAA;cACN,KAAK;AAAG,uBAAA,CAAA,CAASqpC,GAAKE;cACtB,KAAK;AAAG,uBAAA,CAAA,CAASF,GAAKG;cACtB,KAAK;AAAG,uBAAA,CAAA,CAASH,GAAKI;cACtB,KAAK;AAAG,uBAAA,CAAA,CAASJ,GAAKK;cACtB,KAAK;AAAG,uBAAA,CAAA,CAASL,GAAKM;cACtB,KAAK;AAAG,uBAAA,CAAA,CAASN,GAAKO;cACtB,KAAK;AAAG,uBAAA,CAAA,CAASP,GAAKQ;cACtB,KAAK;AAAG,uBAAA,CAAA,CAASR,GAAKS;cACtB,KAAK;AAAG,uBAAA,CAAA,CAAST,GAAKU;cACtB,KAAK;AAAI,uBAAA,CAAA,CAASV,GAAKW;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASX,GAAKY;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASZ,GAAKa;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASb,GAAKc;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASd,GAAKe;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASf,GAAKgB;cACvB,KAAK;AAAI,uBAAA,CAAA,CAAShB,GAAKiB;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASjB,GAAKkB;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASlB,GAAKmB;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASnB,GAAKoB;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASpB,GAAKqB;cACvB,KAAK;AAAI,uBAAA,CAAA,CAASrB,GAAKsB;cACvB,KAAK;AAAI,uBAAA,CAAA,CAAStB,GAAKC;YAAAA;AAEzB,mBAAA;UACF;AAEA,cAAYttB;AAAAA,WAAZ,SAAYA,IAAAA;AACV,YAAAtmB,GAAAA,GAAA,sBAAA,CAAA,IAAA,uBACAA,GAAAA,GAAA,uBAAA,CAAA,IAAA;UACD,EAHWsmB,IAAArmB,GAAAqmB,6BAAArmB,GAAAqmB,2BAAwB,CAAA,EAAA;AASpC,cAAI4uB,IAAQ;AASZ,gBAAatE,UAAqB,EAAAxwC,WAAAA;YAqDhCC,YACmBoK,IACA+lC,IACApgB,IACA5T,IACAnL,IACAC,IACA6jC,IACAC,IACAC,KAAiC,IAAI,EAAAC,wBAAAA;AAEtD90C,oBAAAA,GAViB,KAAAiK,iBAAAA,IACA,KAAA+lC,kBAAAA,IACA,KAAApgB,eAAAA,IACA,KAAA5T,cAAAA,IACA,KAAAnL,kBAAAA,IACA,KAAAC,kBAAAA,IACA,KAAA6jC,oBAAAA,IACA,KAAAC,kBAAAA,IACA,KAAAC,UAAAA,IA7DX,KAAAE,eAA4B,IAAIC,YAAY,IAAA,GAC5C,KAAAC,iBAAgC,IAAI,EAAAC,iBACpC,KAAAC,eAA4B,IAAI,EAAAC,eAChC,KAAAzd,YAAsB,IAAI,EAAAvmB,YAC1B,KAAAikC,eAAe,IACf,KAAAC,YAAY,IAEV,KAAAC,oBAA8B,CAAA,GAC9B,KAAAC,iBAA2B,CAAA,GAE7B,KAAAC,eAA+B,EAAA7vB,kBAAkB8lB,MAAAA,GAEjD,KAAAgK,yBAAyC,EAAA9vB,kBAAkB8lB,MAAAA,GAIlD,KAAAiK,iBAAiBv1C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACpC,KAAAwM,gBAAgB3W,KAAKu1C,eAAelrC,OACnC,KAAAmrC,wBAAwBx1C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC3C,KAAAyM,uBAAuB5W,KAAKw1C,sBAAsBnrC,OACjD,KAAAorC,kBAAkBz1C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACrC,KAAA4M,iBAAiB/W,KAAKy1C,gBAAgBprC,OACrC,KAAAqrC,sBAAsB11C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACzC,KAAA0M,qBAAqB7W,KAAK01C,oBAAoBrrC,OAC7C,KAAAsrC,0BAA0B31C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC7C,KAAA6T,yBAAyBhe,KAAK21C,wBAAwBtrC,OACrD,KAAAurC,iCAAiC51C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACpD,KAAA8M,gCAAgCjX,KAAK41C,+BAA+BvrC,OAEnE,KAAAwrC,cAAc71C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACjC,KAAAhI,aAAanC,KAAK61C,YAAYxrC,OAC7B,KAAAyrC,aAAa91C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAChC,KAAA5H,YAAYvC,KAAK81C,WAAWzrC,OAC3B,KAAA8K,gBAAgBnV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACnC,KAAAiL,eAAepV,KAAKmV,cAAc9K,OACjC,KAAAwkC,cAAc7uC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACjC,KAAA7H,aAAatC,KAAK6uC,YAAYxkC,OAC7B,KAAAyU,YAAY9e,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAAjI,WAAWlC,KAAK8e,UAAUzU,OACzB,KAAAoL,iBAAiBzV,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACpC,KAAAuL,gBAAgB1V,KAAKyV,eAAepL,OACnC,KAAA0rC,WAAW/1C,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC9B,KAAAgN,UAAUnX,KAAK+1C,SAAS1rC,OAEhC,KAAA2rC,cAA2B,EACjCC,QAAAA,OACAC,cAAc,GACdC,cAAc,GACdC,eAAe,GACf7yC,UAAU,EAAA,GAsvFJ,KAAA8yC,iBAAiB,CAAC,KAAD,KAAA,GAAA,GAvuFvBr2C,KAAK4B,SAAS5B,KAAKy0C,OAAAA,GACnBz0C,KAAKs2C,mBAAmB,IAAIC,EAAgBv2C,KAAK6J,cAAAA,GAGjD7J,KAAK+nB,gBAAgB/nB,KAAK6J,eAAejG,QACzC5D,KAAK4B,SAAS5B,KAAK6J,eAAegP,QAAQmP,iBAAiB5oB,CAAAA,OAAKY,KAAK+nB,gBAAgB3oB,GAAE6oB,YAAAA,CAAAA,GAKvFjoB,KAAKy0C,QAAQ+B,sBAAsB,CAAC3+B,IAAO4+B,OAAAA;AACzCz2C,qBAAK4b,YAAYC,MAAM,sBAAsB,EAAE66B,YAAY12C,KAAKy0C,QAAQkC,cAAc9+B,EAAAA,GAAQ4+B,QAAQA,GAAOG,QAAAA,EAAAA,CAAAA;cAAY,CAAA,GAE3H52C,KAAKy0C,QAAQoC,sBAAsBh/B,CAAAA,OAAAA;AACjC7X,qBAAK4b,YAAYC,MAAM,sBAAsB,EAAE66B,YAAY12C,KAAKy0C,QAAQkC,cAAc9+B,EAAAA,EAAAA,CAAAA;cAAS,CAAA,GAEjG7X,KAAKy0C,QAAQqC,0BAA0BC,CAAAA,OAAAA;AACrC/2C,qBAAK4b,YAAYC,MAAM,0BAA0B,EAAEk7B,MAAAA,GAAAA,CAAAA;cAAO,CAAA,GAE5D/2C,KAAKy0C,QAAQuC,sBAAsB,CAACN,IAAYx2B,IAAQ8B,OAAAA;AACtDhiB,qBAAK4b,YAAYC,MAAM,sBAAsB,EAAE66B,YAAAA,IAAYx2B,QAAAA,IAAQ8B,MAAAA,GAAAA,CAAAA;cAAO,CAAA,GAE5EhiB,KAAKy0C,QAAQwC,sBAAsB,CAACp/B,IAAOqI,IAAQg3B,OAAAA;AAClC,2BAAXh3B,OACFg3B,KAAUA,GAAQN,QAAAA,IAEpB52C,KAAK4b,YAAYC,MAAM,sBAAsB,EAAE66B,YAAY12C,KAAKy0C,QAAQkC,cAAc9+B,EAAAA,GAAQqI,QAAAA,IAAQg3B,SAAAA,GAAAA,CAAAA;cAAU,CAAA,GAMlHl3C,KAAKy0C,QAAQ0C,gBAAgB,CAACn1B,IAAMhgB,IAAOC,OAAQjC,KAAKo3C,MAAMp1B,IAAMhgB,IAAOC,EAAAA,CAAAA,GAK3EjC,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKq3C,YAAYZ,EAAAA,CAAAA,GAC3Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAKpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKu3C,WAAWd,EAAAA,CAAAA,GAC9Fz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKw3C,SAASf,EAAAA,CAAAA,GACxEz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAKpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKy3C,YAAYhB,EAAAA,CAAAA,GAC/Fz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK03C,WAAWjB,EAAAA,CAAAA,GAC1Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK23C,cAAclB,EAAAA,CAAAA,GAC7Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK43C,eAAenB,EAAAA,CAAAA,GAC9Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK63C,eAAepB,EAAAA,CAAAA,GAC9Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK83C,oBAAoBrB,EAAAA,CAAAA,GACnFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK+3C,mBAAmBtB,EAAAA,CAAAA,GAClFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKg4C,eAAevB,EAAAA,CAAAA,GAC9Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKi4C,iBAAiBxB,EAAAA,CAAAA,GAChFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKk4C,eAAezB,IAAAA,KAAQ,CAAA,GACtFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEuG,QAAQ,KAAKjG,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKk4C,eAAezB,IAAAA,IAAQ,CAAA,GACnGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKo4C,YAAY3B,IAAAA,KAAQ,CAAA,GACnFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEuG,QAAQ,KAAKjG,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKo4C,YAAY3B,IAAAA,IAAQ,CAAA,GAChGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKq4C,YAAY5B,EAAAA,CAAAA,GAC3Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKs4C,YAAY7B,EAAAA,CAAAA,GAC3Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKu4C,YAAY9B,EAAAA,CAAAA,GAC3Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKw4C,SAAS/B,EAAAA,CAAAA,GACxEz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKy4C,WAAWhC,EAAAA,CAAAA,GAC1Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK04C,WAAWjC,EAAAA,CAAAA,GAC1Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK24C,kBAAkBlC,EAAAA,CAAAA,GACjFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK44C,gBAAgBnC,EAAAA,CAAAA,GAC/Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK64C,kBAAkBpC,EAAAA,CAAAA,GACjFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK84C,yBAAyBrC,EAAAA,CAAAA,GACxFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK+4C,4BAA4BtC,EAAAA,CAAAA,GAC3Fz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEuG,QAAQ,KAAKjG,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKg5C,8BAA8BvC,EAAAA,CAAAA,GAC1Gz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKi5C,gBAAgBxC,EAAAA,CAAAA,GAC/Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKk5C,kBAAkBzC,EAAAA,CAAAA,GACjFz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKm5C,WAAW1C,EAAAA,CAAAA,GAC1Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKo5C,SAAS3C,EAAAA,CAAAA,GACxEz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKq5C,QAAQ5C,EAAAA,CAAAA,GACvEz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEuG,QAAQ,KAAKjG,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKs5C,eAAe7C,EAAAA,CAAAA,GAC3Fz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKu5C,UAAU9C,EAAAA,CAAAA,GACzEz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEuG,QAAQ,KAAKjG,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKw5C,iBAAiB/C,EAAAA,CAAAA,GAC7Fz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKy5C,eAAehD,EAAAA,CAAAA,GAC9Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK05C,aAAajD,EAAAA,CAAAA,GAC5Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEuG,QAAQ,KAAKjG,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK25C,oBAAoBlD,EAAAA,CAAAA,GAChGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAKpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK45C,UAAUnD,EAAAA,CAAAA,GAC7Fz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAKpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK65C,eAAepD,EAAAA,CAAAA,GAClGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK85C,gBAAgBrD,EAAAA,CAAAA,GAC/Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAK+5C,WAAWtD,EAAAA,CAAAA,GAC1Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKg6C,cAAcvD,EAAAA,CAAAA,GAC7Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEM,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKi6C,cAAcxD,EAAAA,CAAAA,GAC7Ez2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAMpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKk6C,cAAczD,EAAAA,CAAAA,GAClGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAMpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKm6C,cAAc1D,EAAAA,CAAAA,GAClGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAKpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKo6C,gBAAgB3D,EAAAA,CAAAA,GACnGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAE0F,eAAe,KAAKpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKq6C,YAAY5D,IAAAA,IAAQ,CAAA,GACvGz2C,KAAKy0C,QAAQ7C,mBAAmB,EAAEuG,QAAQ,KAAKb,eAAe,KAAKpF,OAAO,IAAA,GAAOuE,CAAAA,OAAUz2C,KAAKq6C,YAAY5D,IAAAA,KAAQ,CAAA,GAKpHz2C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAGoiC,KAAK,MAAMv6C,KAAKw6C,KAAAA,CAAAA,GAClDx6C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAGsiC,IAAI,MAAMz6C,KAAK06C,SAAAA,CAAAA,GACjD16C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAGwiC,IAAI,MAAM36C,KAAK06C,SAAAA,CAAAA,GACjD16C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAGyiC,IAAI,MAAM56C,KAAK06C,SAAAA,CAAAA,GACjD16C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAGsM,IAAI,MAAMzkB,KAAK66C,eAAAA,CAAAA,GACjD76C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAG2iC,IAAI,MAAM96C,KAAK+6C,UAAAA,CAAAA,GACjD/6C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAG6iC,IAAI,MAAMh7C,KAAKi7C,IAAAA,CAAAA,GACjDj7C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAG+iC,IAAI,MAAMl7C,KAAKm7C,SAAAA,CAAAA,GACjDn7C,KAAKy0C,QAAQ6F,kBAAkB,EAAAniC,GAAGijC,IAAI,MAAMp7C,KAAKq7C,QAAAA,CAAAA,GAGjDr7C,KAAKy0C,QAAQ6F,kBAAkB,EAAAgB,GAAGC,KAAK,MAAMv7C,KAAK4N,MAAAA,CAAAA,GAClD5N,KAAKy0C,QAAQ6F,kBAAkB,EAAAgB,GAAGE,KAAK,MAAMx7C,KAAKy7C,SAAAA,CAAAA,GAClDz7C,KAAKy0C,QAAQ6F,kBAAkB,EAAAgB,GAAGI,KAAK,MAAM17C,KAAK27C,OAAAA,CAAAA,GAMlD37C,KAAKy0C,QAAQ5C,mBAAmB,GAAG,IAAI,EAAA+J,WAAW55B,CAAAA,QAAUhiB,KAAK67C,SAAS75B,EAAAA,GAAOhiB,KAAK87C,YAAY95B,EAAAA,GAAAA,KAAc,CAAA,GAEhHhiB,KAAKy0C,QAAQ5C,mBAAmB,GAAG,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAK87C,YAAY95B,EAAAA,CAAAA,CAAAA,GAE3EhiB,KAAKy0C,QAAQ5C,mBAAmB,GAAG,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAK67C,SAAS75B,EAAAA,CAAAA,CAAAA,GAGxEhiB,KAAKy0C,QAAQ5C,mBAAmB,GAAG,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAK+7C,wBAAwB/5B,EAAAA,CAAAA,CAAAA,GAKvFhiB,KAAKy0C,QAAQ5C,mBAAmB,GAAG,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKg8C,aAAah6B,EAAAA,CAAAA,CAAAA,GAE5EhiB,KAAKy0C,QAAQ5C,mBAAmB,IAAI,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKi8C,mBAAmBj6B,EAAAA,CAAAA,CAAAA,GAEnFhiB,KAAKy0C,QAAQ5C,mBAAmB,IAAI,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKk8C,mBAAmBl6B,EAAAA,CAAAA,CAAAA,GAEnFhiB,KAAKy0C,QAAQ5C,mBAAmB,IAAI,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKm8C,uBAAuBn6B,EAAAA,CAAAA,CAAAA,GAavFhiB,KAAKy0C,QAAQ5C,mBAAmB,KAAK,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKo8C,oBAAoBp6B,EAAAA,CAAAA,CAAAA,GAIrFhiB,KAAKy0C,QAAQ5C,mBAAmB,KAAK,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKq8C,eAAer6B,EAAAA,CAAAA,CAAAA,GAEhFhiB,KAAKy0C,QAAQ5C,mBAAmB,KAAK,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKs8C,eAAet6B,EAAAA,CAAAA,CAAAA,GAEhFhiB,KAAKy0C,QAAQ5C,mBAAmB,KAAK,IAAI,EAAA+J,WAAW55B,CAAAA,OAAQhiB,KAAKu8C,mBAAmBv6B,EAAAA,CAAAA,CAAAA,GAYpFhiB,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK+5C,WAAAA,CAAAA,GAC3D/5C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAKi6C,cAAAA,CAAAA,GAC3Dj6C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK4N,MAAAA,CAAAA,GAC3D5N,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAKy7C,SAAAA,CAAAA,GAC3Dz7C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK27C,OAAAA,CAAAA,GAC3D37C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAKw8C,aAAAA,CAAAA,GAC3Dx8C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAKy8C,sBAAAA,CAAAA,GAC3Dz8C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK08C,kBAAAA,CAAAA,GAC3D18C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK28C,UAAAA,CAAAA,GAC3D38C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK48C,UAAU,CAAA,CAAA,GACrE58C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK48C,UAAU,CAAA,CAAA,GACrE58C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK48C,UAAU,CAAA,CAAA,GACrE58C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK48C,UAAU,CAAA,CAAA,GACrE58C,KAAKy0C,QAAQ/C,mBAAmB,EAAEQ,OAAO,IAAA,GAAO,MAAMlyC,KAAK48C,UAAU,CAAA,CAAA,GACrE58C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO,IAAA,GAAO,MAAMlyC,KAAK68C,qBAAAA,CAAAA,GAC/E78C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO,IAAA,GAAO,MAAMlyC,KAAK68C,qBAAAA,CAAAA;AAC/E,yBAAWC,MAAQ,EAAAC;AACjB/8C,qBAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO4K,GAAAA,GAAQ,MAAM98C,KAAKg9C,cAAc,MAAMF,EAAAA,CAAAA,GACpG98C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO4K,GAAAA,GAAQ,MAAM98C,KAAKg9C,cAAc,MAAMF,EAAAA,CAAAA,GACpG98C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO4K,GAAAA,GAAQ,MAAM98C,KAAKg9C,cAAc,MAAMF,EAAAA,CAAAA,GACpG98C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO4K,GAAAA,GAAQ,MAAM98C,KAAKg9C,cAAc,MAAMF,EAAAA,CAAAA,GACpG98C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO4K,GAAAA,GAAQ,MAAM98C,KAAKg9C,cAAc,MAAMF,EAAAA,CAAAA,GACpG98C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO4K,GAAAA,GAAQ,MAAM98C,KAAKg9C,cAAc,MAAMF,EAAAA,CAAAA,GACpG98C,KAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO4K,GAAAA,GAAQ,MAAM98C,KAAKg9C,cAAc,MAAMF,EAAAA,CAAAA;AAEtG98C,mBAAKy0C,QAAQ/C,mBAAmB,EAAE4F,eAAe,KAAKpF,OAAO,IAAA,GAAO,MAAMlyC,KAAKi9C,uBAAAA,CAAAA,GAK/Ej9C,KAAKy0C,QAAQyI,gBAAiB1uC,CAAAA,QAC5BxO,KAAK4b,YAAY2iB,MAAM,mBAAmB/vB,EAAAA,GACnCA,GAAAA,GAMTxO,KAAKy0C,QAAQ9C,mBAAmB,EAAE2F,eAAe,KAAKpF,OAAO,IAAA,GAAO,IAAI,EAAAiL,WAAW,CAACn7B,IAAMy0B,OAAWz2C,KAAKo9C,oBAAoBp7B,IAAMy0B,EAAAA,CAAAA,CAAAA;YACtI;YA7PO4G,cAAAA;AAAgC,qBAAOr9C,KAAKq1C;YAAc;YAkQzDiI,eAAepH,IAAsBC,IAAsBC,IAAuB7yC,IAAAA;AACxFvD,mBAAKg2C,YAAYC,SAAAA,MACjBj2C,KAAKg2C,YAAYE,eAAeA,IAChCl2C,KAAKg2C,YAAYG,eAAeA,IAChCn2C,KAAKg2C,YAAYI,gBAAgBA,IACjCp2C,KAAKg2C,YAAYzyC,WAAWA;YAC9B;YAEQg6C,uBAAuBC,IAAAA;AAEzBx9C,mBAAK4b,YAAY4F,YAAY,EAAAuvB,aAAaC,QAC5CyM,QAAQC,KAAK,CAACF,IAAG,IAAIC,QAAQ,CAACE,IAAKC,OAAQx4C,WAAW,MAAMw4C,GAAI,eAAA,GArS7C,GAAA,CAAA,CAAA,CAAA,EAsShBC,MAAMC,CAAAA,OAAAA;AACL,oBAAY,oBAARA;AACF,wBAAMA;AAERprC,wBAAQC,KAAK,iDAAA;cAAiE,CAAA;YAGtF;YAEQorC,oBAAAA;AACN,qBAAO/9C,KAAKq1C,aAAa5jC,SAASC;YACpC;YAeO++B,MAAMzuB,IAA2BwuB,IAAAA;AACtC,kBAAI3/B,IACAqlC,KAAel2C,KAAK+nB,cAAcjc,GAClCqqC,KAAen2C,KAAK+nB,cAAchc,GAClC/J,KAAQ;AACZ,oBAAMg8C,KAAYh+C,KAAKg2C,YAAYC;AAEnC,kBAAI+H,IAAW;AAEb,oBAAIntC,KAAS7Q,KAAKy0C,QAAQhE,MAAMzwC,KAAK20C,cAAc30C,KAAKg2C,YAAYI,eAAe5F,EAAAA;AAEjF,yBADAxwC,KAAKu9C,uBAAuB1sC,EAAAA,GACrBA;AAETqlC,gBAAAA,KAAel2C,KAAKg2C,YAAYE,cAChCC,KAAen2C,KAAKg2C,YAAYG,cAChCn2C,KAAKg2C,YAAYC,SAAAA,OACbj0B,GAAK/gB,SAAS4xC,MAChB7wC,KAAQhC,KAAKg2C,YAAYzyC,WAAWsvC;cAAAA;AA0BxC,kBArBI7yC,KAAK4b,YAAY4F,YAAY,EAAAuvB,aAAakN,SAC5Cj+C,KAAK4b,YAAYC,MAAM,kBAA+B,YAAA,OAATmG,KAAoB,KAAKA,QAAU,KAAKsoB,MAAM4T,UAAUlxC,IAAIylC,KAAKzwB,IAAM5iB,CAAAA,OAAK6lB,OAAOC,aAAa9lB,EAAAA,CAAAA,EAAIi6B,KAAK,EAAA,OAA0B,YAAA,OAATrX,KACnKA,GAAKm8B,MAAM,EAAA,EAAInxC,IAAI5N,CAAAA,OAAKA,GAAEmlB,WAAW,CAAA,CAAA,IACrCvC,EAAAA,GAKFhiB,KAAK20C,aAAa1zC,SAAS+gB,GAAK/gB,UAC9BjB,KAAK20C,aAAa1zC,SAAS4xC,MAC7B7yC,KAAK20C,eAAe,IAAIC,YAAYjhC,KAAKC,IAAIoO,GAAK/gB,QAAQ4xC,CAAAA,CAAAA,IAMzDmL,MACHh+C,KAAKs2C,iBAAiB8H,WAAAA,GAIpBp8B,GAAK/gB,SAAS4xC;AAChB,yBAAS3zC,KAAI8C,IAAO9C,KAAI8iB,GAAK/gB,QAAQ/B,MAAK2zC,GAAwB;AAChE,wBAAM5wC,KAAM/C,KAAI2zC,IAAyB7wB,GAAK/gB,SAAS/B,KAAI2zC,IAAyB7wB,GAAK/gB,QACnFo9C,KAAuB,YAAA,OAATr8B,KAChBhiB,KAAK60C,eAAeyJ,OAAOt8B,GAAKkO,UAAUhxB,IAAG+C,EAAAA,GAAMjC,KAAK20C,YAAAA,IACxD30C,KAAK+0C,aAAauJ,OAAOt8B,GAAKkZ,SAASh8B,IAAG+C,EAAAA,GAAMjC,KAAK20C,YAAAA;AACzD,sBAAI9jC,KAAS7Q,KAAKy0C,QAAQhE,MAAMzwC,KAAK20C,cAAc0J,EAAAA;AAGjD,2BAFAr+C,KAAKs9C,eAAepH,IAAcC,IAAckI,IAAKn/C,EAAAA,GACrDc,KAAKu9C,uBAAuB1sC,EAAAA,GACrBA;gBAAAA;uBAIX,CAAKmtC,IAAW;AACd,sBAAMK,KAAuB,YAAA,OAATr8B,KAChBhiB,KAAK60C,eAAeyJ,OAAOt8B,IAAMhiB,KAAK20C,YAAAA,IACtC30C,KAAK+0C,aAAauJ,OAAOt8B,IAAMhiB,KAAK20C,YAAAA;AACxC,oBAAI9jC,KAAS7Q,KAAKy0C,QAAQhE,MAAMzwC,KAAK20C,cAAc0J,EAAAA;AAGjD,yBAFAr+C,KAAKs9C,eAAepH,IAAcC,IAAckI,IAAK,CAAA,GACrDr+C,KAAKu9C,uBAAuB1sC,EAAAA,GACrBA;cAAAA;AAKT7Q,mBAAK+nB,cAAcjc,MAAMoqC,MAAgBl2C,KAAK+nB,cAAchc,MAAMoqC,MACpEn2C,KAAKmV,cAAczF,KAAAA,GAIrB1P,KAAKw1C,sBAAsB9lC,KAAK1P,KAAKs2C,iBAAiBt0C,OAAOhC,KAAKs2C,iBAAiBr0C,GAAAA;YACrF;YAEOm1C,MAAMp1B,IAAmBhgB,IAAeC,IAAAA;AAC7C,kBAAI80C,IACAwH;AACJ,oBAAMC,KAAUx+C,KAAK4vC,gBAAgB4O,SAC/Bn/B,KAAmBrf,KAAKyQ,gBAAgBM,WAAWsO,kBACnD3R,KAAO1N,KAAK6J,eAAe6D,MAC3B+wC,KAAiBz+C,KAAKwvB,aAAazoB,gBAAgB23C,YACnDC,KAAa3+C,KAAKwvB,aAAaovB,MAAMD,YACrCE,KAAU7+C,KAAKq1C;AACrB,kBAAIyJ,KAAY9+C,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA;AAE3F/L,mBAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,GAG/C/L,KAAK+nB,cAAcjc,KAAK7J,KAAMD,KAAQ,KAAsD,MAAjD88C,GAAU7kC,SAASja,KAAK+nB,cAAcjc,IAAI,CAAA,KACvFgzC,GAAUE,qBAAqBh/C,KAAK+nB,cAAcjc,IAAI,GAAG,GAAG,GAAG+yC,GAAQn2C,IAAIm2C,GAAQp2C,IAAIo2C,GAAQptC,QAAAA;AAGjG,uBAASpK,KAAMrF,IAAOqF,KAAMpF,IAAAA,EAAOoF,IAAK;AAUtC,oBATA0vC,KAAO/0B,GAAK3a,EAAAA,GAIZk3C,KAAUv+C,KAAKw0C,gBAAgByK,QAAQlI,EAAAA,GAKnCA,KAAO,OAAOyH,IAAS;AACzB,wBAAMU,KAAKV,GAAQv5B,OAAOC,aAAa6xB,EAAAA,CAAAA;AACnCmI,kBAAAA,OACFnI,KAAOmI,GAAG36B,WAAW,CAAA;gBAAA;AAezB,oBAXIlF,MACFrf,KAAK61C,YAAYnmC,MAAK,GAAA,EAAAyvC,qBAAoBpI,EAAAA,CAAAA,GAExC/2C,KAAK+9C,kBAAAA,KACP/9C,KAAK0Q,gBAAgB0uC,cAAcp/C,KAAK+9C,kBAAAA,GAAqB/9C,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA,GAOxGwyC,MAAAA,CAAWv+C,KAAK+nB,cAAcjc,GAAnC;AAeA,sBAAI9L,KAAK+nB,cAAcjc,IAAIyyC,KAAU,KAAK7wC;AAGxC,wBAAI+wC,IAAgB;AAElB,6BAAOz+C,KAAK+nB,cAAcjc,IAAI4B;AAC5BoxC,wBAAAA,GAAUE,qBAAqBh/C,KAAK+nB,cAAcjc,KAAK,GAAG,GAAG+yC,GAAQn2C,IAAIm2C,GAAQp2C,IAAIo2C,GAAQptC,QAAAA;AAE/FzR,2BAAK+nB,cAAcjc,IAAI,GACvB9L,KAAK+nB,cAAchc,KACf/L,KAAK+nB,cAAchc,MAAM/L,KAAK+nB,cAAcuoB,eAAe,KAC7DtwC,KAAK+nB,cAAchc,KACnB/L,KAAK6J,eAAeunC,OAAOpxC,KAAKq/C,eAAAA,GAAAA,IAAkB,MAE9Cr/C,KAAK+nB,cAAchc,KAAK/L,KAAK6J,eAAenJ,SAC9CV,KAAK+nB,cAAchc,IAAI/L,KAAK6J,eAAenJ,OAAO,IAIpDV,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA,EAAImmB,YAAAA,OAGjF4sB,KAAY9+C,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA;oBAAAA,WAEvF/L,KAAK+nB,cAAcjc,IAAI4B,KAAO,GACd,MAAZ6wC;AAGF;;AAuBN,sBAjBII,OAEFG,GAAUQ,YAAYt/C,KAAK+nB,cAAcjc,GAAGyyC,IAASv+C,KAAK+nB,cAAcw3B,YAAYV,EAAAA,GAAUA,EAAAA,GAIzD,MAAjCC,GAAU7kC,SAASvM,KAAO,CAAA,KAC5BoxC,GAAUE,qBAAqBtxC,KAAO,GAAG,EAAAsqB,gBAAgB,EAAAwnB,iBAAiBX,GAAQn2C,IAAIm2C,GAAQp2C,IAAIo2C,GAAQptC,QAAAA,IAK9GqtC,GAAUE,qBAAqBh/C,KAAK+nB,cAAcjc,KAAKirC,IAAMwH,IAASM,GAAQn2C,IAAIm2C,GAAQp2C,IAAIo2C,GAAQptC,QAAAA,GAKlG8sC,KAAU;AACZ,2BAAA,EAASA;AAEPO,sBAAAA,GAAUE,qBAAqBh/C,KAAK+nB,cAAcjc,KAAK,GAAG,GAAG+yC,GAAQn2C,IAAIm2C,GAAQp2C,IAAIo2C,GAAQptC,QAAAA;gBAAAA;AApE1FqtC,kBAAAA,GAAU7kC,SAASja,KAAK+nB,cAAcjc,IAAI,CAAA,IAM7CgzC,GAAUW,mBAAmBz/C,KAAK+nB,cAAcjc,IAAI,GAAGirC,EAAAA,IAFvD+H,GAAUW,mBAAmBz/C,KAAK+nB,cAAcjc,IAAI,GAAGirC,EAAAA;cAAAA;AAwEzD90C,cAAAA,KAAMD,KAAQ,MAChB88C,GAAUvtC,SAASvR,KAAK+nB,cAAcjc,IAAI,GAAG9L,KAAKu3B,SAAAA,GAChB,MAA9Bv3B,KAAKu3B,UAAUtd,SAAAA,KAAoBja,KAAKu3B,UAAUQ,QAAAA,IAAY,QAChE/3B,KAAKy0C,QAAQiL,qBAAqB,IACzB1/C,KAAKu3B,UAAU4F,WAAAA,IACxBn9B,KAAKy0C,QAAQiL,qBAAqB1/C,KAAKu3B,UAAUsB,SAAAA,EAAWtU,WAAW,CAAA,IAEvEvkB,KAAKy0C,QAAQiL,qBAAqB1/C,KAAKu3B,UAAU0F,UAKjDj9B,KAAK+nB,cAAcjc,IAAI4B,MAAQzL,KAAMD,KAAQ,KAAkD,MAA7C88C,GAAU7kC,SAASja,KAAK+nB,cAAcjc,CAAAA,KAAAA,CAAagzC,GAAUxtC,WAAWtR,KAAK+nB,cAAcjc,CAAAA,KAC/IgzC,GAAUE,qBAAqBh/C,KAAK+nB,cAAcjc,GAAG,GAAG,GAAG+yC,GAAQn2C,IAAIm2C,GAAQp2C,IAAIo2C,GAAQptC,QAAAA,GAG7FzR,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA;YACrD;YAKO6lC,mBAAmBnU,IAAyB9sB,IAAAA;AACjD,qBAAiB,QAAb8sB,GAAGyU,SAAkBzU,GAAG0a,UAAW1a,GAAG6Z,gBASnCt3C,KAAKy0C,QAAQ7C,mBAAmBnU,IAAI9sB,EAAAA,IAPlC3Q,KAAKy0C,QAAQ7C,mBAAmBnU,IAAIgZ,CAAAA,OAAAA,CACpC3D,EAAoB2D,GAAOA,OAAO,CAAA,GAAIz2C,KAAKyQ,gBAAgBM,WAAWipC,aAAAA,KAGpErpC,GAAS8lC,EAAAA,CAAAA;YAItB;YAKO9E,mBAAmBlU,IAAyB9sB,IAAAA;AACjD,qBAAO3Q,KAAKy0C,QAAQ9C,mBAAmBlU,IAAI,IAAI,EAAA0f,WAAWxsC,EAAAA,CAAAA;YAC5D;YAKO+gC,mBAAmBjU,IAAyB9sB,IAAAA;AACjD,qBAAO3Q,KAAKy0C,QAAQ/C,mBAAmBjU,IAAI9sB,EAAAA;YAC7C;YAKOkhC,mBAAmBh6B,IAAelH,IAAAA;AACvC,qBAAO3Q,KAAKy0C,QAAQ5C,mBAAmBh6B,IAAO,IAAI,EAAA+jC,WAAWjrC,EAAAA,CAAAA;YAC/D;YAUO6pC,OAAAA;AAEL,qBADAx6C,KAAKu1C,eAAe7lC,KAAAA,GAAAA;YAEtB;YAYOgrC,WAAAA;AAmBL,qBAlBA16C,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,GAC/C/L,KAAKyQ,gBAAgBM,WAAW4uC,eAClC3/C,KAAK+nB,cAAcjc,IAAI,IAEzB9L,KAAK+nB,cAAchc,KACf/L,KAAK+nB,cAAchc,MAAM/L,KAAK+nB,cAAcuoB,eAAe,KAC7DtwC,KAAK+nB,cAAchc,KACnB/L,KAAK6J,eAAeunC,OAAOpxC,KAAKq/C,eAAAA,CAAAA,KACvBr/C,KAAK+nB,cAAchc,KAAK/L,KAAK6J,eAAenJ,SACrDV,KAAK+nB,cAAchc,IAAI/L,KAAK6J,eAAenJ,OAAO,IAGhDV,KAAK+nB,cAAcjc,KAAK9L,KAAK6J,eAAe6D,QAC9C1N,KAAK+nB,cAAcjc,KAErB9L,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,GAEnD/L,KAAK6uC,YAAYn/B,KAAAA,GAAAA;YAEnB;YAQOmrC,iBAAAA;AAEL,qBADA76C,KAAK+nB,cAAcjc,IAAI,GAAA;YAEzB;YAaOivC,YAAAA;AAAAA,kBAAAA;AAEL,kBAAA,CAAK/6C,KAAKwvB,aAAazoB,gBAAgB64C;AAKrC,uBAJA5/C,KAAK6/C,gBAAAA,GACD7/C,KAAK+nB,cAAcjc,IAAI,KACzB9L,KAAK+nB,cAAcjc,KAAAA;AAUvB,kBAFA9L,KAAK6/C,gBAAgB7/C,KAAK6J,eAAe6D,IAAAA,GAErC1N,KAAK+nB,cAAcjc,IAAI;AACzB9L,qBAAK+nB,cAAcjc;uBAUU,MAAzB9L,KAAK+nB,cAAcjc,KAClB9L,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce,aAC1C9oB,KAAK+nB,cAAchc,KAAK/L,KAAK+nB,cAAcuoB,iBACkC,UAA7ElxC,KAAAY,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA,MAAAA,WAAE3M,KAAA,SAAAA,GAAE8yB,YAAW;AAC7FlyB,qBAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA,EAAImmB,YAAAA,OAC/ElyB,KAAK+nB,cAAchc,KACnB/L,KAAK+nB,cAAcjc,IAAI9L,KAAK6J,eAAe6D,OAAO;AAKlD,sBAAMkD,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA;AACpF6E,gBAAAA,GAAK4zB,SAASxkC,KAAK+nB,cAAcjc,CAAAA,KAAAA,CAAO8E,GAAKU,WAAWtR,KAAK+nB,cAAcjc,CAAAA,KAC7E9L,KAAK+nB,cAAcjc;cAAAA;AAQzB,qBADA9L,KAAK6/C,gBAAAA,GAAAA;YAEP;YAQO5E,MAAAA;AACL,kBAAIj7C,KAAK+nB,cAAcjc,KAAK9L,KAAK6J,eAAe6D;AAC9C,uBAAA;AAEF,oBAAMoyC,KAAY9/C,KAAK+nB,cAAcjc;AAKrC,qBAJA9L,KAAK+nB,cAAcjc,IAAI9L,KAAK+nB,cAAcg4B,SAAAA,GACtC//C,KAAKyQ,gBAAgBM,WAAWsO,oBAClCrf,KAAK81C,WAAWpmC,KAAK1P,KAAK+nB,cAAcjc,IAAIg0C,EAAAA,GAAAA;YAGhD;YASO3E,WAAAA;AAEL,qBADAn7C,KAAK4vC,gBAAgBgN,UAAU,CAAA,GAAA;YAEjC;YASOvB,UAAAA;AAEL,qBADAr7C,KAAK4vC,gBAAgBgN,UAAU,CAAA,GAAA;YAEjC;YAKQiD,gBAAgBG,KAAiBhgD,KAAK6J,eAAe6D,OAAO,GAAA;AAClE1N,mBAAK+nB,cAAcjc,IAAI6H,KAAKC,IAAIosC,IAAQrsC,KAAKG,IAAI,GAAG9T,KAAK+nB,cAAcjc,CAAAA,CAAAA,GACvE9L,KAAK+nB,cAAchc,IAAI/L,KAAKwvB,aAAazoB,gBAAgB6gB,SACrDjU,KAAKC,IAAI5T,KAAK+nB,cAAcuoB,cAAc38B,KAAKG,IAAI9T,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAchc,CAAAA,CAAAA,IACpG4H,KAAKC,IAAI5T,KAAK6J,eAAenJ,OAAO,GAAGiT,KAAKG,IAAI,GAAG9T,KAAK+nB,cAAchc,CAAAA,CAAAA,GAC1E/L,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA;YACrD;YAKQk0C,WAAWn0C,IAAWC,IAAAA;AAC5B/L,mBAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,GAC/C/L,KAAKwvB,aAAazoB,gBAAgB6gB,UACpC5nB,KAAK+nB,cAAcjc,IAAIA,IACvB9L,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce,YAAY/c,OAEtD/L,KAAK+nB,cAAcjc,IAAIA,IACvB9L,KAAK+nB,cAAchc,IAAIA,KAEzB/L,KAAK6/C,gBAAAA,GACL7/C,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA;YACrD;YAKQm0C,YAAYp0C,IAAWC,IAAAA;AAG7B/L,mBAAK6/C,gBAAAA,GACL7/C,KAAKigD,WAAWjgD,KAAK+nB,cAAcjc,IAAIA,IAAG9L,KAAK+nB,cAAchc,IAAIA,EAAAA;YACnE;YASOyrC,SAASf,IAAAA;AAEd,oBAAM0J,KAAYngD,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce;AAM5D,qBALIq3B,MAAa,IACfngD,KAAKkgD,YAAY,GAAA,CAAIvsC,KAAKC,IAAIusC,IAAW1J,GAAOA,OAAO,CAAA,KAAM,CAAA,CAAA,IAE7Dz2C,KAAKkgD,YAAY,GAAA,EAAKzJ,GAAOA,OAAO,CAAA,KAAM,EAAA,GAAA;YAG9C;YASOiB,WAAWjB,IAAAA;AAEhB,oBAAM2J,KAAepgD,KAAK+nB,cAAcuoB,eAAetwC,KAAK+nB,cAAchc;AAM1E,qBALIq0C,MAAgB,IAClBpgD,KAAKkgD,YAAY,GAAGvsC,KAAKC,IAAIwsC,IAAc3J,GAAOA,OAAO,CAAA,KAAM,CAAA,CAAA,IAE/Dz2C,KAAKkgD,YAAY,GAAGzJ,GAAOA,OAAO,CAAA,KAAM,CAAA,GAAA;YAG5C;YAQOkB,cAAclB,IAAAA;AAEnB,qBADAz2C,KAAKkgD,YAAYzJ,GAAOA,OAAO,CAAA,KAAM,GAAG,CAAA,GAAA;YAE1C;YAQOmB,eAAenB,IAAAA;AAEpB,qBADAz2C,KAAKkgD,YAAAA,EAAczJ,GAAOA,OAAO,CAAA,KAAM,IAAI,CAAA,GAAA;YAE7C;YAUOoB,eAAepB,IAAAA;AAGpB,qBAFAz2C,KAAK03C,WAAWjB,EAAAA,GAChBz2C,KAAK+nB,cAAcjc,IAAI,GAAA;YAEzB;YAUOgsC,oBAAoBrB,IAAAA;AAGzB,qBAFAz2C,KAAKw3C,SAASf,EAAAA,GACdz2C,KAAK+nB,cAAcjc,IAAI,GAAA;YAEzB;YAQOisC,mBAAmBtB,IAAAA;AAExB,qBADAz2C,KAAKigD,YAAYxJ,GAAOA,OAAO,CAAA,KAAM,KAAK,GAAGz2C,KAAK+nB,cAAchc,CAAAA,GAAAA;YAElE;YAWOisC,eAAevB,IAAAA;AAOpB,qBANAz2C,KAAKigD,WAEFxJ,GAAOx1C,UAAU,KAAMw1C,GAAOA,OAAO,CAAA,KAAM,KAAK,IAAI,IAEpDA,GAAOA,OAAO,CAAA,KAAM,KAAK,CAAA,GAAA;YAG9B;YASOmC,gBAAgBnC,IAAAA;AAErB,qBADAz2C,KAAKigD,YAAYxJ,GAAOA,OAAO,CAAA,KAAM,KAAK,GAAGz2C,KAAK+nB,cAAchc,CAAAA,GAAAA;YAElE;YAQO8sC,kBAAkBpC,IAAAA;AAEvB,qBADAz2C,KAAKkgD,YAAYzJ,GAAOA,OAAO,CAAA,KAAM,GAAG,CAAA,GAAA;YAE1C;YAQOwC,gBAAgBxC,IAAAA;AAErB,qBADAz2C,KAAKigD,WAAWjgD,KAAK+nB,cAAcjc,IAAI2qC,GAAOA,OAAO,CAAA,KAAM,KAAK,CAAA,GAAA;YAElE;YASOyC,kBAAkBzC,IAAAA;AAEvB,qBADAz2C,KAAKkgD,YAAY,GAAGzJ,GAAOA,OAAO,CAAA,KAAM,CAAA,GAAA;YAE1C;YAUO0C,WAAW1C,IAAAA;AAEhB,qBADAz2C,KAAKg4C,eAAevB,EAAAA,GAAAA;YAEtB;YAaO2C,SAAS3C,IAAAA;AACd,oBAAM4J,KAAQ5J,GAAOA,OAAO,CAAA;AAM5B,qBALc,MAAV4J,KAAAA,OACKrgD,KAAK+nB,cAAcu4B,KAAKtgD,KAAK+nB,cAAcjc,CAAAA,IAC/B,MAAVu0C,OACTrgD,KAAK+nB,cAAcu4B,OAAO,CAAC,IAAA;YAG/B;YAQOrI,iBAAiBxB,IAAAA;AACtB,kBAAIz2C,KAAK+nB,cAAcjc,KAAK9L,KAAK6J,eAAe6D;AAC9C,uBAAA;AAEF,kBAAI2yC,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAChC,qBAAO4J;AACLrgD,qBAAK+nB,cAAcjc,IAAI9L,KAAK+nB,cAAcg4B,SAAAA;AAE5C,qBAAA;YACF;YAOOpH,kBAAkBlC,IAAAA;AACvB,kBAAIz2C,KAAK+nB,cAAcjc,KAAK9L,KAAK6J,eAAe6D;AAC9C,uBAAA;AAEF,kBAAI2yC,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAEhC,qBAAO4J;AACLrgD,qBAAK+nB,cAAcjc,IAAI9L,KAAK+nB,cAAcw4B,SAAAA;AAE5C,qBAAA;YACF;YAOOnG,gBAAgB3D,IAAAA;AACrB,oBAAM+G,KAAI/G,GAAOA,OAAO,CAAA;AAGxB,qBAFU,MAAN+G,OAASx9C,KAAKq1C,aAAa5sC,MAAM,YAC3B,MAAN+0C,MAAiB,MAANA,OAASx9C,KAAKq1C,aAAa5sC,MAAAA,aAAM;YAElD;YAYQ+3C,mBAAmBz0C,IAAW/J,IAAeC,IAAaw+C,KAAAA,OAA4BC,KAAAA,OAA0B;AACtH,oBAAM9vC,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ9N,EAAAA;AACrE6E,cAAAA,GAAK+vC,aACH3+C,IACAC,IACAjC,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GACpCr/C,KAAKq/C,eAAAA,GACLqB,EAAAA,GAEED,OACF7vC,GAAKshB,YAAAA;YAET;YAOQ0uB,iBAAiB70C,IAAW20C,KAAAA,OAA0B;AAC5D,oBAAM9vC,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ9N,EAAAA;AACrE6E,cAAAA,GAAKuqB,KAAKn7B,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GAAmBqB,EAAAA,GACjE1gD,KAAK6J,eAAejG,OAAOi9C,aAAa7gD,KAAK+nB,cAAclO,QAAQ9N,EAAAA,GACnE6E,GAAKshB,YAAAA;YACP;YA0BOgmB,eAAezB,IAAiBiK,KAAAA,OAA0B;AAE/D,kBAAI5yC;AACJ,sBAFA9N,KAAK6/C,gBAAgB7/C,KAAK6J,eAAe6D,IAAAA,GAEjC+oC,GAAOA,OAAO,CAAA,GAAA;gBACpB,KAAK;AAIH,uBAHA3oC,KAAI9N,KAAK+nB,cAAchc,GACvB/L,KAAKs2C,iBAAiByI,UAAUjxC,EAAAA,GAChC9N,KAAKwgD,mBAAmB1yC,MAAK9N,KAAK+nB,cAAcjc,GAAG9L,KAAK6J,eAAe6D,MAA+B,MAAzB1N,KAAK+nB,cAAcjc,GAAS40C,EAAAA,GAClG5yC,KAAI9N,KAAK6J,eAAenJ,MAAMoN;AACnC9N,yBAAK4gD,iBAAiB9yC,IAAG4yC,EAAAA;AAE3B1gD,uBAAKs2C,iBAAiByI,UAAUjxC,EAAAA;AAChC;gBACF,KAAK;AASH,uBARAA,KAAI9N,KAAK+nB,cAAchc,GACvB/L,KAAKs2C,iBAAiByI,UAAUjxC,EAAAA,GAEhC9N,KAAKwgD,mBAAmB1yC,IAAG,GAAG9N,KAAK+nB,cAAcjc,IAAI,GAAA,MAAS40C,EAAAA,GAC1D1gD,KAAK+nB,cAAcjc,IAAI,KAAK9L,KAAK6J,eAAe6D,SAElD1N,KAAK+nB,cAAclkB,MAAMgF,IAAIiF,KAAI,CAAA,EAAIokB,YAAAA,QAEhCpkB;AACL9N,yBAAK4gD,iBAAiB9yC,IAAG4yC,EAAAA;AAE3B1gD,uBAAKs2C,iBAAiByI,UAAU,CAAA;AAChC;gBACF,KAAK;AAGH,uBAFAjxC,KAAI9N,KAAK6J,eAAenJ,MACxBV,KAAKs2C,iBAAiByI,UAAUjxC,KAAI,CAAA,GAC7BA;AACL9N,yBAAK4gD,iBAAiB9yC,IAAG4yC,EAAAA;AAE3B1gD,uBAAKs2C,iBAAiByI,UAAU,CAAA;AAChC;gBACF,KAAK;AAEH,wBAAM+B,KAAiB9gD,KAAK+nB,cAAclkB,MAAM5C,SAASjB,KAAK6J,eAAenJ;AACzEogD,kBAAAA,KAAiB,MACnB9gD,KAAK+nB,cAAclkB,MAAMsnC,UAAU2V,EAAAA,GACnC9gD,KAAK+nB,cAAclO,QAAQlG,KAAKG,IAAI9T,KAAK+nB,cAAclO,QAAQinC,IAAgB,CAAA,GAC/E9gD,KAAK+nB,cAAcniB,QAAQ+N,KAAKG,IAAI9T,KAAK+nB,cAAcniB,QAAQk7C,IAAgB,CAAA,GAE/E9gD,KAAK8e,UAAUpP,KAAK,CAAA;cAAA;AAI1B,qBAAA;YACF;YAwBO0oC,YAAY3B,IAAiBiK,KAAAA,OAA0B;AAE5D,sBADA1gD,KAAK6/C,gBAAgB7/C,KAAK6J,eAAe6D,IAAAA,GACjC+oC,GAAOA,OAAO,CAAA,GAAA;gBACpB,KAAK;AACHz2C,uBAAKwgD,mBAAmBxgD,KAAK+nB,cAAchc,GAAG/L,KAAK+nB,cAAcjc,GAAG9L,KAAK6J,eAAe6D,MAA+B,MAAzB1N,KAAK+nB,cAAcjc,GAAS40C,EAAAA;AAC1H;gBACF,KAAK;AACH1gD,uBAAKwgD,mBAAmBxgD,KAAK+nB,cAAchc,GAAG,GAAG/L,KAAK+nB,cAAcjc,IAAI,GAAA,OAAU40C,EAAAA;AAClF;gBACF,KAAK;AACH1gD,uBAAKwgD,mBAAmBxgD,KAAK+nB,cAAchc,GAAG,GAAG/L,KAAK6J,eAAe6D,MAAAA,MAAYgzC,EAAAA;cAAAA;AAIrF,qBADA1gD,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,GAAAA;YAErD;YAWOssC,YAAY5B,IAAAA;AACjBz2C,mBAAK6/C,gBAAAA;AACL,kBAAIQ,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAEhC,kBAAIz2C,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAcuoB,gBAAgBtwC,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce;AACtG,uBAAA;AAGF,oBAAMrI,KAAczgB,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,GAE5Dg1C,KAAyB/gD,KAAK6J,eAAenJ,OAAO,IAAIV,KAAK+nB,cAAcuoB,cAC3E0Q,KAAuBhhD,KAAK6J,eAAenJ,OAAO,IAAIV,KAAK+nB,cAAclO,QAAQknC,KAAyB;AAChH,qBAAOV;AAGLrgD,qBAAK+nB,cAAclkB,MAAMmH,OAAOg2C,KAAuB,GAAG,CAAA,GAC1DhhD,KAAK+nB,cAAclkB,MAAMmH,OAAOyV,IAAK,GAAGzgB,KAAK+nB,cAAcxC,aAAavlB,KAAKq/C,eAAAA,CAAAA,CAAAA;AAK/E,qBAFAr/C,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAchc,GAAG/L,KAAK+nB,cAAcuoB,YAAAA,GAC9EtwC,KAAK+nB,cAAcjc,IAAI,GAAA;YAEzB;YAWOwsC,YAAY7B,IAAAA;AACjBz2C,mBAAK6/C,gBAAAA;AACL,kBAAIQ,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAEhC,kBAAIz2C,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAcuoB,gBAAgBtwC,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce;AACtG,uBAAA;AAGF,oBAAMrI,KAAczgB,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc;AAElE,kBAAI+B;AAGJ,mBAFAA,KAAI9N,KAAK6J,eAAenJ,OAAO,IAAIV,KAAK+nB,cAAcuoB,cACtDxiC,KAAI9N,KAAK6J,eAAenJ,OAAO,IAAIV,KAAK+nB,cAAclO,QAAQ/L,IACvDuyC;AAGLrgD,qBAAK+nB,cAAclkB,MAAMmH,OAAOyV,IAAK,CAAA,GACrCzgB,KAAK+nB,cAAclkB,MAAMmH,OAAO8C,IAAG,GAAG9N,KAAK+nB,cAAcxC,aAAavlB,KAAKq/C,eAAAA,CAAAA,CAAAA;AAK7E,qBAFAr/C,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAchc,GAAG/L,KAAK+nB,cAAcuoB,YAAAA,GAC9EtwC,KAAK+nB,cAAcjc,IAAI,GAAA;YAEzB;YAaOurC,YAAYZ,IAAAA;AACjBz2C,mBAAK6/C,gBAAAA;AACL,oBAAMjvC,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA;AAUxF,qBATI6E,OACFA,GAAK0uC,YACHt/C,KAAK+nB,cAAcjc,GACnB2qC,GAAOA,OAAO,CAAA,KAAM,GACpBz2C,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GACpCr/C,KAAKq/C,eAAAA,CAAAA,GAEPr/C,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,IAAAA;YAGvD;YAaOwsC,YAAY9B,IAAAA;AACjBz2C,mBAAK6/C,gBAAAA;AACL,oBAAMjvC,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA;AAUxF,qBATI6E,OACFA,GAAKqwC,YACHjhD,KAAK+nB,cAAcjc,GACnB2qC,GAAOA,OAAO,CAAA,KAAM,GACpBz2C,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GACpCr/C,KAAKq/C,eAAAA,CAAAA,GAEPr/C,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,IAAAA;YAGvD;YAUOysC,SAAS/B,IAAAA;AACd,kBAAI4J,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAEhC,qBAAO4J;AACLrgD,qBAAK+nB,cAAclkB,MAAMmH,OAAOhL,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAce,WAAW,CAAA,GACzF9oB,KAAK+nB,cAAclkB,MAAMmH,OAAOhL,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAcuoB,cAAc,GAAGtwC,KAAK+nB,cAAcxC,aAAavlB,KAAKq/C,eAAAA,CAAAA,CAAAA;AAGtI,qBADAr/C,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAcuoB,YAAAA,GAAAA;YAExF;YAOOmI,WAAWhC,IAAAA;AAChB,kBAAI4J,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAEhC,qBAAO4J;AACLrgD,qBAAK+nB,cAAclkB,MAAMmH,OAAOhL,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAcuoB,cAAc,CAAA,GAC5FtwC,KAAK+nB,cAAclkB,MAAMmH,OAAOhL,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAce,WAAW,GAAG9oB,KAAK+nB,cAAcxC,aAAa,EAAAC,iBAAAA,CAAAA;AAG9H,qBADAxlB,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAcuoB,YAAAA,GAAAA;YAExF;YAoBOiH,WAAWd,IAAAA;AAChB,kBAAIz2C,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAcuoB,gBAAgBtwC,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce;AACtG,uBAAA;AAEF,oBAAMu3B,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAClC,uBAAS1qC,KAAI/L,KAAK+nB,cAAce,WAAW/c,MAAK/L,KAAK+nB,cAAcuoB,cAAAA,EAAgBvkC,IAAG;AACpF,sBAAM6E,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ9N,EAAAA;AACrE6E,gBAAAA,GAAKqwC,YAAY,GAAGZ,IAAOrgD,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GAAmBr/C,KAAKq/C,eAAAA,CAAAA,GACvFzuC,GAAKshB,YAAAA;cAAY;AAGnB,qBADAlyB,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAcuoB,YAAAA,GAAAA;YAExF;YAqBOmH,YAAYhB,IAAAA;AACjB,kBAAIz2C,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAcuoB,gBAAgBtwC,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce;AACtG,uBAAA;AAEF,oBAAMu3B,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAClC,uBAAS1qC,KAAI/L,KAAK+nB,cAAce,WAAW/c,MAAK/L,KAAK+nB,cAAcuoB,cAAAA,EAAgBvkC,IAAG;AACpF,sBAAM6E,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ9N,EAAAA;AACrE6E,gBAAAA,GAAK0uC,YAAY,GAAGe,IAAOrgD,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GAAmBr/C,KAAKq/C,eAAAA,CAAAA,GACvFzuC,GAAKshB,YAAAA;cAAY;AAGnB,qBADAlyB,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAcuoB,YAAAA,GAAAA;YAExF;YAWO4J,cAAczD,IAAAA;AACnB,kBAAIz2C,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAcuoB,gBAAgBtwC,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce;AACtG,uBAAA;AAEF,oBAAMu3B,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAClC,uBAAS1qC,KAAI/L,KAAK+nB,cAAce,WAAW/c,MAAK/L,KAAK+nB,cAAcuoB,cAAAA,EAAgBvkC,IAAG;AACpF,sBAAM6E,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ9N,EAAAA;AACrE6E,gBAAAA,GAAK0uC,YAAYt/C,KAAK+nB,cAAcjc,GAAGu0C,IAAOrgD,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GAAmBr/C,KAAKq/C,eAAAA,CAAAA,GAC1GzuC,GAAKshB,YAAAA;cAAY;AAGnB,qBADAlyB,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAcuoB,YAAAA,GAAAA;YAExF;YAWO6J,cAAc1D,IAAAA;AACnB,kBAAIz2C,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAcuoB,gBAAgBtwC,KAAK+nB,cAAchc,IAAI/L,KAAK+nB,cAAce;AACtG,uBAAA;AAEF,oBAAMu3B,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAClC,uBAAS1qC,KAAI/L,KAAK+nB,cAAce,WAAW/c,MAAK/L,KAAK+nB,cAAcuoB,cAAAA,EAAgBvkC,IAAG;AACpF,sBAAM6E,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ9N,EAAAA;AACrE6E,gBAAAA,GAAKqwC,YAAYjhD,KAAK+nB,cAAcjc,GAAGu0C,IAAOrgD,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GAAmBr/C,KAAKq/C,eAAAA,CAAAA,GAC1GzuC,GAAKshB,YAAAA;cAAY;AAGnB,qBADAlyB,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAcuoB,YAAAA,GAAAA;YAExF;YAUOoI,WAAWjC,IAAAA;AAChBz2C,mBAAK6/C,gBAAAA;AACL,oBAAMjvC,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI7I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,CAAAA;AAUxF,qBATI6E,OACFA,GAAK+vC,aACH3gD,KAAK+nB,cAAcjc,GACnB9L,KAAK+nB,cAAcjc,KAAK2qC,GAAOA,OAAO,CAAA,KAAM,IAC5Cz2C,KAAK+nB,cAAcw3B,YAAYv/C,KAAKq/C,eAAAA,CAAAA,GACpCr/C,KAAKq/C,eAAAA,CAAAA,GAEPr/C,KAAKs2C,iBAAiByI,UAAU/+C,KAAK+nB,cAAchc,CAAAA,IAAAA;YAGvD;YA6BO+sC,yBAAyBrC,IAAAA;AAC9B,kBAAA,CAAKz2C,KAAKy0C,QAAQiL;AAChB,uBAAA;AAGF,oBAAMz+C,KAASw1C,GAAOA,OAAO,CAAA,KAAM,GAC7Bz0B,KAAO,IAAI4yB,YAAY3zC,EAAAA;AAC7B,uBAAS/B,KAAI,GAAGA,KAAI+B,IAAAA,EAAU/B;AAC5B8iB,gBAAAA,GAAK9iB,EAAAA,IAAKc,KAAKy0C,QAAQiL;AAGzB,qBADA1/C,KAAKo3C,MAAMp1B,IAAM,GAAGA,GAAK/gB,MAAAA,GAAAA;YAE3B;YA2BO83C,4BAA4BtC,IAAAA;AACjC,qBAAIA,GAAOA,OAAO,CAAA,IAAK,MAGnBz2C,KAAKkhD,IAAI,OAAA,KAAYlhD,KAAKkhD,IAAI,cAAA,KAAmBlhD,KAAKkhD,IAAI,QAAA,IAC5DlhD,KAAKwvB,aAAaxoB,iBAAiB,EAAAmR,GAAGC,MAAM,QAAA,IACnCpY,KAAKkhD,IAAI,OAAA,KAClBlhD,KAAKwvB,aAAaxoB,iBAAiB,EAAAmR,GAAGC,MAAM,MAAA,IAAA;YAGhD;YA0BO4gC,8BAA8BvC,IAAAA;AACnC,qBAAIA,GAAOA,OAAO,CAAA,IAAK,MAMnBz2C,KAAKkhD,IAAI,OAAA,IACXlhD,KAAKwvB,aAAaxoB,iBAAiB,EAAAmR,GAAGC,MAAM,YAAA,IACnCpY,KAAKkhD,IAAI,cAAA,IAClBlhD,KAAKwvB,aAAaxoB,iBAAiB,EAAAmR,GAAGC,MAAM,YAAA,IACnCpY,KAAKkhD,IAAI,OAAA,IAGlBlhD,KAAKwvB,aAAaxoB,iBAAiByvC,GAAOA,OAAO,CAAA,IAAK,GAAA,IAC7Cz2C,KAAKkhD,IAAI,QAAA,KAClBlhD,KAAKwvB,aAAaxoB,iBAAiB,EAAAmR,GAAGC,MAAM,eAAA,IAAA;YAGhD;YAMQ8oC,IAAIC,IAAAA;AACV,qBAAyE,OAAjEnhD,KAAKyQ,gBAAgBM,WAAWqwC,WAAW,IAAIr2C,QAAQo2C,EAAAA;YACjE;YAmBO9H,QAAQ5C,IAAAA;AACb,uBAASv3C,KAAI,GAAGA,KAAIu3C,GAAOx1C,QAAQ/B;AACjC,wBAAQu3C,GAAOA,OAAOv3C,EAAAA,GAAAA;kBACpB,KAAK;AACHc,yBAAKwvB,aAAaovB,MAAMD,aAAAA;AACxB;kBACF,KAAK;AACH3+C,yBAAKyQ,gBAAgBnH,QAAQq2C,aAAAA;gBAAa;AAIhD,qBAAA;YACF;YAoHOrG,eAAe7C,IAAAA;AACpB,uBAASv3C,KAAI,GAAGA,KAAIu3C,GAAOx1C,QAAQ/B;AACjC,wBAAQu3C,GAAOA,OAAOv3C,EAAAA,GAAAA;kBACpB,KAAK;AACHc,yBAAKwvB,aAAazoB,gBAAgBgb,wBAAAA;AAClC;kBACF,KAAK;AACH/hB,yBAAK4vC,gBAAgByR,YAAY,GAAG,EAAAC,eAAAA,GACpCthD,KAAK4vC,gBAAgByR,YAAY,GAAG,EAAAC,eAAAA,GACpCthD,KAAK4vC,gBAAgByR,YAAY,GAAG,EAAAC,eAAAA,GACpCthD,KAAK4vC,gBAAgByR,YAAY,GAAG,EAAAC,eAAAA;AAEpC;kBACF,KAAK;AAMCthD,yBAAKyQ,gBAAgBM,WAAWipC,cAAchH,gBAChDhzC,KAAK6J,eAAewT,OAAO,KAAKrd,KAAK6J,eAAenJ,IAAAA,GACpDV,KAAKy1C,gBAAgB/lC,KAAAA;AAEvB;kBACF,KAAK;AACH1P,yBAAKwvB,aAAazoB,gBAAgB6gB,SAAAA,MAClC5nB,KAAKigD,WAAW,GAAG,CAAA;AACnB;kBACF,KAAK;AACHjgD,yBAAKwvB,aAAazoB,gBAAgB23C,aAAAA;AAClC;kBACF,KAAK;AACH1+C,yBAAKyQ,gBAAgBnH,QAAQotB,cAAAA;AAC7B;kBACF,KAAK;AACH12B,yBAAKwvB,aAAazoB,gBAAgB64C,oBAAAA;AAClC;kBACF,KAAK;AACH5/C,yBAAK4b,YAAYC,MAAM,2CAAA,GACvB7b,KAAKwvB,aAAazoB,gBAAgBw6C,oBAAAA,MAClCvhD,KAAK21C,wBAAwBjmC,KAAAA;AAC7B;kBACF,KAAK;AAEH1P,yBAAKu0C,kBAAkB5yB,iBAAiB;AACxC;kBACF,KAAK;AAEH3hB,yBAAKu0C,kBAAkB5yB,iBAAiB;AACxC;kBACF,KAAK;AACH3hB,yBAAKu0C,kBAAkB5yB,iBAAiB;AACxC;kBACF,KAAK;AAGH3hB,yBAAKu0C,kBAAkB5yB,iBAAiB;AACxC;kBACF,KAAK;AAGH3hB,yBAAKwvB,aAAazoB,gBAAgBoS,YAAAA,MAClCnZ,KAAK01C,oBAAoBhmC,KAAAA;AACzB;kBACF,KAAK;AACH1P,yBAAK4b,YAAYC,MAAM,uCAAA;AACvB;kBACF,KAAK;AACH7b,yBAAKu0C,kBAAkBiN,iBAAiB;AACxC;kBACF,KAAK;AACHxhD,yBAAK4b,YAAYC,MAAM,uCAAA;AACvB;kBACF,KAAK;AACH7b,yBAAKu0C,kBAAkBiN,iBAAiB;AACxC;kBACF,KAAK;AACHxhD,yBAAKwvB,aAAa+I,iBAAAA;AAClB;kBACF,KAAK;AACHv4B,yBAAK+5C,WAAAA;AACL;kBACF,KAAK;AACH/5C,yBAAK+5C,WAAAA;kBAEP,KAAK;kBACL,KAAK;AACH/5C,yBAAK6J,eAAegP,QAAQ4oC,kBAAkBzhD,KAAKq/C,eAAAA,CAAAA,GACnDr/C,KAAKwvB,aAAajN,sBAAAA,MAClBviB,KAAKw1C,sBAAsB9lC,KAAK,GAAG1P,KAAK6J,eAAenJ,OAAO,CAAA,GAC9DV,KAAK21C,wBAAwBjmC,KAAAA;AAC7B;kBACF,KAAK;AACH1P,yBAAKwvB,aAAazoB,gBAAgBJ,qBAAAA;gBAAqB;AAI7D,qBAAA;YACF;YAuBO4yC,UAAU9C,IAAAA;AACf,uBAASv3C,KAAI,GAAGA,KAAIu3C,GAAOx1C,QAAQ/B;AACjC,wBAAQu3C,GAAOA,OAAOv3C,EAAAA,GAAAA;kBACpB,KAAK;AACHc,yBAAKwvB,aAAaovB,MAAMD,aAAAA;AACxB;kBACF,KAAK;AACH3+C,yBAAKyQ,gBAAgBnH,QAAQq2C,aAAAA;gBAAa;AAIhD,qBAAA;YACF;YAgHOnG,iBAAiB/C,IAAAA;AACtB,uBAASv3C,KAAI,GAAGA,KAAIu3C,GAAOx1C,QAAQ/B;AACjC,wBAAQu3C,GAAOA,OAAOv3C,EAAAA,GAAAA;kBACpB,KAAK;AACHc,yBAAKwvB,aAAazoB,gBAAgBgb,wBAAAA;AAClC;kBACF,KAAK;AAMC/hB,yBAAKyQ,gBAAgBM,WAAWipC,cAAchH,gBAChDhzC,KAAK6J,eAAewT,OAAO,IAAIrd,KAAK6J,eAAenJ,IAAAA,GACnDV,KAAKy1C,gBAAgB/lC,KAAAA;AAEvB;kBACF,KAAK;AACH1P,yBAAKwvB,aAAazoB,gBAAgB6gB,SAAAA,OAClC5nB,KAAKigD,WAAW,GAAG,CAAA;AACnB;kBACF,KAAK;AACHjgD,yBAAKwvB,aAAazoB,gBAAgB23C,aAAAA;AAClC;kBACF,KAAK;AACH1+C,yBAAKyQ,gBAAgBnH,QAAQotB,cAAAA;AAC7B;kBACF,KAAK;AACH12B,yBAAKwvB,aAAazoB,gBAAgB64C,oBAAAA;AAClC;kBACF,KAAK;AACH5/C,yBAAK4b,YAAYC,MAAM,kCAAA,GACvB7b,KAAKwvB,aAAazoB,gBAAgBw6C,oBAAAA,OAClCvhD,KAAK21C,wBAAwBjmC,KAAAA;AAC7B;kBACF,KAAK;kBACL,KAAK;kBACL,KAAK;kBACL,KAAK;AACH1P,yBAAKu0C,kBAAkB5yB,iBAAiB;AACxC;kBACF,KAAK;AACH3hB,yBAAKwvB,aAAazoB,gBAAgBoS,YAAAA;AAClC;kBACF,KAAK;AACHnZ,yBAAK4b,YAAYC,MAAM,uCAAA;AACvB;kBACF,KAAK;kBAML,KAAK;AACH7b,yBAAKu0C,kBAAkBiN,iBAAiB;AACxC;kBALF,KAAK;AACHxhD,yBAAK4b,YAAYC,MAAM,uCAAA;AACvB;kBAIF,KAAK;AACH7b,yBAAKwvB,aAAa+I,iBAAAA;AAClB;kBACF,KAAK;AACHv4B,yBAAKi6C,cAAAA;AACL;kBACF,KAAK;kBAEL,KAAK;kBACL,KAAK;AAEHj6C,yBAAK6J,eAAegP,QAAQ6oC,qBAAAA,GACH,SAArBjL,GAAOA,OAAOv3C,EAAAA,KAChBc,KAAKi6C,cAAAA,GAEPj6C,KAAKwvB,aAAajN,sBAAAA,MAClBviB,KAAKw1C,sBAAsB9lC,KAAK,GAAG1P,KAAK6J,eAAenJ,OAAO,CAAA,GAC9DV,KAAK21C,wBAAwBjmC,KAAAA;AAC7B;kBACF,KAAK;AACH1P,yBAAKwvB,aAAazoB,gBAAgBJ,qBAAAA;gBAAqB;AAI7D,qBAAA;YACF;YAmCO0zC,YAAY5D,IAAiBv+B,IAAAA;AAWlC,oBAAMypC,KAAK3hD,KAAKwvB,aAAazoB,iBAAAA,EACrB4a,gBAAgBigC,IAAeJ,gBAAgBK,GAAAA,IAAkB7hD,KAAKu0C,mBACxEuN,KAAK9hD,KAAKwvB,cAAAA,EACV,SAAE3W,IAAO,MAAEnL,GAAAA,IAAS1N,KAAK6J,gBAAAA,EACzB,QAAEiP,IAAM,KAAE8H,GAAAA,IAAQ/H,IAClBk6B,KAAO/yC,KAAKyQ,gBAAgBM,YAM5BgxC,KAAO96C,CAAAA,OAAsBA,KAAQ,IAAQ,GAE7Cu2C,KAAI/G,GAAOA,OAAO,CAAA;AAExB,qBARWuL,KASaxE,IATFxuC,KAQlBkJ,KACQ,MAANslC,KAAqB,IACf,MAANA,KAAqBuE,GAAID,GAAGlD,MAAMD,UAAAA,IAC5B,OAANnB,KAAsB,IAChB,OAANA,KAAsBuE,GAAIhP,GAAK4M,UAAAA,IACvB,IAGJ,MAANnC,KAAqBuE,GAAIJ,GAAG5/B,qBAAAA,IACtB,MAANy7B,KAAqBzK,GAAKiH,cAAchH,cAAwB,OAATtlC,KAAc,IAAmB,QAATA,KAAe,IAAQ,IAAoB,IACpH,MAAN8vC,KAAqBuE,GAAIJ,GAAG/5B,MAAAA,IACtB,MAAN41B,KAAqBuE,GAAIJ,GAAGjD,UAAAA,IACtB,MAANlB,KAAqB,IACf,MAANA,KAAqBuE,GAAsB,UAAlBH,EAAAA,IACnB,OAANpE,KAAsBuE,GAAIhP,GAAKrc,WAAAA,IACzB,OAAN8mB,KAAsBuE,GAAAA,CAAKD,GAAGvpB,cAAAA,IACxB,OAANilB,KAAsBuE,GAAIJ,GAAG/B,iBAAAA,IACvB,OAANpC,KAAsBuE,GAAIJ,GAAGJ,iBAAAA,IACvB,QAAN/D,KAAwBuE,GAAsB,YAAlBH,EAAAA,IACtB,SAANpE,KAAwBuE,GAAsB,WAAlBH,EAAAA,IACtB,SAANpE,KAAwBuE,GAAsB,UAAlBH,EAAAA,IACtB,SAANpE,KAAwBuE,GAAIJ,GAAGxoC,SAAAA,IACzB,SAANqkC,KAAwB,IAClB,SAANA,KAAwBuE,GAAsB,UAAlBF,EAAAA,IACtB,SAANrE,KAAwB,IAClB,SAANA,KAAwBuE,GAAsB,iBAAlBF,EAAAA,IACtB,SAANrE,KAAwB,IAClB,OAANA,MAAkB,SAANA,MAAoB,SAANA,KAAwBuE,GAAIjpC,OAAW8H,EAAAA,IAC3D,SAAN48B,KAAwBuE,GAAIJ,GAAGh7C,kBAAAA,IACvB,GApCVm7C,GAAG96C,iBAAiB,GAAG,EAAAmR,GAAGC,OAAOF,KAAO,KAAK,MAAM8pC,MAAKhzC,MAAAA,GAAAA;AADhD,kBAACgzC,IAAWhzC;YAsCxB;YAKQizC,iBAAiBlqC,IAAemqC,IAAcC,IAAYC,IAAYC,IAAAA;AAS5E,qBARa,MAATH,MACFnqC,MAAS,UACTA,MAAAA,WACAA,MAAS,EAAAohB,cAAcmpB,aAAa,CAACH,IAAIC,IAAIC,EAAAA,CAAAA,KAC3B,MAATH,OACTnqC,MAAAA,WACAA,MAAS,WAA2B,MAALoqC,KAE1BpqC;YACT;YAMQwqC,cAAc9L,IAAiBpvC,IAAam7C,IAAAA;AAKlD,oBAAMC,KAAO,CAAC,GAAG,GAAA,IAAO,GAAG,GAAG,CAAA;AAG9B,kBAAIC,KAAS,GAGTC,KAAU;AAEd,iBAAG;AAED,oBADAF,GAAKE,KAAUD,EAAAA,IAAUjM,GAAOA,OAAOpvC,KAAMs7C,EAAAA,GACzClM,GAAOmM,aAAav7C,KAAMs7C,EAAAA,GAAU;AACtC,wBAAME,KAAYpM,GAAOqM,aAAaz7C,KAAMs7C,EAAAA;AAC5C,sBAAIzjD,KAAI;AACR,qBAAA;AACkB,0BAAZujD,GAAK,CAAA,MACPC,KAAS,IAEXD,GAAKE,KAAUzjD,KAAI,IAAIwjD,EAAAA,IAAUG,GAAU3jD,EAAAA;kBAAAA,SAAAA,EAClCA,KAAI2jD,GAAU5hD,UAAU/B,KAAIyjD,KAAU,IAAID,KAASD,GAAKxhD;AACnE;gBAAA;AAGF,oBAAiB,MAAZwhD,GAAK,CAAA,KAAYE,KAAUD,MAAU,KACxB,MAAZD,GAAK,CAAA,KAAYE,KAAUD,MAAU;AACzC;AAGED,gBAAAA,GAAK,CAAA,MACPC,KAAS;cAAA,SAAA,EAEFC,KAAUt7C,KAAMovC,GAAOx1C,UAAU0hD,KAAUD,KAASD,GAAKxhD;AAGpE,uBAAS/B,KAAI,GAAGA,KAAIujD,GAAKxhD,QAAAA,EAAU/B;AAAAA,uBAC7BujD,GAAKvjD,EAAAA,MACPujD,GAAKvjD,EAAAA,IAAK;AAKd,sBAAQujD,GAAK,CAAA,GAAA;gBACX,KAAK;AACHD,kBAAAA,GAAK95C,KAAK1I,KAAKiiD,iBAAiBO,GAAK95C,IAAI+5C,GAAK,CAAA,GAAIA,GAAK,CAAA,GAAIA,GAAK,CAAA,GAAIA,GAAK,CAAA,CAAA;AACzE;gBACF,KAAK;AACHD,kBAAAA,GAAK/5C,KAAKzI,KAAKiiD,iBAAiBO,GAAK/5C,IAAIg6C,GAAK,CAAA,GAAIA,GAAK,CAAA,GAAIA,GAAK,CAAA,GAAIA,GAAK,CAAA,CAAA;AACzE;gBACF,KAAK;AACHD,kBAAAA,GAAK/wC,WAAW+wC,GAAK/wC,SAAS65B,MAAAA,GAC9BkX,GAAK/wC,SAASsxC,iBAAiB/iD,KAAKiiD,iBAAiBO,GAAK/wC,SAASsxC,gBAAgBN,GAAK,CAAA,GAAIA,GAAK,CAAA,GAAIA,GAAK,CAAA,GAAIA,GAAK,CAAA,CAAA;cAAA;AAGvH,qBAAOE;YACT;YAWQK,kBAAkB58C,IAAeo8C,IAAAA;AAGvCA,cAAAA,GAAK/wC,WAAW+wC,GAAK/wC,SAAS65B,MAAAA,IAAAA,CAAAA,CAGxBllC,MAASA,KAAQ,OACrBA,KAAQ,IAEVo8C,GAAK/wC,SAASsnB,iBAAiB3yB,IAC/Bo8C,GAAK95C,MAAM,WAGG,MAAVtC,OACFo8C,GAAK95C,MAAAA,aAIP85C,GAAKS,eAAAA;YACP;YAEQC,aAAaV,IAAAA;AACnBA,cAAAA,GAAK95C,KAAK,EAAA8c,kBAAkB9c,IAC5B85C,GAAK/5C,KAAK,EAAA+c,kBAAkB/c,IAC5B+5C,GAAK/wC,WAAW+wC,GAAK/wC,SAAS65B,MAAAA,GAG9BkX,GAAK/wC,SAASsnB,iBAAiB,GAC/BypB,GAAK/wC,SAASsxC,kBAAAA,WACdP,GAAKS,eAAAA;YACP;YAoFOxJ,eAAehD,IAAAA;AAEpB,kBAAsB,MAAlBA,GAAOx1C,UAAqC,MAArBw1C,GAAOA,OAAO,CAAA;AAEvC,uBADAz2C,KAAKkjD,aAAaljD,KAAKq1C,YAAAA,GAAAA;AAIzB,oBAAM8N,KAAI1M,GAAOx1C;AACjB,kBAAIu8C;AACJ,oBAAMgF,KAAOxiD,KAAKq1C;AAElB,uBAASn2C,KAAI,GAAGA,KAAIikD,IAAGjkD;AACrBs+C,gBAAAA,KAAI/G,GAAOA,OAAOv3C,EAAAA,GACds+C,MAAK,MAAMA,MAAK,MAElBgF,GAAK95C,MAAAA,WACL85C,GAAK95C,MAAM,WAAqB80C,KAAI,MAC3BA,MAAK,MAAMA,MAAK,MAEzBgF,GAAK/5C,MAAAA,WACL+5C,GAAK/5C,MAAM,WAAqB+0C,KAAI,MAC3BA,MAAK,MAAMA,MAAK,MAEzBgF,GAAK95C,MAAAA,WACL85C,GAAK95C,MAAM,WAAqB80C,KAAI,MAC3BA,MAAK,OAAOA,MAAK,OAE1BgF,GAAK/5C,MAAAA,WACL+5C,GAAK/5C,MAAM,WAAqB+0C,KAAI,OACrB,MAANA,KAETx9C,KAAKkjD,aAAaV,EAAAA,IACH,MAANhF,KAETgF,GAAK95C,MAAM,YACI,MAAN80C,KAETgF,GAAK/5C,MAAM,WACI,MAAN+0C,MAETgF,GAAK95C,MAAM,WACX1I,KAAKgjD,kBAAkBvM,GAAOmM,aAAa1jD,EAAAA,IAAKu3C,GAAOqM,aAAa5jD,EAAAA,EAAI,CAAA,IAAK,GAAuBsjD,EAAAA,KACrF,MAANhF,KAETgF,GAAK95C,MAAM,YACI,MAAN80C,KAGTgF,GAAK95C,MAAM,WACI,MAAN80C,KAETgF,GAAK95C,MAAM,aACI,MAAN80C,KAETgF,GAAK95C,MAAM,aACI,MAAN80C,KAETgF,GAAK/5C,MAAM,YACI,OAAN+0C,KAETx9C,KAAKgjD,kBAAkB,GAAuBR,EAAAA,IAC/B,OAANhF,MAETgF,GAAK95C,MAAAA,YACL85C,GAAK/5C,MAAAA,cACU,OAAN+0C,KAETgF,GAAK/5C,MAAAA,YACU,OAAN+0C,MAETgF,GAAK95C,MAAAA,YACL1I,KAAKgjD,kBAAkB,GAAqBR,EAAAA,KAC7B,OAANhF,KAETgF,GAAK95C,MAAAA,aACU,OAAN80C,KAETgF,GAAK95C,MAAAA,YACU,OAAN80C,KAETgF,GAAK95C,MAAAA,cACU,OAAN80C,KAETgF,GAAK95C,MAAM,aACI,OAAN80C,MAETgF,GAAK95C,MAAAA,WACL85C,GAAK95C,MAA6B,WAAvB,EAAA8c,kBAAkB9c,MACd,OAAN80C,MAETgF,GAAK/5C,MAAAA,WACL+5C,GAAK/5C,MAA6B,WAAvB,EAAA+c,kBAAkB/c,MACd,OAAN+0C,MAAkB,OAANA,MAAkB,OAANA,KAEjCt+C,MAAKc,KAAKuiD,cAAc9L,IAAQv3C,IAAGsjD,EAAAA,IACpB,OAANhF,MACTgF,GAAK/wC,WAAW+wC,GAAK/wC,SAAS65B,MAAAA,GAC9BkX,GAAK/wC,SAASsxC,iBAAAA,IACdP,GAAKS,eAAAA,KACU,QAANzF,MAETgF,GAAK95C,MAAAA,WACL85C,GAAK95C,MAA6B,WAAvB,EAAA8c,kBAAkB9c,IAC7B85C,GAAK/5C,MAAAA,WACL+5C,GAAK/5C,MAA6B,WAAvB,EAAA+c,kBAAkB/c,MAE7BzI,KAAK4b,YAAYC,MAAM,8BAA8B2hC,EAAAA;AAGzD,qBAAA;YACF;YA2BO9D,aAAajD,IAAAA;AAClB,sBAAQA,GAAOA,OAAO,CAAA,GAAA;gBACpB,KAAK;AAEHz2C,uBAAKwvB,aAAaxoB,iBAAiB,GAAG,EAAAmR,GAAGC,QAAAA;AACzC;gBACF,KAAK;AAEH,wBAAMrM,KAAI/L,KAAK+nB,cAAchc,IAAI,GAC3BD,KAAI9L,KAAK+nB,cAAcjc,IAAI;AACjC9L,uBAAKwvB,aAAaxoB,iBAAiB,GAAG,EAAAmR,GAAGC,OAAOrM,MAAKD,KAAAA;cAAAA;AAGzD,qBAAA;YACF;YAGO6tC,oBAAoBlD,IAAAA;AAGzB,kBACO,MADCA,GAAOA,OAAO,CAAA,GACpB;AAEE,sBAAM1qC,KAAI/L,KAAK+nB,cAAchc,IAAI,GAC3BD,KAAI9L,KAAK+nB,cAAcjc,IAAI;AACjC9L,qBAAKwvB,aAAaxoB,iBAAiB,GAAG,EAAAmR,GAAGC,QAAQrM,MAAKD,KAAAA;cACjD;AAkBT,qBAAA;YACF;YAqBO8tC,UAAUnD,IAAAA;AAkBf,qBAjBAz2C,KAAKwvB,aAAa+I,iBAAAA,OAClBv4B,KAAK21C,wBAAwBjmC,KAAAA,GAC7B1P,KAAK+nB,cAAce,YAAY,GAC/B9oB,KAAK+nB,cAAcuoB,eAAetwC,KAAK6J,eAAenJ,OAAO,GAC7DV,KAAKq1C,eAAe,EAAA7vB,kBAAkB8lB,MAAAA,GACtCtrC,KAAKwvB,aAAaxY,MAAAA,GAClBhX,KAAK4vC,gBAAgB54B,MAAAA,GAGrBhX,KAAK+nB,cAAcq7B,SAAS,GAC5BpjD,KAAK+nB,cAAcs7B,SAASrjD,KAAK+nB,cAAclO,OAC/C7Z,KAAK+nB,cAAcu7B,iBAAiB56C,KAAK1I,KAAKq1C,aAAa3sC,IAC3D1I,KAAK+nB,cAAcu7B,iBAAiB76C,KAAKzI,KAAKq1C,aAAa5sC,IAC3DzI,KAAK+nB,cAAcw7B,eAAevjD,KAAK4vC,gBAAgB4O,SAGvDx+C,KAAKwvB,aAAazoB,gBAAgB6gB,SAAAA,OAAS;YAE7C;YAqBOiyB,eAAepD,IAAAA;AACpB,oBAAM4J,KAAQ5J,GAAOA,OAAO,CAAA,KAAM;AAClC,sBAAQ4J,IAAAA;gBACN,KAAK;gBACL,KAAK;AACHrgD,uBAAKyQ,gBAAgBnH,QAAQstB,cAAc;AAC3C;gBACF,KAAK;gBACL,KAAK;AACH52B,uBAAKyQ,gBAAgBnH,QAAQstB,cAAc;AAC3C;gBACF,KAAK;gBACL,KAAK;AACH52B,uBAAKyQ,gBAAgBnH,QAAQstB,cAAc;cAAA;AAG/C,oBAAM4sB,KAAanD,KAAQ,KAAM;AAEjC,qBADArgD,KAAKyQ,gBAAgBnH,QAAQotB,cAAc8sB,IAAAA;YAE7C;YASO1J,gBAAgBrD,IAAAA;AACrB,oBAAMhvC,KAAMgvC,GAAOA,OAAO,CAAA,KAAM;AAChC,kBAAIgN;AAWJ,sBATIhN,GAAOx1C,SAAS,MAAMwiD,KAAShN,GAAOA,OAAO,CAAA,KAAMz2C,KAAK6J,eAAenJ,QAAmB,MAAX+iD,QACjFA,KAASzjD,KAAK6J,eAAenJ,OAG3B+iD,KAASh8C,OACXzH,KAAK+nB,cAAce,YAAYrhB,KAAM,GACrCzH,KAAK+nB,cAAcuoB,eAAemT,KAAS,GAC3CzjD,KAAKigD,WAAW,GAAG,CAAA,IAAA;YAGvB;YAgCOjG,cAAcvD,IAAAA;AACnB,kBAAA,CAAK3D,EAAoB2D,GAAOA,OAAO,CAAA,GAAIz2C,KAAKyQ,gBAAgBM,WAAWipC,aAAAA;AACzE,uBAAA;AAEF,oBAAM0J,KAAUjN,GAAOx1C,SAAS,IAAKw1C,GAAOA,OAAO,CAAA,IAAK;AACxD,sBAAQA,GAAOA,OAAO,CAAA,GAAA;gBACpB,KAAK;AACY,wBAAXiN,MACF1jD,KAAK41C,+BAA+BlmC,KAAKgW,EAAyBC,mBAAAA;AAEpE;gBACF,KAAK;AACH3lB,uBAAK41C,+BAA+BlmC,KAAKgW,EAAyBK,oBAAAA;AAClE;gBACF,KAAK;AACC/lB,uBAAK6J,kBACP7J,KAAKwvB,aAAaxoB,iBAAiB,GAAG,EAAAmR,GAAGC,SAASpY,KAAK6J,eAAenJ,QAAQV,KAAK6J,eAAe6D,OAAAA;AAEpG;gBACF,KAAK;AACY,wBAAXg2C,MAA2B,MAAXA,OAClB1jD,KAAKm1C,kBAAkB5wC,KAAKvE,KAAKi1C,YAAAA,GAC7Bj1C,KAAKm1C,kBAAkBl0C,SAtqFjB,MAuqFRjB,KAAKm1C,kBAAkBhxC,MAAAA,IAGZ,MAAXu/C,MAA2B,MAAXA,OAClB1jD,KAAKo1C,eAAe7wC,KAAKvE,KAAKk1C,SAAAA,GAC1Bl1C,KAAKo1C,eAAen0C,SA5qFd,MA6qFRjB,KAAKo1C,eAAejxC,MAAAA;AAGxB;gBACF,KAAK;AACY,wBAAXu/C,MAA2B,MAAXA,MACd1jD,KAAKm1C,kBAAkBl0C,UACzBjB,KAAK67C,SAAS77C,KAAKm1C,kBAAkBlxC,IAAAA,CAAAA,GAG1B,MAAXy/C,MAA2B,MAAXA,MACd1jD,KAAKo1C,eAAen0C,UACtBjB,KAAK87C,YAAY97C,KAAKo1C,eAAenxC,IAAAA,CAAAA;cAAAA;AAK7C,qBAAA;YACF;YAWO81C,WAAWtD,IAAAA;AAMhB,qBALAz2C,KAAK+nB,cAAcq7B,SAASpjD,KAAK+nB,cAAcjc,GAC/C9L,KAAK+nB,cAAcs7B,SAASrjD,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,GAC1E/L,KAAK+nB,cAAcu7B,iBAAiB56C,KAAK1I,KAAKq1C,aAAa3sC,IAC3D1I,KAAK+nB,cAAcu7B,iBAAiB76C,KAAKzI,KAAKq1C,aAAa5sC,IAC3DzI,KAAK+nB,cAAcw7B,eAAevjD,KAAK4vC,gBAAgB4O,SAAAA;YAEzD;YAWOvE,cAAcxD,IAAAA;AAUnB,qBATAz2C,KAAK+nB,cAAcjc,IAAI9L,KAAK+nB,cAAcq7B,UAAU,GACpDpjD,KAAK+nB,cAAchc,IAAI4H,KAAKG,IAAI9T,KAAK+nB,cAAcs7B,SAASrjD,KAAK+nB,cAAclO,OAAO,CAAA,GACtF7Z,KAAKq1C,aAAa3sC,KAAK1I,KAAK+nB,cAAcu7B,iBAAiB56C,IAC3D1I,KAAKq1C,aAAa5sC,KAAKzI,KAAK+nB,cAAcu7B,iBAAiB76C,IAC3DzI,KAAK4vC,gBAAgB4O,UAAWx+C,KAAa2jD,eACzC3jD,KAAK+nB,cAAcw7B,iBACrBvjD,KAAK4vC,gBAAgB4O,UAAUx+C,KAAK+nB,cAAcw7B,eAEpDvjD,KAAK6/C,gBAAAA,GAAAA;YAEP;YAaOhE,SAAS75B,IAAAA;AAGd,qBAFAhiB,KAAKi1C,eAAejzB,IACpBhiB,KAAKyV,eAAe/F,KAAKsS,EAAAA,GAAAA;YAE3B;YAMO85B,YAAY95B,IAAAA;AAEjB,qBADAhiB,KAAKk1C,YAAYlzB,IAAAA;YAEnB;YAUO+5B,wBAAwB/5B,IAAAA;AAC7B,oBAAM3X,KAAqB,CAAA,GACrBu5C,KAAQ5hC,GAAKm8B,MAAM,GAAA;AACzB,qBAAOyF,GAAM3iD,SAAS,KAAG;AACvB,sBAAM4iD,KAAMD,GAAMz/C,MAAAA,GACZ2/C,KAAOF,GAAMz/C,MAAAA;AACnB,oBAAI,QAAQ4/C,KAAKF,EAAAA,GAAM;AACrB,wBAAMj2C,KAAQojB,SAAS6yB,EAAAA;AACvB,sBAAI,KAAKj2C,MAASA,KAAQ;AACxB,wBAAa,QAATk2C;AACFz5C,sBAAAA,GAAM9F,KAAK,EAAE6E,MAAM,GAAyBwE,OAAAA,GAAAA,CAAAA;yBACvC;AACL,4BAAMmK,MAAQ,GAAA,EAAAkwB,YAAW6b,EAAAA;AACrB/rC,sBAAAA,MACF1N,GAAM9F,KAAK,EAAE6E,MAAM,GAAsBwE,OAAAA,IAAOmK,OAAAA,GAAAA,CAAAA;oBAAAA;gBAAAA;cAAAA;AAS1D,qBAHI1N,GAAMpJ,UACRjB,KAAK+1C,SAASrmC,KAAKrF,EAAAA,GAAAA;YAGvB;YAkBO2xC,aAAah6B,IAAAA;AAClB,oBAAMgiC,KAAOhiC,GAAKm8B,MAAM,GAAA;AACxB,qBAAA,EAAI6F,GAAK/iD,SAAS,OAGd+iD,GAAK,CAAA,IACAhkD,KAAKikD,iBAAiBD,GAAK,CAAA,GAAIA,GAAK,CAAA,CAAA,IAAA,CAEzCA,GAAK,CAAA,KAGFhkD,KAAKkkD,iBAAAA;YACd;YAEQD,iBAAiBxN,IAAgB7kC,IAAAA;AAEnC5R,mBAAK+9C,kBAAAA,KACP/9C,KAAKkkD,iBAAAA;AAEP,oBAAMC,KAAe1N,GAAO0H,MAAM,GAAA;AAClC,kBAAI1gB;AACJ,oBAAM2mB,KAAeD,GAAaE,UAAUjlD,CAAAA,OAAKA,GAAEklD,WAAW,KAAA,CAAA;AAO9D,qBAAA,OANIF,OACF3mB,KAAK0mB,GAAaC,EAAAA,EAActe,MAAM,CAAA,KAAA,SAExC9lC,KAAKq1C,aAAa5jC,WAAWzR,KAAKq1C,aAAa5jC,SAAS65B,MAAAA,GACxDtrC,KAAKq1C,aAAa5jC,SAASC,QAAQ1R,KAAK0Q,gBAAgB6zC,aAAa,EAAE9mB,IAAAA,IAAI7rB,KAAAA,GAAAA,CAAAA,GAC3E5R,KAAKq1C,aAAa4N,eAAAA,GAAAA;YAEpB;YAEQiB,mBAAAA;AAIN,qBAHAlkD,KAAKq1C,aAAa5jC,WAAWzR,KAAKq1C,aAAa5jC,SAAS65B,MAAAA,GACxDtrC,KAAKq1C,aAAa5jC,SAASC,QAAQ,GACnC1R,KAAKq1C,aAAa4N,eAAAA,GAAAA;YAEpB;YAUQuB,yBAAyBxiC,IAAc0hB,IAAAA;AAC7C,oBAAMkgB,KAAQ5hC,GAAKm8B,MAAM,GAAA;AACzB,uBAASj/C,KAAI,GAAGA,KAAI0kD,GAAM3iD,UAAAA,EACpByiC,MAAU1jC,KAAKq2C,eAAep1C,SAAAA,EADA/B,IAAAA,EAAKwkC;AAEvC,oBAAiB,QAAbkgB,GAAM1kD,EAAAA;AACRc,uBAAK+1C,SAASrmC,KAAK,CAAC,EAAEtG,MAAM,GAAyBwE,OAAO5N,KAAKq2C,eAAe3S,EAAAA,EAAAA,CAAAA,CAAAA;qBAC3E;AACL,wBAAM3rB,MAAQ,GAAA,EAAAkwB,YAAW2b,GAAM1kD,EAAAA,CAAAA;AAC3B6Y,kBAAAA,MACF/X,KAAK+1C,SAASrmC,KAAK,CAAC,EAAEtG,MAAM,GAAsBwE,OAAO5N,KAAKq2C,eAAe3S,EAAAA,GAAS3rB,OAAAA,GAAAA,CAAAA,CAAAA;gBAAAA;AAI5F,qBAAA;YACF;YAwBOkkC,mBAAmBj6B,IAAAA;AACxB,qBAAOhiB,KAAKwkD,yBAAyBxiC,IAAM,CAAA;YAC7C;YAOOk6B,mBAAmBl6B,IAAAA;AACxB,qBAAOhiB,KAAKwkD,yBAAyBxiC,IAAM,CAAA;YAC7C;YAOOm6B,uBAAuBn6B,IAAAA;AAC5B,qBAAOhiB,KAAKwkD,yBAAyBxiC,IAAM,CAAA;YAC7C;YAUOo6B,oBAAoBp6B,IAAAA;AACzB,kBAAA,CAAKA;AAEH,uBADAhiB,KAAK+1C,SAASrmC,KAAK,CAAC,EAAEtG,MAAM,EAAA,CAAA,CAAA,GAAA;AAG9B,oBAAMiB,KAAqB,CAAA,GACrBu5C,KAAQ5hC,GAAKm8B,MAAM,GAAA;AACzB,uBAASj/C,KAAI,GAAGA,KAAI0kD,GAAM3iD,QAAAA,EAAU/B;AAClC,oBAAI,QAAQ6kD,KAAKH,GAAM1kD,EAAAA,CAAAA,GAAK;AAC1B,wBAAM0O,KAAQojB,SAAS4yB,GAAM1kD,EAAAA,CAAAA;AACzB,uBAAK0O,MAASA,KAAQ,OACxBvD,GAAM9F,KAAK,EAAE6E,MAAM,GAA0BwE,OAAAA,GAAAA,CAAAA;gBAAAA;AAOnD,qBAHIvD,GAAMpJ,UACRjB,KAAK+1C,SAASrmC,KAAKrF,EAAAA,GAAAA;YAGvB;YAOOgyC,eAAer6B,IAAAA;AAEpB,qBADAhiB,KAAK+1C,SAASrmC,KAAK,CAAC,EAAEtG,MAAM,GAA0BwE,OAAO,IAAA,CAAA,CAAA,GAAA;YAE/D;YAOO0uC,eAAet6B,IAAAA;AAEpB,qBADAhiB,KAAK+1C,SAASrmC,KAAK,CAAC,EAAEtG,MAAM,GAA0BwE,OAAO,IAAA,CAAA,CAAA,GAAA;YAE/D;YAOO2uC,mBAAmBv6B,IAAAA;AAExB,qBADAhiB,KAAK+1C,SAASrmC,KAAK,CAAC,EAAEtG,MAAM,GAA0BwE,OAAO,IAAA,CAAA,CAAA,GAAA;YAE/D;YAWO6tC,WAAAA;AAGL,qBAFAz7C,KAAK+nB,cAAcjc,IAAI,GACvB9L,KAAK4N,MAAAA,GAAAA;YAEP;YAOO6uC,wBAAAA;AAIL,qBAHAz8C,KAAK4b,YAAYC,MAAM,2CAAA,GACvB7b,KAAKwvB,aAAazoB,gBAAgBw6C,oBAAAA,MAClCvhD,KAAK21C,wBAAwBjmC,KAAAA,GAAAA;YAE/B;YAOOgtC,oBAAAA;AAIL,qBAHA18C,KAAK4b,YAAYC,MAAM,kCAAA,GACvB7b,KAAKwvB,aAAazoB,gBAAgBw6C,oBAAAA,OAClCvhD,KAAK21C,wBAAwBjmC,KAAAA,GAAAA;YAE/B;YAQOmtC,uBAAAA;AAGL,qBAFA78C,KAAK4vC,gBAAgBgN,UAAU,CAAA,GAC/B58C,KAAK4vC,gBAAgByR,YAAY,GAAG,EAAAC,eAAAA,GAAAA;YAEtC;YAkBOtE,cAAcyH,IAAAA;AACnB,qBAA8B,MAA1BA,GAAexjD,UACjBjB,KAAK68C,qBAAAA,GAAAA,SAGmB,QAAtB4H,GAAe,CAAA,KAGnBzkD,KAAK4vC,gBAAgByR,YAAYzO,EAAO6R,GAAe,CAAA,CAAA,GAAK,EAAA1H,SAAS0H,GAAe,CAAA,CAAA,KAAO,EAAAnD,eAAAA,GAAAA;YAE7F;YAWO1zC,QAAAA;AAUL,qBATA5N,KAAK6/C,gBAAAA,GACL7/C,KAAK+nB,cAAchc,KACf/L,KAAK+nB,cAAchc,MAAM/L,KAAK+nB,cAAcuoB,eAAe,KAC7DtwC,KAAK+nB,cAAchc,KACnB/L,KAAK6J,eAAeunC,OAAOpxC,KAAKq/C,eAAAA,CAAAA,KACvBr/C,KAAK+nB,cAAchc,KAAK/L,KAAK6J,eAAenJ,SACrDV,KAAK+nB,cAAchc,IAAI/L,KAAK6J,eAAenJ,OAAO,IAEpDV,KAAK6/C,gBAAAA,GAAAA;YAEP;YAYOlE,SAAAA;AAEL,qBADA37C,KAAK+nB,cAAcu4B,KAAKtgD,KAAK+nB,cAAcjc,CAAAA,IAAAA,MAAK;YAElD;YAWO0wC,eAAAA;AAEL,kBADAx8C,KAAK6/C,gBAAAA,GACD7/C,KAAK+nB,cAAchc,MAAM/L,KAAK+nB,cAAce,WAAW;AAIzD,sBAAM47B,KAAqB1kD,KAAK+nB,cAAcuoB,eAAetwC,KAAK+nB,cAAce;AAChF9oB,qBAAK+nB,cAAclkB,MAAMunC,cAAcprC,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,GAAG24C,IAAoB,CAAA,GAC5G1kD,KAAK+nB,cAAclkB,MAAM8E,IAAI3I,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,GAAG/L,KAAK+nB,cAAcxC,aAAavlB,KAAKq/C,eAAAA,CAAAA,CAAAA,GACnHr/C,KAAKs2C,iBAAiBjG,eAAerwC,KAAK+nB,cAAce,WAAW9oB,KAAK+nB,cAAcuoB,YAAAA;cAAAA;AAEtFtwC,qBAAK+nB,cAAchc,KACnB/L,KAAK6/C,gBAAAA;AAEP,qBAAA;YACF;YAOOlD,YAAAA;AAGL,qBAFA38C,KAAKy0C,QAAQz9B,MAAAA,GACbhX,KAAKy1C,gBAAgB/lC,KAAAA,GAAAA;YAEvB;YAEOsH,QAAAA;AACLhX,mBAAKq1C,eAAe,EAAA7vB,kBAAkB8lB,MAAAA,GACtCtrC,KAAKs1C,yBAAyB,EAAA9vB,kBAAkB8lB,MAAAA;YAClD;YAKQ+T,iBAAAA;AAGN,qBAFAr/C,KAAKs1C,uBAAuB7sC,MAAAA,WAC5BzI,KAAKs1C,uBAAuB7sC,MAA6B,WAAvBzI,KAAKq1C,aAAa5sC,IAC7CzI,KAAKs1C;YACd;YAYOsH,UAAU+H,IAAAA;AAEf,qBADA3kD,KAAK4vC,gBAAgBgN,UAAU+H,EAAAA,GAAAA;YAEjC;YAUO1H,yBAAAA;AAEL,oBAAM/2C,KAAO,IAAI,EAAA8K;AACjB9K,cAAAA,GAAK+2B,UAAU,KAAK,KAAsB,IAAI1Y,WAAW,CAAA,GACzDre,GAAKwC,KAAK1I,KAAKq1C,aAAa3sC,IAC5BxC,GAAKuC,KAAKzI,KAAKq1C,aAAa5sC,IAG5BzI,KAAKigD,WAAW,GAAG,CAAA;AACnB,uBAAS2E,KAAU,GAAGA,KAAU5kD,KAAK6J,eAAenJ,MAAAA,EAAQkkD,IAAS;AACnE,sBAAMnkC,KAAMzgB,KAAK+nB,cAAclO,QAAQ7Z,KAAK+nB,cAAchc,IAAI64C,IACxDh0C,KAAO5Q,KAAK+nB,cAAclkB,MAAMgF,IAAI4X,EAAAA;AACtC7P,gBAAAA,OACFA,GAAKuqB,KAAKj1B,EAAAA,GACV0K,GAAKshB,YAAAA;cAAY;AAKrB,qBAFAlyB,KAAKs2C,iBAAiBuO,aAAAA,GACtB7kD,KAAKigD,WAAW,GAAG,CAAA,GAAA;YAErB;YA6BO7C,oBAAoBp7B,IAAcy0B,IAAAA;AACvC,oBAMMrP,KAAIpnC,KAAK6J,eAAejG,QACxBmvC,KAAO/yC,KAAKyQ,gBAAgBM;AAGlC,sBAVWzR,CAAAA,QACTU,KAAKwvB,aAAaxoB,iBAAiB,GAAG,EAAAmR,GAAGC,MAAM9Y,KAAI,EAAA6Y,GAAGC,OAAAA,GAAAA,OAS3C,SAAT4J,KAAwB,OAAOhiB,KAAKq1C,aAAayP,YAAAA,IAAgB,IAAI,QAC5D,SAAT9iC,KAAwB,eACf,QAATA,KAAuB,OAAOolB,GAAEte,YAAY,KAAKse,GAAEkJ,eAAe,OAEzD,QAATtuB,KAAuB,WACd,SAATA,KAAwB,OAPc,EAAE,OAAS,GAAG,WAAa,GAAG,KAAO,EAAA,EAOrC+wB,GAAKnc,WAAAA,KAAgBmc,GAAKrc,cAAc,IAAI,SAC7E,MAAA;YACX;YAEO2Z,eAAelgC,IAAYE,IAAAA;AAChCrQ,mBAAKs2C,iBAAiBjG,eAAelgC,IAAIE,EAAAA;YAC3C;UAAA;AA3qGF,UAAAhR,GAAA,eAAA;AAwrGA,cAAMk3C,IAAN,MAAA;YAIE92C,YACmCoK,IAAAA;AAAA,mBAAAA,iBAAAA,IAEjC7J,KAAKo+C,WAAAA;YACP;YAEOA,aAAAA;AACLp+C,mBAAKgC,QAAQhC,KAAK6J,eAAejG,OAAOmI,GACxC/L,KAAKiC,MAAMjC,KAAK6J,eAAejG,OAAOmI;YACxC;YAEOgzC,UAAUhzC,IAAAA;AACXA,cAAAA,KAAI/L,KAAKgC,QACXhC,KAAKgC,QAAQ+J,KACJA,KAAI/L,KAAKiC,QAClBjC,KAAKiC,MAAM8J;YAEf;YAEOskC,eAAelgC,IAAYE,IAAAA;AAC5BF,cAAAA,KAAKE,OACPikC,IAAQnkC,IACRA,KAAKE,IACLA,KAAKikC,IAEHnkC,KAAKnQ,KAAKgC,UACZhC,KAAKgC,QAAQmO,KAEXE,KAAKrQ,KAAKiC,QACZjC,KAAKiC,MAAMoO;YAEf;YAEOw0C,eAAAA;AACL7kD,mBAAKqwC,eAAe,GAAGrwC,KAAK6J,eAAenJ,OAAO,CAAA;YACpD;UAAA;AAvCI61C,cAAej3C,GAAA,CAKhB,EAAA,GAAA,EAAAgR,cAAAA,CAAAA,GALCimC,CAAAA;QAAAA,GAAAA,KAAAA,CAAAA,IAAAA,OAAAA;AC9uGN,mBAAgBhoC,GAAayjC,IAAAA;AAC3B,uBAAW3X,MAAK2X;AACd3X,cAAAA,GAAE7wB,QAAAA;AAEJwoC,YAAAA,GAAY/wC,SAAS;UACvB;AAAA,iBAAA,eAAA5B,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,4BAAAA,GAAA,eAAAA,GAAA,eAAAA,GAAA,aAAA,QAxDAA,GAAA,aAAA,MAAA;YAIEI,cAAAA;AAHU,mBAAAslD,eAA8B,CAAA,GAC9B,KAAA77B,cAAAA;YAGV;YAKO1f,UAAAA;AACLxJ,mBAAKkpB,cAAAA;AACL,yBAAWmR,MAAKr6B,KAAK+kD;AACnB1qB,gBAAAA,GAAE7wB,QAAAA;AAEJxJ,mBAAK+kD,aAAa9jD,SAAS;YAC7B;YAOOW,SAAgCy4B,IAAAA;AAErC,qBADAr6B,KAAK+kD,aAAaxgD,KAAK81B,EAAAA,GAChBA;YACT;YAOO2qB,WAAkC3qB,IAAAA;AACvC,oBAAMzsB,KAAQ5N,KAAK+kD,aAAah6C,QAAQsvB,EAAAA;AAAAA,qBACpCzsB,MACF5N,KAAK+kD,aAAa/5C,OAAO4C,IAAO,CAAA;YAEpC;UAAA,GAMFvO,GAAA,eAAA,SAA6B4lD,IAAAA;AAC3B,mBAAO,EAAEz7C,SAASy7C,GAAAA;UACpB,GAKA5lD,GAAA,eAAAH,IAUAG,GAAA,4BAAA,SAA0C6lD,IAAAA;AACxC,mBAAO,EAAE17C,SAAS,MAAM+E,GAAa22C,EAAAA,EAAAA;UACvC;QAAA,GAAA,MAAA,CAAA9lD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAAA,GAAA,YAAA;ACrEA,gBAAaiJ,GAAAA;YAAb,cAAA;AACU,mBAAA68C,QAA8F,CAAC;YAgBzG;YAdSx8C,IAAI89B,IAAeid,IAAiBz8C,IAAAA;AACpCjH,mBAAKmlD,MAAM1e,EAAAA,MACdzmC,KAAKmlD,MAAM1e,EAAAA,IAAS,CAAC,IAEvBzmC,KAAKmlD,MAAM1e,EAAAA,EAA2Bid,EAAAA,IAAUz8C;YAClD;YAEO4B,IAAI49B,IAAeid,IAAAA;AACxB,qBAAO1jD,KAAKmlD,MAAM1e,EAAAA,IAA4BzmC,KAAKmlD,MAAM1e,EAAAA,EAA2Bid,EAAAA,IAAAA;YACtF;YAEO16C,QAAAA;AACLhJ,mBAAKmlD,QAAQ,CAAC;YAChB;UAAA;AAhBF,UAAA9lD,GAAA,YAAAH,IAmBAG,GAAA,aAAA,MAAA;YAAA,cAAA;AACU,mBAAA8lD,QAAwE,IAAI78C;YAgBtF;YAdSK,IAAI89B,IAAeid,IAAiB0B,IAAeC,GAAiBp+C,GAAAA;AACpEjH,mBAAKmlD,MAAMt8C,IAAI49B,IAAOid,EAAAA,KACzB1jD,KAAKmlD,MAAMx8C,IAAI89B,IAAOid,IAAQ,IAAIp7C,IAAAA,GAEpCtI,KAAKmlD,MAAMt8C,IAAI49B,IAAOid,EAAAA,EAAS/6C,IAAIy8C,IAAOC,GAAQp+C,CAAAA;YACpD;YAEO4B,IAAI49B,IAAeid,IAAiB0B,IAAeC,IAAAA;AAAAA,kBAAAA;AACxD,qBAAoC,UAA7B,IAAArlD,KAAKmlD,MAAMt8C,IAAI49B,IAAOid,EAAAA,MAAAA,WAAO,IAAA,SAAA,EAAE76C,IAAIu8C,IAAOC,EAAAA;YACnD;YAEOr8C,QAAAA;AACLhJ,mBAAKmlD,MAAMn8C,MAAAA;YACb;UAAA;QAAA,GAAA,MAAA,CAAA5J,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAAA,GAAA,UAAAA,GAAA,YAAAA,GAAA,WAAAA,GAAA,SAAAA,GAAA,QAAAA,GAAA,mBAAAA,GAAA,WAAAA,GAAA,eAAAA,GAAA,YAAAA,GAAA,SAAA,QCzBWA,GAAA2tC,SAA+B,eAAA,OAAdsY;AAC9B,gBAAMC,KAAalmD,GAAM,SAAI,SAASimD,UAAUC,WAC1CC,KAAYnmD,GAAM,SAAI,SAASimD,UAAUE;AAElC,UAAAnmD,GAAAwb,YAAY0qC,GAAUtzC,SAAS,SAAA,GAC/B5S,GAAAu8B,eAAe2pB,GAAUtzC,SAAS,MAAA,GAClC5S,GAAAomD,WAAW,iCAAiCngD,KAAKigD,EAAAA,GAC9DlmD,GAAA,mBAAA,WAAA;AACE,gBAAA,CAAKA,GAAAomD;AACH,qBAAO;AAET,kBAAMC,KAAeH,GAAUnY,MAAM,gBAAA;AACrC,mBAAqB,SAAjBsY,MAAyBA,GAAazkD,SAAS,IAC1C,IAEF+vB,SAAS00B,GAAa,CAAA,CAAA;UAC/B,GAKarmD,GAAA6F,QAAQ,CAAC,aAAa,YAAY,UAAU,QAAA,EAAU+M,SAASuzC,EAAAA,GAC/DnmD,GAAAsmD,SAAsB,WAAbH,IACTnmD,GAAAumD,WAAwB,aAAbJ,IACXnmD,GAAAulB,YAAY,CAAC,WAAW,SAAS,SAAS,OAAA,EAAS3S,SAASuzC,EAAAA,GAC5DnmD,GAAA4b,UAAUuqC,GAASz6C,QAAQ,OAAA,KAAY,GAEvC1L,GAAAid,aAAa,WAAWhX,KAAKigD,EAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,aAAAA;ACpC1C,cAAIrmD,KAAI;AAOR,UAAAG,GAAA,aAAA,MAAA;YAGEI,YACmBomD,IAAAA;AAAA,mBAAAA,UAAAA,IAHF,KAAAxb,SAAc,CAAA;YAK/B;YAEOrhC,QAAAA;AACLhJ,mBAAKqqC,OAAOppC,SAAS;YACvB;YAEO6kD,OAAO7+C,IAAAA;AACe,oBAAvBjH,KAAKqqC,OAAOppC,UAIhB/B,KAAIc,KAAK+lD,QAAQ/lD,KAAK6lD,QAAQ5+C,EAAAA,GAAQ,GAAGjH,KAAKqqC,OAAOppC,SAAS,CAAA,GAC9DjB,KAAKqqC,OAAOr/B,OAAO9L,IAAG,GAAG+H,EAAAA,KAJvBjH,KAAKqqC,OAAO9lC,KAAK0C,EAAAA;YAKrB;YAEO4kB,OAAO5kB,IAAAA;AACZ,kBAA2B,MAAvBjH,KAAKqqC,OAAOppC;AACd,uBAAA;AAEF,oBAAM2B,KAAM5C,KAAK6lD,QAAQ5+C,EAAAA;AACzB,kBAAA,WAAIrE;AACF,uBAAA;AAGF,kBADA1D,KAAIc,KAAK+lD,QAAQnjD,IAAK,GAAG5C,KAAKqqC,OAAOppC,SAAS,CAAA,GAAA,OAC1C/B;AACF,uBAAA;AAEF,kBAAIc,KAAK6lD,QAAQ7lD,KAAKqqC,OAAOnrC,EAAAA,CAAAA,MAAQ0D;AACnC,uBAAA;AAEF,iBAAA;AACE,oBAAI5C,KAAKqqC,OAAOnrC,EAAAA,MAAO+H;AAErB,yBADAjH,KAAKqqC,OAAOr/B,OAAO9L,IAAG,CAAA,GAAA;cACf,SAAA,EAEAA,KAAIc,KAAKqqC,OAAOppC,UAAUjB,KAAK6lD,QAAQ7lD,KAAKqqC,OAAOnrC,EAAAA,CAAAA,MAAQ0D;AACtE,qBAAA;YACF;YAEO,CAAA,eAAgBA,IAAAA;AACrB,kBAA2B,MAAvB5C,KAAKqqC,OAAOppC,WAGhB/B,KAAIc,KAAK+lD,QAAQnjD,IAAK,GAAG5C,KAAKqqC,OAAOppC,SAAS,CAAA,GAAA,EAC1C/B,KAAI,KAAKA,MAAKc,KAAKqqC,OAAOppC,WAG1BjB,KAAK6lD,QAAQ7lD,KAAKqqC,OAAOnrC,EAAAA,CAAAA,MAAQ0D;AAGrC,mBAAA;AAAA,wBACQ5C,KAAKqqC,OAAOnrC,EAAAA;gBAAAA,SAAAA,EACTA,KAAIc,KAAKqqC,OAAOppC,UAAUjB,KAAK6lD,QAAQ7lD,KAAKqqC,OAAOnrC,EAAAA,CAAAA,MAAQ0D;YACxE;YAEOojD,aAAapjD,IAAa+N,IAAAA;AAC/B,kBAA2B,MAAvB3Q,KAAKqqC,OAAOppC,WAGhB/B,KAAIc,KAAK+lD,QAAQnjD,IAAK,GAAG5C,KAAKqqC,OAAOppC,SAAS,CAAA,GAAA,EAC1C/B,KAAI,KAAKA,MAAKc,KAAKqqC,OAAOppC,WAG1BjB,KAAK6lD,QAAQ7lD,KAAKqqC,OAAOnrC,EAAAA,CAAAA,MAAQ0D;AAGrC,mBAAA;AACE+N,kBAAAA,GAAS3Q,KAAKqqC,OAAOnrC,EAAAA,CAAAA;gBAAAA,SAAAA,EACZA,KAAIc,KAAKqqC,OAAOppC,UAAUjB,KAAK6lD,QAAQ7lD,KAAKqqC,OAAOnrC,EAAAA,CAAAA,MAAQ0D;YACxE;YAEOqjD,SAAAA;AACL,qBAAOjmD,KAAKqqC,OAAO4b,OAAAA;YACrB;YAEQF,QAAQnjD,IAAagR,IAAaE,IAAAA;AACxC,kBAAIA,KAAMF;AACR,uBAAOA;AAET,kBAAIsyC,KAAMvyC,KAAKuW,OAAOtW,KAAME,MAAO,CAAA;AACnC,oBAAMqyC,IAASnmD,KAAK6lD,QAAQ7lD,KAAKqqC,OAAO6b,EAAAA,CAAAA;AACxC,kBAAIC,IAASvjD;AACX,uBAAO5C,KAAK+lD,QAAQnjD,IAAKgR,IAAKsyC,KAAM,CAAA;AAEtC,kBAAIC,IAASvjD;AACX,uBAAO5C,KAAK+lD,QAAQnjD,IAAKsjD,KAAM,GAAGpyC,EAAAA;AAIpC,qBAAOoyC,KAAM,KAAKlmD,KAAK6lD,QAAQ7lD,KAAKqqC,OAAO6b,KAAM,CAAA,CAAA,MAAQtjD;AACvDsjD,gBAAAA;AAEF,qBAAOA;YACT;UAAA;QAAA,GAAA,MAAA,CAAA9mD,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,oBAAAA,GAAA,gBAAAA,GAAA,oBAAA;AC3GF,gBAAAC,KAAAJ,GAAA,IAAA;AA2BA,gBAAeknD,EAAAA;YAAf,cAAA;AACU,mBAAAC,SAAmC,CAAA,GAEnC,KAAAC,KAAK;YAkEf;YA7DSC,QAAQC,IAAAA;AACbxmD,mBAAKqmD,OAAO9hD,KAAKiiD,EAAAA,GACjBxmD,KAAKymD,OAAAA;YACP;YAEOvlB,QAAAA;AACL,qBAAOlhC,KAAKsmD,KAAKtmD,KAAKqmD,OAAOplD;AACtBjB,qBAAKqmD,OAAOrmD,KAAKsmD,EAAAA,EAAAA,KACpBtmD,KAAKsmD;AAGTtmD,mBAAKgJ,MAAAA;YACP;YAEOA,QAAAA;AACDhJ,mBAAK0mD,kBACP1mD,KAAK2mD,gBAAgB3mD,KAAK0mD,aAAAA,GAC1B1mD,KAAK0mD,gBAAAA,SAEP1mD,KAAKsmD,KAAK,GACVtmD,KAAKqmD,OAAOplD,SAAS;YACvB;YAEQwlD,SAAAA;AACDzmD,mBAAK0mD,kBACR1mD,KAAK0mD,gBAAgB1mD,KAAK4mD,iBAAiB5mD,KAAK6mD,SAASvlD,KAAKtB,IAAAA,CAAAA;YAElE;YAEQ6mD,SAASC,IAAAA;AACf9mD,mBAAK0mD,gBAAAA;AACL,kBAAIK,KAAe,GACfC,KAAc,GACdC,KAAwBH,GAASI,cAAAA,GACjCC,KAAoB;AACxB,qBAAOnnD,KAAKsmD,KAAKtmD,KAAKqmD,OAAOplD,UAAQ;AAanC,oBAZA8lD,KAAevgC,KAAKC,IAAAA,GACfzmB,KAAKqmD,OAAOrmD,KAAKsmD,EAAAA,EAAAA,KACpBtmD,KAAKsmD,MAKPS,KAAepzC,KAAKG,IAAI,GAAG0S,KAAKC,IAAAA,IAAQsgC,EAAAA,GACxCC,KAAcrzC,KAAKG,IAAIizC,IAAcC,EAAAA,GAGrCG,KAAoBL,GAASI,cAAAA,GACX,MAAdF,KAAoBG;AAOtB,yBAJIF,KAAwBF,KAAAA,OAC1Br0C,QAAQC,KAAK,4CAA4CgB,KAAKsO,IAAItO,KAAKkV,MAAMo+B,KAAwBF,EAAAA,CAAAA,KAAAA,GAAAA,KAEvG/mD,KAAKymD,OAAAA;AAGPQ,gBAAAA,KAAwBE;cAAAA;AAE1BnnD,mBAAKgJ,MAAAA;YACP;UAAA;AAQF,gBAAao+C,UAA0BhB,EAAAA;YAC3BQ,iBAAiBj2C,IAAAA;AACzB,qBAAOvL,WAAW,MAAMuL,GAAS3Q,KAAKqnD,gBAAgB,EAAA,CAAA,CAAA;YACxD;YAEUV,gBAAgBjQ,IAAAA;AACxBpwB,2BAAaowB,EAAAA;YACf;YAEQ2Q,gBAAgBC,IAAAA;AACtB,oBAAMrlD,KAAMukB,KAAKC,IAAAA,IAAQ6gC;AACzB,qBAAO,EACLJ,eAAe,MAAMvzC,KAAKG,IAAI,GAAG7R,KAAMukB,KAAKC,IAAAA,CAAAA,EAAAA;YAEhD;UAAA;AAdF,UAAApnB,GAAA,oBAAA,GAoCaA,GAAAkoD,gBAAAA,CAAkBjoD,GAAA0tC,UAAU,yBAAyB9pC,SAnBlE,cAAoCkjD,EAAAA;YACxBQ,iBAAiBj2C,IAAAA;AACzB,qBAAO62C,oBAAoB72C,EAAAA;YAC7B;YAEUg2C,gBAAgBjQ,IAAAA;AACxB+Q,iCAAmB/Q,EAAAA;YACrB;UAAA,IAYkG0Q,GAMpG/nD,GAAA,oBAAA,MAAA;YAGEI,cAAAA;AACEO,mBAAK0nD,SAAS,IAAIroD,GAAAkoD;YACpB;YAEO5+C,IAAI69C,IAAAA;AACTxmD,mBAAK0nD,OAAO1+C,MAAAA,GACZhJ,KAAK0nD,OAAOnB,QAAQC,EAAAA;YACtB;YAEOtlB,QAAAA;AACLlhC,mBAAK0nD,OAAOxmB,MAAAA;YACd;UAAA;QAAA,GAAA,MAAA,CAAA9hC,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,gCAAA;AC/JF,gBAAAC,KAAAJ,GAAA,GAAA;AAGA,UAAAG,GAAA,gCAAA,SAA8CsyB,IAAAA;AAW5C,kBAAM/gB,KAAO+gB,GAAc/tB,OAAOC,MAAMgF,IAAI8oB,GAAc/tB,OAAOiW,QAAQ8X,GAAc/tB,OAAOmI,IAAI,CAAA,GAC5F47C,KAAW/2C,QAAAA,KAAAA,SAAAA,GAAM/H,IAAI8oB,GAAcjkB,OAAO,CAAA,GAE1C+tC,IAAW9pB,GAAc/tB,OAAOC,MAAMgF,IAAI8oB,GAAc/tB,OAAOiW,QAAQ8X,GAAc/tB,OAAOmI,CAAAA;AAC9F0vC,iBAAYkM,OACdlM,EAASvpB,YAAay1B,GAASroD,GAAAsoD,oBAAAA,MAA0BtoD,GAAA04B,kBAAkB2vB,GAASroD,GAAAsoD,oBAAAA,MAA0BtoD,GAAAuoD;UAElH;QAAA,GAAA,MAAA,CAAAzoD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,gBAAAA,GAAA,gBAAA;AClBA,gBAAa85B,GAAAA;YAAb,cAAA;AAsBS,mBAAAzwB,KAAK,GACL,KAAAD,KAAK,GACL,KAAAgJ,WAA2B,IAAIq2C;YA+FxC;YAtHS/oB,OAAAA,WAAkB93B,IAAAA;AACvB,qBAAO,CACLA,OAAU,KAAuB,KACjCA,OAAU,IAAyB,KAC3B,MAARA,EAAAA;YAEJ;YAEO83B,OAAAA,aAAoB93B,IAAAA;AACzB,sBAAmB,MAAXA,GAAM,CAAA,MAAa,MAAmC,MAAXA,GAAM,CAAA,MAAa,IAAoC,MAAXA,GAAM,CAAA;YACvG;YAEOqkC,QAAAA;AACL,oBAAMyc,KAAS,IAAI5uB;AAInB,qBAHA4uB,GAAOr/C,KAAK1I,KAAK0I,IACjBq/C,GAAOt/C,KAAKzI,KAAKyI,IACjBs/C,GAAOt2C,WAAWzR,KAAKyR,SAAS65B,MAAAA,GACzByc;YACT;YAQOjuB,YAAAA;AAA4B,qBAAiB,WAAV95B,KAAK0I;YAAsB;YAC9D8vB,SAAAA;AAA4B,qBAAiB,YAAVx4B,KAAK0I;YAAmB;YAC3DowB,cAAAA;AACL,qBAAI94B,KAAKwR,iBAAAA,KAAuD,MAAjCxR,KAAKyR,SAASsnB,iBACpC,IAEQ,YAAV/4B,KAAK0I;YACd;YACOs/C,UAAAA;AAA4B,qBAAiB,YAAVhoD,KAAK0I;YAAoB;YAC5DiwB,cAAAA;AAA4B,qBAAiB,aAAV34B,KAAK0I;YAAwB;YAChE+vB,WAAAA;AAA4B,qBAAiB,WAAVz4B,KAAKyI;YAAqB;YAC7DiwB,QAAAA;AAA4B,qBAAiB,YAAV14B,KAAKyI;YAAkB;YAC1D8wB,kBAAAA;AAA4B,qBAAiB,aAAVv5B,KAAK0I;YAA4B;YACpEo8C,cAAAA;AAA4B,qBAAiB,YAAV9kD,KAAKyI;YAAwB;YAGhEixB,iBAAAA;AAA2B,qBAAiB,WAAV15B,KAAK0I;YAAyB;YAChEmxB,iBAAAA;AAA2B,qBAAiB,WAAV75B,KAAKyI;YAAyB;YAChEw/C,UAAAA;AAA2B,qBAA0C,aAAxB,WAAVjoD,KAAK0I;YAAgD;YACxFw/C,UAAAA;AAA2B,qBAA0C,aAAxB,WAAVloD,KAAKyI;YAAgD;YACxF0/C,cAAAA;AAA2B,qBAA0C,aAAxB,WAAVnoD,KAAK0I,OAAqF,aAAxB,WAAV1I,KAAK0I;YAAiD;YACjJ0/C,cAAAA;AAA2B,qBAA0C,aAAxB,WAAVpoD,KAAKyI,OAAqF,aAAxB,WAAVzI,KAAKyI;YAAiD;YACjJ4/C,cAAAA;AAA2B,qBAA0C,MAAxB,WAAVroD,KAAK0I;YAAgC;YACxE4/C,cAAAA;AAA2B,qBAA0C,MAAxB,WAAVtoD,KAAKyI;YAAgC;YACxE8/C,qBAAAA;AAAgC,qBAAmB,MAAZvoD,KAAK0I,MAAwB,MAAZ1I,KAAKyI;YAAU;YAGvE+wB,aAAAA;AACL,sBAAkB,WAAVx5B,KAAK0I,IAAAA;gBACX,KAAK;gBACL,KAAK;AAAqB,yBAAiB,MAAV1I,KAAK0I;gBACtC,KAAK;AAAqB,yBAAiB,WAAV1I,KAAK0I;gBACtC;AAA0B,yBAAA;cAAQ;YAEtC;YACOixB,aAAAA;AACL,sBAAkB,WAAV35B,KAAKyI,IAAAA;gBACX,KAAK;gBACL,KAAK;AAAqB,yBAAiB,MAAVzI,KAAKyI;gBACtC,KAAK;AAAqB,yBAAiB,WAAVzI,KAAKyI;gBACtC;AAA0B,yBAAA;cAAQ;YAEtC;YAGO+I,mBAAAA;AACL,qBAAiB,YAAVxR,KAAKyI;YACd;YACOw6C,iBAAAA;AACDjjD,mBAAKyR,SAAS+2C,QAAAA,IAChBxoD,KAAKyI,MAAAA,aAELzI,KAAKyI,MAAM;YAEf;YACO2wB,oBAAAA;AACL,kBAAe,YAAVp5B,KAAKyI,MAAAA,CAA+BzI,KAAKyR,SAASsxC;AACrD,wBAAuC,WAA/B/iD,KAAKyR,SAASsxC,gBAAAA;kBACpB,KAAK;kBACL,KAAK;AAAqB,2BAAsC,MAA/B/iD,KAAKyR,SAASsxC;kBAC/C,KAAK;AAAqB,2BAAsC,WAA/B/iD,KAAKyR,SAASsxC;kBAC/C;AAA0B,2BAAO/iD,KAAKw5B,WAAAA;gBAAAA;AAG1C,qBAAOx5B,KAAKw5B,WAAAA;YACd;YACOivB,wBAAAA;AACL,qBAAkB,YAAVzoD,KAAKyI,MAAAA,CAA+BzI,KAAKyR,SAASsxC,iBACvB,WAA/B/iD,KAAKyR,SAASsxC,iBACd/iD,KAAK05B,eAAAA;YACX;YACOT,sBAAAA;AACL,qBAAkB,YAAVj5B,KAAKyI,MAAAA,CAA+BzI,KAAKyR,SAASsxC,iBACE,aAAxB,WAA/B/iD,KAAKyR,SAASsxC,kBACf/iD,KAAKioD,QAAAA;YACX;YACOS,0BAAAA;AACL,qBAAkB,YAAV1oD,KAAKyI,MAAAA,CAA+BzI,KAAKyR,SAASsxC,iBACE,aAAxB,WAA/B/iD,KAAKyR,SAASsxC,mBAC8C,aAAxB,WAA/B/iD,KAAKyR,SAASsxC,kBACpB/iD,KAAKmoD,YAAAA;YACX;YACOnvB,0BAAAA;AACL,qBAAkB,YAAVh5B,KAAKyI,MAAAA,CAA+BzI,KAAKyR,SAASsxC,iBACE,MAAxB,WAA/B/iD,KAAKyR,SAASsxC,kBACf/iD,KAAKqoD,YAAAA;YACX;YACOM,oBAAAA;AACL,qBAAiB,YAAV3oD,KAAK0I,KACG,YAAV1I,KAAKyI,KAA4BzI,KAAKyR,SAASsnB,iBAAiB,IACjE;YACN;UAAA;AAtHF,UAAA15B,GAAA,gBAAAH;AA8HA,gBAAa4oD,GAAAA;YAyCXroD,YACEmpD,KAAc,GACdl3C,KAAgB,GAAA;AA1CV,mBAAAm3C,OAAe,GAgCf,KAAAC,SAAiB,GAYvB9oD,KAAK6oD,OAAOD,IACZ5oD,KAAK8oD,SAASp3C;YAChB;YA7CWk3C,IAAAA,MAAAA;AACT,qBAAI5oD,KAAK8oD,SAAAA,aAEJ9oD,KAAK6oD,OACL7oD,KAAK+4B,kBAAkB,KAGrB/4B,KAAK6oD;YACd;YACWD,IAAAA,IAAI3hD,IAAAA;AAAiBjH,mBAAK6oD,OAAO5hD;YAAO;YAExC8xB,IAAAA,iBAAAA;AAET,qBAAI/4B,KAAK8oD,SACA,KAEW,YAAZ9oD,KAAK6oD,SAAoC;YACnD;YACW9vB,IAAAA,eAAe9xB,IAAAA;AACxBjH,mBAAK6oD,QAAAA,YACL7oD,KAAK6oD,QAAS5hD,MAAS,KAAM;YAC/B;YAEW87C,IAAAA,iBAAAA;AACT,qBAAmB,WAAZ/iD,KAAK6oD;YACd;YACW9F,IAAAA,eAAe97C,IAAAA;AACxBjH,mBAAK6oD,QAAAA,WACL7oD,KAAK6oD,QAAgB,WAAR5hD;YACf;YAGWyK,IAAAA,QAAAA;AACT,qBAAO1R,KAAK8oD;YACd;YACWp3C,IAAAA,MAAMzK,IAAAA;AACfjH,mBAAK8oD,SAAS7hD;YAChB;YAUOqkC,QAAAA;AACL,qBAAO,IAAIwc,GAAc9nD,KAAK6oD,MAAM7oD,KAAK8oD,MAAAA;YAC3C;YAMON,UAAAA;AACL,qBAA+B,MAAxBxoD,KAAK+4B,kBAA0D,MAAhB/4B,KAAK8oD;YAC7D;UAAA;AA3DF,UAAAzpD,GAAA,gBAAAC;QAAA,GAAA,MAAA,CAAAF,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,uBAAAA,GAAA,SAAAA,GAAA,kBAAA;ACjIA,gBAAAC,KAAAJ,GAAA,IAAA,GAGA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAEa,UAAAG,GAAA0pD,kBAAkB,YAS/B1pD,GAAA,SAAA,MAAA;YAoBEI,YACUupD,IACAv4C,IACA5G,IAAAA;AAFA,mBAAAm/C,iBAAAA,IACA,KAAAv4C,kBAAAA,IACA,KAAA5G,iBAAAA,IArBH,KAAAjE,QAAgB,GAChB,KAAAiU,QAAgB,GAChB,KAAA9N,IAAY,GACZ,KAAAD,IAAY,GAGZ,KAAAw0C,OAAkD,CAAC,GACnD,KAAA+C,SAAiB,GACjB,KAAAD,SAAiB,GACjB,KAAAE,mBAAmB,EAAA99B,kBAAkB8lB,MAAAA,GACrC,KAAAiY,eAAqC,EAAAjC,iBACrC,KAAAt+B,UAAoB,CAAA,GACnB,KAAAimC,YAAuB,EAAAj4C,SAASk4C,aAAa,CAAC,GAAG,EAAAC,gBAAgB,EAAA3J,iBAAiB,EAAAxnB,cAAAA,CAAAA,GAClF,KAAAoxB,kBAA6B,EAAAp4C,SAASk4C,aAAa,CAAC,GAAG,EAAAtwB,sBAAsB,EAAAywB,uBAAuB,EAAAxB,oBAAAA,CAAAA,GAGpG,KAAAyB,cAAAA,OA6NA,KAAAC,sBAAsB,IAAI,EAAAhC,iBAC1B,KAAAiC,yBAAyB,GAvN/BxpD,KAAKypD,QAAQzpD,KAAK6J,eAAe6D,MACjC1N,KAAK0pD,QAAQ1pD,KAAK6J,eAAenJ,MACjCV,KAAK6D,QAAQ,IAAIvE,GAAAwqC,aAA0B9pC,KAAK2pD,wBAAwB3pD,KAAK0pD,KAAAA,CAAAA,GAC7E1pD,KAAK8oB,YAAY,GACjB9oB,KAAKswC,eAAetwC,KAAK0pD,QAAQ,GACjC1pD,KAAK4pD,cAAAA;YACP;YAEOrK,YAAYiD,IAAAA;AAUjB,qBATIA,MACFxiD,KAAKipD,UAAUvgD,KAAK85C,GAAK95C,IACzB1I,KAAKipD,UAAUxgD,KAAK+5C,GAAK/5C,IACzBzI,KAAKipD,UAAUx3C,WAAW+wC,GAAK/wC,aAE/BzR,KAAKipD,UAAUvgD,KAAK,GACpB1I,KAAKipD,UAAUxgD,KAAK,GACpBzI,KAAKipD,UAAUx3C,WAAW,IAAI,EAAAq2C,kBAEzB9nD,KAAKipD;YACd;YAEOY,kBAAkBrH,IAAAA;AAUvB,qBATIA,MACFxiD,KAAKopD,gBAAgB1gD,KAAK85C,GAAK95C,IAC/B1I,KAAKopD,gBAAgB3gD,KAAK+5C,GAAK/5C,IAC/BzI,KAAKopD,gBAAgB33C,WAAW+wC,GAAK/wC,aAErCzR,KAAKopD,gBAAgB1gD,KAAK,GAC1B1I,KAAKopD,gBAAgB3gD,KAAK,GAC1BzI,KAAKopD,gBAAgB33C,WAAW,IAAI,EAAAq2C,kBAE/B9nD,KAAKopD;YACd;YAEO7jC,aAAai9B,IAAsBtwB,IAAAA;AACxC,qBAAO,IAAI,EAAA43B,WAAW9pD,KAAK6J,eAAe6D,MAAM1N,KAAKu/C,YAAYiD,EAAAA,GAAOtwB,EAAAA;YAC1E;YAEWrQ,IAAAA,gBAAAA;AACT,qBAAO7hB,KAAKgpD,kBAAkBhpD,KAAK6D,MAAM4mC,YAAYzqC,KAAK0pD;YAC5D;YAEWjwC,IAAAA,qBAAAA;AACT,oBACMswC,KADY/pD,KAAK6Z,QAAQ7Z,KAAK+L,IACN/L,KAAK4F;AACnC,qBAAQmkD,MAAa,KAAKA,KAAY/pD,KAAK0pD;YAC7C;YAOQC,wBAAwBjpD,IAAAA;AAC9B,kBAAA,CAAKV,KAAKgpD;AACR,uBAAOtoD;AAGT,oBAAMspD,KAAsBtpD,KAAOV,KAAKyQ,gBAAgBM,WAAWk5C;AAEnE,qBAAOD,KAAsB3qD,GAAA0pD,kBAAkB1pD,GAAA0pD,kBAAkBiB;YACnE;YAKOE,iBAAiBC,IAAAA;AACtB,kBAA0B,MAAtBnqD,KAAK6D,MAAM5C,QAAc;AAAA,2BACvBkpD,OACFA,KAAW,EAAA3kC;AAEb,oBAAItmB,KAAIc,KAAK0pD;AACb,uBAAOxqD;AACLc,uBAAK6D,MAAMU,KAAKvE,KAAKulB,aAAa4kC,EAAAA,CAAAA;cAAAA;YAGxC;YAKOnhD,QAAAA;AACLhJ,mBAAK4F,QAAQ,GACb5F,KAAK6Z,QAAQ,GACb7Z,KAAK+L,IAAI,GACT/L,KAAK8L,IAAI,GACT9L,KAAK6D,QAAQ,IAAIvE,GAAAwqC,aAA0B9pC,KAAK2pD,wBAAwB3pD,KAAK0pD,KAAAA,CAAAA,GAC7E1pD,KAAK8oB,YAAY,GACjB9oB,KAAKswC,eAAetwC,KAAK0pD,QAAQ,GACjC1pD,KAAK4pD,cAAAA;YACP;YAOOvsC,OAAO+sC,IAAiBC,IAAAA;AAE7B,oBAAMC,KAAWtqD,KAAKu/C,YAAY,EAAA/5B,iBAAAA;AAGlC,kBAAI+kC,KAAmB;AAIvB,oBAAM7f,KAAe1qC,KAAK2pD,wBAAwBU,EAAAA;AAOlD,kBANI3f,KAAe1qC,KAAK6D,MAAM4mC,cAC5BzqC,KAAK6D,MAAM4mC,YAAYC,KAKrB1qC,KAAK6D,MAAM5C,SAAS,GAAG;AAEzB,oBAAIjB,KAAKypD,QAAQW;AACf,2BAASlrD,KAAI,GAAGA,KAAIc,KAAK6D,MAAM5C,QAAQ/B;AAErCqrD,oBAAAA,MAAAA,CAAqBvqD,KAAK6D,MAAMgF,IAAI3J,EAAAA,EAAIme,OAAO+sC,IAASE,EAAAA;AAK5D,oBAAIE,KAAS;AACb,oBAAIxqD,KAAK0pD,QAAQW;AACf,2BAASt+C,KAAI/L,KAAK0pD,OAAO39C,KAAIs+C,IAASt+C;AAChC/L,yBAAK6D,MAAM5C,SAASopD,KAAUrqD,KAAK6Z,UACjC7Z,KAAKyQ,gBAAgBM,WAAW+gC,cAGlC9xC,KAAK6D,MAAMU,KAAK,IAAI,EAAAulD,WAAWM,IAASE,EAAAA,CAAAA,IAEpCtqD,KAAK6Z,QAAQ,KAAK7Z,KAAK6D,MAAM5C,UAAUjB,KAAK6Z,QAAQ7Z,KAAK+L,IAAIy+C,KAAS,KAGxExqD,KAAK6Z,SACL2wC,MACIxqD,KAAK4F,QAAQ,KAEf5F,KAAK4F,WAKP5F,KAAK6D,MAAMU,KAAK,IAAI,EAAAulD,WAAWM,IAASE,EAAAA,CAAAA;;AAMhD,2BAASv+C,KAAI/L,KAAK0pD,OAAO39C,KAAIs+C,IAASt+C;AAChC/L,yBAAK6D,MAAM5C,SAASopD,KAAUrqD,KAAK6Z,UACjC7Z,KAAK6D,MAAM5C,SAASjB,KAAK6Z,QAAQ7Z,KAAK+L,IAAI,IAE5C/L,KAAK6D,MAAMI,IAAAA,KAGXjE,KAAK6Z,SACL7Z,KAAK4F;AAQb,oBAAI8kC,KAAe1qC,KAAK6D,MAAM4mC,WAAW;AAEvC,wBAAMggB,KAAezqD,KAAK6D,MAAM5C,SAASypC;AACrC+f,kBAAAA,KAAe,MACjBzqD,KAAK6D,MAAMsnC,UAAUsf,EAAAA,GACrBzqD,KAAK6Z,QAAQlG,KAAKG,IAAI9T,KAAK6Z,QAAQ4wC,IAAc,CAAA,GACjDzqD,KAAK4F,QAAQ+N,KAAKG,IAAI9T,KAAK4F,QAAQ6kD,IAAc,CAAA,GACjDzqD,KAAKqjD,SAAS1vC,KAAKG,IAAI9T,KAAKqjD,SAASoH,IAAc,CAAA,IAErDzqD,KAAK6D,MAAM4mC,YAAYC;gBAAAA;AAIzB1qC,qBAAK8L,IAAI6H,KAAKC,IAAI5T,KAAK8L,GAAGs+C,KAAU,CAAA,GACpCpqD,KAAK+L,IAAI4H,KAAKC,IAAI5T,KAAK+L,GAAGs+C,KAAU,CAAA,GAChCG,OACFxqD,KAAK+L,KAAKy+C,KAEZxqD,KAAKojD,SAASzvC,KAAKC,IAAI5T,KAAKojD,QAAQgH,KAAU,CAAA,GAE9CpqD,KAAK8oB,YAAY;cAAA;AAKnB,kBAFA9oB,KAAKswC,eAAe+Z,KAAU,GAE1BrqD,KAAK0qD,qBACP1qD,KAAK2qD,QAAQP,IAASC,EAAAA,GAGlBrqD,KAAKypD,QAAQW;AACf,yBAASlrD,KAAI,GAAGA,KAAIc,KAAK6D,MAAM5C,QAAQ/B;AAErCqrD,kBAAAA,MAAAA,CAAqBvqD,KAAK6D,MAAMgF,IAAI3J,EAAAA,EAAIme,OAAO+sC,IAASE,EAAAA;AAK9DtqD,mBAAKypD,QAAQW,IACbpqD,KAAK0pD,QAAQW,IAEbrqD,KAAKupD,oBAAoBvgD,MAAAA,GAErBuhD,KAAmB,MAAMvqD,KAAK6D,MAAM5C,WACtCjB,KAAKwpD,yBAAyB,GAC9BxpD,KAAKupD,oBAAoBhD,QAAQ,MAAMvmD,KAAK4qD,sBAAAA,CAAAA;YAEhD;YAKQA,wBAAAA;AACN,kBAAIC,KAAAA;AACA7qD,mBAAKwpD,0BAA0BxpD,KAAK6D,MAAM5C,WAG5CjB,KAAKwpD,yBAAyB,GAC9BqB,KAAAA;AAEF,kBAAIC,KAAU;AACd,qBAAO9qD,KAAKwpD,yBAAyBxpD,KAAK6D,MAAM5C;AAG9C,oBAFA6pD,MAAW9qD,KAAK6D,MAAMgF,IAAI7I,KAAKwpD,wBAAAA,EAA2BuB,cAAAA,GAEtDD,KAAU;AACZ,yBAAA;AAMJ,qBAAOD;YACT;YAEYH,IAAAA,mBAAAA;AACV,qBAAO1qD,KAAKgpD,kBAAAA,CAAmBhpD,KAAKyQ,gBAAgBM,WAAW+gC;YACjE;YAEQ6Y,QAAQP,IAAiBC,IAAAA;AAC3BrqD,mBAAKypD,UAAUW,OAKfA,KAAUpqD,KAAKypD,QACjBzpD,KAAKgrD,cAAcZ,IAASC,EAAAA,IAE5BrqD,KAAKirD,eAAeb,IAASC,EAAAA;YAEjC;YAEQW,cAAcZ,IAAiBC,IAAAA;AACrC,oBAAMa,MAAqB,GAAA,EAAAC,8BAA6BnrD,KAAK6D,OAAO7D,KAAKypD,OAAOW,IAASpqD,KAAK6Z,QAAQ7Z,KAAK+L,GAAG/L,KAAKu/C,YAAY,EAAA/5B,iBAAAA,CAAAA;AAC/H,kBAAI0lC,GAASjqD,SAAS,GAAG;AACvB,sBAAMmqD,MAAkB,GAAA,EAAAC,6BAA4BrrD,KAAK6D,OAAOqnD,EAAAA;AAAAA,iBAChE,GAAA,EAAAI,4BAA2BtrD,KAAK6D,OAAOunD,GAAgBG,MAAAA,GACvDvrD,KAAKwrD,4BAA4BpB,IAASC,IAASe,GAAgBK,YAAAA;cAAAA;YAEvE;YAEQD,4BAA4BpB,IAAiBC,IAAiBoB,IAAAA;AACpE,oBAAMnB,KAAWtqD,KAAKu/C,YAAY,EAAA/5B,iBAAAA;AAElC,kBAAIkmC,KAAsBD;AAC1B,qBAAOC,OAAwB;AACV,sBAAf1rD,KAAK6Z,SACH7Z,KAAK+L,IAAI,KACX/L,KAAK+L,KAEH/L,KAAK6D,MAAM5C,SAASopD,MAEtBrqD,KAAK6D,MAAMU,KAAK,IAAI,EAAAulD,WAAWM,IAASE,EAAAA,CAAAA,MAGtCtqD,KAAK4F,UAAU5F,KAAK6Z,SACtB7Z,KAAK4F,SAEP5F,KAAK6Z;AAGT7Z,mBAAKqjD,SAAS1vC,KAAKG,IAAI9T,KAAKqjD,SAASoI,IAAc,CAAA;YACrD;YAEQR,eAAeb,IAAiBC,IAAAA;AACtC,oBAAMC,KAAWtqD,KAAKu/C,YAAY,EAAA/5B,iBAAAA,GAG5BmmC,KAAW,CAAA;AACjB,kBAAIC,KAAgB;AAEpB,uBAAS7/C,KAAI/L,KAAK6D,MAAM5C,SAAS,GAAG8K,MAAK,GAAGA,MAAK;AAE/C,oBAAI0vC,KAAWz7C,KAAK6D,MAAMgF,IAAIkD,EAAAA;AAC9B,oBAAA,CAAK0vC,MAAAA,CAAaA,GAASvpB,aAAaupB,GAASvqC,iBAAAA,KAAsBk5C;AACrE;AAIF,sBAAMyB,KAA6B,CAACpQ,EAAAA;AACpC,uBAAOA,GAASvpB,aAAanmB,KAAI;AAC/B0vC,kBAAAA,KAAWz7C,KAAK6D,MAAMgF,IAAAA,EAAMkD,EAAAA,GAC5B8/C,GAAavnD,QAAQm3C,EAAAA;AAKvB,sBAAMqQ,KAAY9rD,KAAK6Z,QAAQ7Z,KAAK+L;AACpC,oBAAI+/C,MAAa//C,MAAK+/C,KAAY//C,KAAI8/C,GAAa5qD;AACjD;AAGF,sBAAM8qD,KAAiBF,GAAaA,GAAa5qD,SAAS,CAAA,EAAGiQ,iBAAAA,GACvD86C,MAAkB,GAAA,EAAAC,gCAA+BJ,IAAc7rD,KAAKypD,OAAOW,EAAAA,GAC3E8B,IAAaF,GAAgB/qD,SAAS4qD,GAAa5qD;AACzD,oBAAIkrD;AAGFA,oBAFiB,MAAfnsD,KAAK6Z,SAAe7Z,KAAK+L,MAAM/L,KAAK6D,MAAM5C,SAAS,IAEtC0S,KAAKG,IAAI,GAAG9T,KAAK+L,IAAI/L,KAAK6D,MAAM4mC,YAAYyhB,CAAAA,IAE5Cv4C,KAAKG,IAAI,GAAG9T,KAAK6D,MAAM5C,SAASjB,KAAK6D,MAAM4mC,YAAYyhB,CAAAA;AAIxE,sBAAME,IAAyB,CAAA;AAC/B,yBAASltD,KAAI,GAAGA,KAAIgtD,GAAYhtD,MAAK;AACnC,wBAAMmtD,KAAUrsD,KAAKulB,aAAa,EAAAC,mBAAAA,IAAmB;AACrD4mC,oBAAS7nD,KAAK8nD,EAAAA;gBAAAA;AAEZD,kBAASnrD,SAAS,MACpB0qD,GAASpnD,KAAK,EAGZvC,OAAO+J,KAAI8/C,GAAa5qD,SAAS2qD,IACjCQ,UAAAA,EAAAA,CAAAA,GAEFR,MAAiBQ,EAASnrD,SAE5B4qD,GAAatnD,KAAAA,GAAQ6nD,CAAAA;AAGrB,oBAAIE,IAAgBN,GAAgB/qD,SAAS,GACzCsrD,IAAUP,GAAgBM,CAAAA;AACd,sBAAZC,MACFD,KACAC,IAAUP,GAAgBM,CAAAA;AAE5B,oBAAIE,IAAeX,GAAa5qD,SAASirD,IAAa,GAClDO,IAASV;AACb,uBAAOS,KAAgB,KAAG;AACxB,wBAAME,KAAc/4C,KAAKC,IAAI64C,GAAQF,CAAAA;AACrC,sBAAA,WAAIV,GAAaS,CAAAA;AAGf;AASF,sBAPAT,GAAaS,CAAAA,EAAeK,cAAcd,GAAaW,CAAAA,GAAeC,IAASC,IAAaH,IAAUG,IAAaA,IAAAA,IAAa,GAChIH,KAAWG,IACK,MAAZH,MACFD,KACAC,IAAUP,GAAgBM,CAAAA,IAE5BG,KAAUC,IACK,MAAXD,GAAc;AAChBD;AACA,0BAAMI,KAAoBj5C,KAAKG,IAAI04C,GAAc,CAAA;AACjDC,yBAAS,GAAA,EAAAI,6BAA4BhB,IAAce,IAAmB5sD,KAAKypD,KAAAA;kBAAAA;gBAAAA;AAK/E,yBAASvqD,KAAI,GAAGA,KAAI2sD,GAAa5qD,QAAQ/B;AACnC8sD,kBAAAA,GAAgB9sD,EAAAA,IAAKkrD,MACvByB,GAAa3sD,EAAAA,EAAG4tD,QAAQd,GAAgB9sD,EAAAA,GAAIorD,EAAAA;AAKhD,oBAAIoB,IAAsBQ,IAAaC;AACvC,uBAAOT,MAAwB;AACV,wBAAf1rD,KAAK6Z,QACH7Z,KAAK+L,IAAIs+C,KAAU,KACrBrqD,KAAK+L,KACL/L,KAAK6D,MAAMI,IAAAA,MAEXjE,KAAK6Z,SACL7Z,KAAK4F,WAIH5F,KAAK6Z,QAAQlG,KAAKC,IAAI5T,KAAK6D,MAAM4mC,WAAWzqC,KAAK6D,MAAM5C,SAAS2qD,EAAAA,IAAiBvB,OAC/ErqD,KAAK6Z,UAAU7Z,KAAK4F,SACtB5F,KAAK4F,SAEP5F,KAAK6Z;AAIX7Z,qBAAKqjD,SAAS1vC,KAAKC,IAAI5T,KAAKqjD,SAAS6I,GAAYlsD,KAAK6Z,QAAQwwC,KAAU,CAAA;cAAA;AAM1E,kBAAIsB,GAAS1qD,SAAS,GAAG;AAGvB,sBAAM8rD,KAA+B,CAAA,GAG/BC,KAA8B,CAAA;AACpC,yBAAS9tD,KAAI,GAAGA,KAAIc,KAAK6D,MAAM5C,QAAQ/B;AACrC8tD,kBAAAA,GAAczoD,KAAKvE,KAAK6D,MAAMgF,IAAI3J,EAAAA,CAAAA;AAEpC,sBAAM+tD,KAAsBjtD,KAAK6D,MAAM5C;AAEvC,oBAAIisD,KAAoBD,KAAsB,GAC1CE,KAAoB,GACpBC,KAAezB,GAASwB,EAAAA;AAC5BntD,qBAAK6D,MAAM5C,SAAS0S,KAAKC,IAAI5T,KAAK6D,MAAM4mC,WAAWzqC,KAAK6D,MAAM5C,SAAS2qD,EAAAA;AACvE,oBAAIyB,KAAqB;AACzB,yBAASnuD,KAAIyU,KAAKC,IAAI5T,KAAK6D,MAAM4mC,YAAY,GAAGwiB,KAAsBrB,KAAgB,CAAA,GAAI1sD,MAAK,GAAGA;AAChG,sBAAIkuD,MAAgBA,GAAaprD,QAAQkrD,KAAoBG,IAAoB;AAE/E,6BAASC,KAAQF,GAAahB,SAASnrD,SAAS,GAAGqsD,MAAS,GAAGA;AAC7DttD,2BAAK6D,MAAM8E,IAAIzJ,MAAKkuD,GAAahB,SAASkB,EAAAA,CAAAA;AAE5CpuD,oBAAAA,MAGA6tD,GAAaxoD,KAAK,EAChBqJ,OAAOs/C,KAAoB,GAC3BnvC,QAAQqvC,GAAahB,SAASnrD,OAAAA,CAAAA,GAGhCosD,MAAsBD,GAAahB,SAASnrD,QAC5CmsD,KAAezB,GAAAA,EAAWwB,EAAAA;kBAAAA;AAE1BntD,yBAAK6D,MAAM8E,IAAIzJ,IAAG8tD,GAAcE,IAAAA,CAAAA;AAKpC,oBAAIK,KAAqB;AACzB,yBAASruD,KAAI6tD,GAAa9rD,SAAS,GAAG/B,MAAK,GAAGA;AAC5C6tD,kBAAAA,GAAa7tD,EAAAA,EAAG0O,SAAS2/C,IACzBvtD,KAAK6D,MAAMqmC,gBAAgBx6B,KAAKq9C,GAAa7tD,EAAAA,CAAAA,GAC7CquD,MAAsBR,GAAa7tD,EAAAA,EAAG6e;AAExC,sBAAM0sC,KAAe92C,KAAKG,IAAI,GAAGm5C,KAAsBrB,KAAgB5rD,KAAK6D,MAAM4mC,SAAAA;AAC9EggB,gBAAAA,KAAe,KACjBzqD,KAAK6D,MAAMumC,cAAc16B,KAAK+6C,EAAAA;cAAAA;YAGpC;YAiBO+C,yBAAyBC,IAAmBC,IAAqBC,KAAAA,OAAqB;AAC3F,qBAAOD,MAAa;AAClB,sBAAM98C,KAAO5Q,KAAK6D,MAAMgF,IAAI4kD,EAAAA;AAC5B,oBAAA,CAAK78C;AACH,yBAAO,CAAA,IAAE,EAAI;AAEf,sBAAM3P,KAAS/B,KAAc0R,GAAKM,iBAAAA,IAAqBN,GAAK3P;AAC5D,yBAAS/B,KAAI,GAAGA,KAAI+B,IAAAA,EAAU/B;AAM5B,sBALI0R,GAAK/H,IAAI3J,EAAAA,EAAG,EAAA0uD,qBAAAA,MAGdF,MAAe98C,GAAK/H,IAAI3J,EAAAA,EAAG,EAAA2uD,oBAAAA,EAAsB5sD,UAAU,IAEzDysD,KAAc;AAChB,2BAAO,CAACD,IAAWvuD,EAAAA;AAGvBuuD,gBAAAA;cAAAA;AAEF,qBAAO,CAACA,IAAW,CAAA;YACrB;YAYO9nD,4BAA4B8nD,IAAmBE,IAAoBr7B,KAAmB,GAAGC,IAAAA;AAC9F,oBAAM3hB,KAAO5Q,KAAK6D,MAAMgF,IAAI4kD,EAAAA;AAC5B,qBAAK78C,KAGEA,GAAKynB,kBAAkBs1B,IAAWr7B,IAAUC,EAAAA,IAF1C;YAGX;YAEOiU,uBAAuBz6B,IAAAA;AAC5B,kBAAI06B,KAAQ16B,IACR26B,KAAO36B;AAEX,qBAAO06B,KAAQ,KAAKzmC,KAAK6D,MAAMgF,IAAI49B,EAAAA,EAAQvU;AACzCuU,gBAAAA;AAGF,qBAAOC,KAAO,IAAI1mC,KAAK6D,MAAM5C,UAAUjB,KAAK6D,MAAMgF,IAAI69B,KAAO,CAAA,EAAIxU;AAC/DwU,gBAAAA;AAEF,qBAAO,EAAED,OAAAA,IAAOC,MAAAA,GAAAA;YAClB;YAMOkjB,cAAc1qD,IAAAA;AAUnB,mBATIA,QAAAA,KACGc,KAAKsgD,KAAKphD,EAAAA,MACbA,KAAIc,KAAKugD,SAASrhD,EAAAA,MAGpBc,KAAKsgD,OAAO,CAAC,GACbphD,KAAI,IAGCA,KAAIc,KAAKypD,OAAOvqD,MAAKc,KAAKyQ,gBAAgBM,WAAW+8C;AAC1D9tD,qBAAKsgD,KAAKphD,EAAAA,IAAAA;YAEd;YAMOqhD,SAASz0C,IAAAA;AAId,mBAHIA,QAAAA,OACFA,KAAI9L,KAAK8L,IAAAA,CAEH9L,KAAKsgD,KAAAA,EAAOx0C,EAAAA,KAAMA,KAAI;AAAA;AAC9B,qBAAOA,MAAK9L,KAAKypD,QAAQzpD,KAAKypD,QAAQ,IAAI39C,KAAI,IAAI,IAAIA;YACxD;YAMOi0C,SAASj0C,IAAAA;AAId,mBAHIA,QAAAA,OACFA,KAAI9L,KAAK8L,IAAAA,CAEH9L,KAAKsgD,KAAAA,EAAOx0C,EAAAA,KAAMA,KAAI9L,KAAKypD;AAAAA;AACnC,qBAAO39C,MAAK9L,KAAKypD,QAAQzpD,KAAKypD,QAAQ,IAAI39C,KAAI,IAAI,IAAIA;YACxD;YAMO+0C,aAAa90C,IAAAA;AAClB/L,mBAAKspD,cAAAA;AACL,uBAASpqD,KAAI,GAAGA,KAAIc,KAAKgjB,QAAQ/hB,QAAQ/B;AACnCc,qBAAKgjB,QAAQ9jB,EAAAA,EAAG0R,SAAS7E,OAC3B/L,KAAKgjB,QAAQ9jB,EAAAA,EAAGsK,QAAAA,GAChBxJ,KAAKgjB,QAAQhY,OAAO9L,MAAK,CAAA;AAG7Bc,mBAAKspD,cAAAA;YACP;YAKOhkC,kBAAAA;AACLtlB,mBAAKspD,cAAAA;AACL,uBAASpqD,KAAI,GAAGA,KAAIc,KAAKgjB,QAAQ/hB,QAAQ/B;AACvCc,qBAAKgjB,QAAQ9jB,EAAAA,EAAGsK,QAAAA,GAChBxJ,KAAKgjB,QAAQhY,OAAO9L,MAAK,CAAA;AAE3Bc,mBAAKspD,cAAAA;YACP;YAEOrmC,UAAUlX,IAAAA;AACf,oBAAMyf,KAAS,IAAI,EAAAuiC,OAAOhiD,EAAAA;AA0B1B,qBAzBA/L,KAAKgjB,QAAQze,KAAKinB,EAAAA,GAClBA,GAAO5pB,SAAS5B,KAAK6D,MAAM0+B,OAAOxkB,CAAAA,OAAAA;AAChCyN,gBAAAA,GAAO5a,QAAQmN,IAEXyN,GAAO5a,OAAO,KAChB4a,GAAOhiB,QAAAA;cAAAA,CAAAA,CAAAA,GAGXgiB,GAAO5pB,SAAS5B,KAAK6D,MAAMsmC,SAAS9/B,CAAAA,OAAAA;AAC9BmhB,gBAAAA,GAAO5a,QAAQvG,GAAMuD,UACvB4d,GAAO5a,QAAQvG,GAAM0T;cAAAA,CAAAA,CAAAA,GAGzByN,GAAO5pB,SAAS5B,KAAK6D,MAAMomC,SAAS5/B,CAAAA,OAAAA;AAE9BmhB,gBAAAA,GAAO5a,QAAQvG,GAAMuD,SAAS4d,GAAO5a,OAAOvG,GAAMuD,QAAQvD,GAAM0T,UAClEyN,GAAOhiB,QAAAA,GAILgiB,GAAO5a,OAAOvG,GAAMuD,UACtB4d,GAAO5a,QAAQvG,GAAM0T;cAAAA,CAAAA,CAAAA,GAGzByN,GAAO5pB,SAAS4pB,GAAOwiC,UAAU,MAAMhuD,KAAKiuD,cAAcziC,EAAAA,CAAAA,CAAAA,GACnDA;YACT;YAEQyiC,cAAcziC,IAAAA;AACfxrB,mBAAKspD,eACRtpD,KAAKgjB,QAAQhY,OAAOhL,KAAKgjB,QAAQjY,QAAQygB,EAAAA,GAAS,CAAA;YAEtD;YAEO0iC,SAASP,IAAoBvvB,IAAqBC,IAAmB8vB,IAAwBC,IAAAA;AAClG,qBAAO,IAAIC,EAAqBruD,MAAM2tD,IAAWvvB,IAAYC,IAAU8vB,IAAeC,EAAAA;YACxF;UAAA;AAeF,gBAAaC,EAAAA;YAGX5uD,YACU6uD,IACAC,IACAhkB,KAAsB,GACtBikB,KAAoBF,GAAQzqD,MAAM5C,QAClCwtD,KAAyB,GACzBC,KAAuB,GAAA;AALvB,mBAAAJ,UAAAA,IACA,KAAAC,aAAAA,IACA,KAAAhkB,cAAAA,IACA,KAAAikB,YAAAA,IACA,KAAAC,iBAAAA,IACA,KAAAC,eAAAA,IAEJ1uD,KAAKuqC,cAAc,MACrBvqC,KAAKuqC,cAAc,IAEjBvqC,KAAKwuD,YAAYxuD,KAAKsuD,QAAQzqD,MAAM5C,WACtCjB,KAAKwuD,YAAYxuD,KAAKsuD,QAAQzqD,MAAM5C,SAEtCjB,KAAK2uD,WAAW3uD,KAAKuqC;YACvB;YAEOqkB,UAAAA;AACL,qBAAO5uD,KAAK2uD,WAAW3uD,KAAKwuD;YAC9B;YAEOK,OAAAA;AACL,oBAAMrhD,KAAQxN,KAAKsuD,QAAQ9nB,uBAAuBxmC,KAAK2uD,QAAAA;AAEnDnhD,cAAAA,GAAMi5B,QAAQzmC,KAAKuqC,cAAcvqC,KAAKyuD,mBACxCjhD,GAAMi5B,QAAQzmC,KAAKuqC,cAAcvqC,KAAKyuD,iBAEpCjhD,GAAMk5B,OAAO1mC,KAAKwuD,YAAYxuD,KAAK0uD,iBACrClhD,GAAMk5B,OAAO1mC,KAAKwuD,YAAYxuD,KAAK0uD,eAGrClhD,GAAMi5B,QAAQ9yB,KAAKG,IAAItG,GAAMi5B,OAAO,CAAA,GACpCj5B,GAAMk5B,OAAO/yB,KAAKC,IAAIpG,GAAMk5B,MAAM1mC,KAAKsuD,QAAQzqD,MAAM5C,MAAAA;AACrD,kBAAIg8B,KAAU;AACd,uBAAS/9B,KAAIsO,GAAMi5B,OAAOvnC,MAAKsO,GAAMk5B,MAAAA,EAAQxnC;AAC3C+9B,gBAAAA,MAAWj9B,KAAKsuD,QAAQ3oD,4BAA4BzG,IAAGc,KAAKuuD,UAAAA;AAG9D,qBADAvuD,KAAK2uD,WAAWnhD,GAAMk5B,OAAO,GACtB,EAAEl5B,OAAAA,IAAOyvB,SAAAA,GAAAA;YAClB;UAAA;AA1CF,UAAA59B,GAAA,uBAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAAA,GAAA,oBAAA;AC1rBA,gBAAAC,KAAAJ,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA;AA4Ba,UAAAG,GAAAmmB,oBAAoB1W,OAAOo4B,OAAO,IAAI,EAAA/N,eAAAA;AAGnD,cAAI21B,IAAc;AAoBlB,gBAAahF,EAAAA;YAMXrqD,YAAYiO,IAAcqhD,IAAiC78B,KAAAA,OAAqB;AAArB,mBAAAA,YAAAA,IAJjD,KAAA88B,YAAuC,CAAC,GACxC,KAAAC,iBAAgE,CAAC,GAIzEjvD,KAAKmlD,QAAQ,IAAIvQ,YA9CH,IA8CelnC,EAAAA;AAC7B,oBAAMxH,KAAO6oD,MAAgB,EAAA/9C,SAASk4C,aAAa,CAAC,GAAG,EAAAC,gBAAgB,EAAA3J,iBAAiB,EAAAxnB,cAAAA,CAAAA;AACxF,uBAAS94B,KAAI,GAAGA,KAAIwO,IAAAA,EAAQxO;AAC1Bc,qBAAK8sD,QAAQ5tD,IAAGgH,EAAAA;AAElBlG,mBAAKiB,SAASyM;YAChB;YAMO7E,IAAI+E,IAAAA;AACT,oBAAMqvB,KAAUj9B,KAAKmlD,MA3DP,IA2Dav3C,KAAoB,CAAA,GACzCshD,KAAe,UAAVjyB;AACX,qBAAO,CACLj9B,KAAKmlD,MA9DO,IA8DDv3C,KAAoB,CAAA,GACpB,UAAVqvB,KACGj9B,KAAKgvD,UAAUphD,EAAAA,IACf1O,MAAO,GAAAI,GAAA6/C,qBAAoB+P,EAAAA,IAAM,IACrCjyB,MAAW,IACA,UAAVA,KACGj9B,KAAKgvD,UAAUphD,EAAAA,EAAO2W,WAAWvkB,KAAKgvD,UAAUphD,EAAAA,EAAO3M,SAAS,CAAA,IAChEiuD,EAAAA;YAER;YAMOvmD,IAAIiF,IAAe3G,IAAAA;AACxBjH,mBAAKmlD,MA9ES,IA8EHv3C,KAAoB,CAAA,IAAW3G,GAAM,EAAAkoD,oBAAAA,GAC5CloD,GAAM,EAAA4mD,oBAAAA,EAAsB5sD,SAAS,KACvCjB,KAAKgvD,UAAUphD,EAAAA,IAAS3G,GAAM,CAAA,GAC9BjH,KAAKmlD,MAjFO,IAiFDv3C,KAAoB,CAAA,IAAwB,UAARA,KAAoC3G,GAAM,EAAA2mD,qBAAAA,KAA0B,MAEnH5tD,KAAKmlD,MAnFO,IAmFDv3C,KAAoB,CAAA,IAAgB3G,GAAM,EAAA4mD,oBAAAA,EAAsBtpC,WAAW,CAAA,IAAMtd,GAAM,EAAA2mD,qBAAAA,KAA0B;YAEhI;YAMO3zC,SAASrM,IAAAA;AACd,qBAAO5N,KAAKmlD,MA5FE,IA4FIv3C,KAAoB,CAAA,KAAiB;YACzD;YAGO42B,SAAS52B,IAAAA;AACd,qBAAsD,WAA/C5N,KAAKmlD,MAjGE,IAiGIv3C,KAAoB,CAAA;YACxC;YAGOowB,MAAMpwB,IAAAA;AACX,qBAAO5N,KAAKmlD,MAtGE,IAsGIv3C,KAAoB,CAAA;YACxC;YAGOswB,MAAMtwB,IAAAA;AACX,qBAAO5N,KAAKmlD,MA3GE,IA2GIv3C,KAAoB,CAAA;YACxC;YAOO0D,WAAW1D,IAAAA;AAChB,qBAAsD,UAA/C5N,KAAKmlD,MApHE,IAoHIv3C,KAAoB,CAAA;YACxC;YAOOo4B,aAAap4B,IAAAA;AAClB,oBAAMqvB,KAAUj9B,KAAKmlD,MA7HP,IA6Hav3C,KAAoB,CAAA;AAC/C,qBAAc,UAAVqvB,KACKj9B,KAAKgvD,UAAUphD,EAAAA,EAAO2W,WAAWvkB,KAAKgvD,UAAUphD,EAAAA,EAAO3M,SAAS,CAAA,IAExD,UAAVg8B;YACT;YAGOE,WAAWvvB,IAAAA;AAChB,qBAAsD,UAA/C5N,KAAKmlD,MAtIE,IAsIIv3C,KAAoB,CAAA;YACxC;YAGOkxB,UAAUlxB,IAAAA;AACf,oBAAMqvB,KAAUj9B,KAAKmlD,MA3IP,IA2Iav3C,KAAoB,CAAA;AAC/C,qBAAc,UAAVqvB,KACKj9B,KAAKgvD,UAAUphD,EAAAA,IAEV,UAAVqvB,MACK,GAAA39B,GAAA6/C,qBAA8B,UAAVliB,EAAAA,IAGtB;YACT;YAGO6nB,YAAYl3C,IAAAA;AACjB,qBAAiD,YAA1C5N,KAAKmlD,MAxJE,IAwJIv3C,KAAoB,CAAA;YACxC;YAMO2D,SAAS3D,IAAe1H,IAAAA;AAW7B,qBAVA4oD,IAhKc,IAgKAlhD,IACd1H,GAAK+2B,UAAUj9B,KAAKmlD,MAAM2J,IAAc,CAAA,GACxC5oD,GAAKwC,KAAK1I,KAAKmlD,MAAM2J,IAAc,CAAA,GACnC5oD,GAAKuC,KAAKzI,KAAKmlD,MAAM2J,IAAc,CAAA,GAChB,UAAf5oD,GAAK+2B,YACP/2B,GAAKg3B,eAAel9B,KAAKgvD,UAAUphD,EAAAA,IAEvB,YAAV1H,GAAKuC,OACPvC,GAAKuL,WAAWzR,KAAKivD,eAAerhD,EAAAA,IAE/B1H;YACT;YAKO4mD,QAAQl/C,IAAe1H,IAAAA;AACT,wBAAfA,GAAK+2B,YACPj9B,KAAKgvD,UAAUphD,EAAAA,IAAS1H,GAAKg3B,eAEjB,YAAVh3B,GAAKuC,OACPzI,KAAKivD,eAAerhD,EAAAA,IAAS1H,GAAKuL,WAEpCzR,KAAKmlD,MAvLS,IAuLHv3C,KAAoB,CAAA,IAAgB1H,GAAK+2B,SACpDj9B,KAAKmlD,MAxLS,IAwLHv3C,KAAoB,CAAA,IAAW1H,GAAKwC,IAC/C1I,KAAKmlD,MAzLS,IAyLHv3C,KAAoB,CAAA,IAAW1H,GAAKuC;YACjD;YAOOu2C,qBAAqBpxC,IAAewhD,IAAmB/oD,IAAeqC,IAAYD,IAAY4mD,IAAAA;AAC1F,0BAAL5mD,OACFzI,KAAKivD,eAAerhD,EAAAA,IAASyhD,KAE/BrvD,KAAKmlD,MArMS,IAqMHv3C,KAAoB,CAAA,IAAgBwhD,KAAa/oD,MAAS,IACrErG,KAAKmlD,MAtMS,IAsMHv3C,KAAoB,CAAA,IAAWlF,IAC1C1I,KAAKmlD,MAvMS,IAuMHv3C,KAAoB,CAAA,IAAWnF;YAC5C;YAQOg3C,mBAAmB7xC,IAAewhD,IAAAA;AACvC,kBAAInyB,KAAUj9B,KAAKmlD,MAjNL,IAiNWv3C,KAAoB,CAAA;AAC/B,wBAAVqvB,KAEFj9B,KAAKgvD,UAAUphD,EAAAA,MAAU,GAAAtO,GAAA6/C,qBAAoBiQ,EAAAA,KAE/B,UAAVnyB,MAIFj9B,KAAKgvD,UAAUphD,EAAAA,KAAS,GAAAtO,GAAA6/C,qBAA8B,UAAVliB,EAAAA,KAAoC,GAAA39B,GAAA6/C,qBAAoBiQ,EAAAA,GACpGnyB,MAAAA,UACAA,MAAW,WAIXA,KAAUmyB,KAAa,KAAK,IAE9BpvD,KAAKmlD,MAlOO,IAkODv3C,KAAoB,CAAA,IAAgBqvB;YAEnD;YAEOqiB,YAAYj4C,IAAaqC,IAAWqlD,IAAyB1d,IAAAA;AAQlE,mBAPAhqC,MAAOrH,KAAKiB,WAG0B,MAA3BjB,KAAKia,SAAS5S,KAAM,CAAA,KAC7BrH,KAAKg/C,qBAAqB33C,KAAM,GAAG,GAAG,IAAGgqC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA,GAG1Gp+C,KAAI1J,KAAKiB,SAASoG,IAAK;AACzB,sBAAMnB,KAAO,IAAI,EAAA8K;AACjB,yBAAS9R,KAAIc,KAAKiB,SAASoG,KAAMqC,KAAI,GAAGxK,MAAK,GAAA,EAAKA;AAChDc,uBAAK8sD,QAAQzlD,KAAMqC,KAAIxK,IAAGc,KAAKuR,SAASlK,KAAMnI,IAAGgH,EAAAA,CAAAA;AAEnD,yBAAShH,KAAI,GAAGA,KAAIwK,IAAAA,EAAKxK;AACvBc,uBAAK8sD,QAAQzlD,KAAMnI,IAAG6vD,EAAAA;cAAAA;AAGxB,yBAAS7vD,KAAImI,IAAKnI,KAAIc,KAAKiB,QAAAA,EAAU/B;AACnCc,uBAAK8sD,QAAQ5tD,IAAG6vD,EAAAA;AAKmB,oBAAnC/uD,KAAKia,SAASja,KAAKiB,SAAS,CAAA,KAC9BjB,KAAKg/C,qBAAqBh/C,KAAKiB,SAAS,GAAG,GAAG,IAAGowC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA;YAExH;YAEO7G,YAAY55C,IAAaqC,IAAWqlD,IAAyB1d,IAAAA;AAElE,kBADAhqC,MAAOrH,KAAKiB,QACRyI,KAAI1J,KAAKiB,SAASoG,IAAK;AACzB,sBAAMnB,KAAO,IAAI,EAAA8K;AACjB,yBAAS9R,KAAI,GAAGA,KAAIc,KAAKiB,SAASoG,KAAMqC,IAAAA,EAAKxK;AAC3Cc,uBAAK8sD,QAAQzlD,KAAMnI,IAAGc,KAAKuR,SAASlK,KAAMqC,KAAIxK,IAAGgH,EAAAA,CAAAA;AAEnD,yBAAShH,KAAIc,KAAKiB,SAASyI,IAAGxK,KAAIc,KAAKiB,QAAAA,EAAU/B;AAC/Cc,uBAAK8sD,QAAQ5tD,IAAG6vD,EAAAA;cAAAA;AAGlB,yBAAS7vD,KAAImI,IAAKnI,KAAIc,KAAKiB,QAAAA,EAAU/B;AACnCc,uBAAK8sD,QAAQ5tD,IAAG6vD,EAAAA;AAOhB1nD,cAAAA,MAAkC,MAA3BrH,KAAKia,SAAS5S,KAAM,CAAA,KAC7BrH,KAAKg/C,qBAAqB33C,KAAM,GAAG,GAAG,IAAGgqC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA,GAEnF,MAAvB9nD,KAAKia,SAAS5S,EAAAA,KAAerH,KAAKsR,WAAWjK,EAAAA,KAC/CrH,KAAKg/C,qBAAqB33C,IAAK,GAAG,IAAGgqC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA;YAE5G;YAEOnH,aAAa3+C,IAAeC,IAAa8sD,IAAyB1d,IAA4BqP,KAAAA,OAA0B;AAE7H,kBAAIA;AAOF,qBANI1+C,MAAsC,MAA7BhC,KAAKia,SAASjY,KAAQ,CAAA,KAAA,CAAahC,KAAK8kD,YAAY9iD,KAAQ,CAAA,KACvEhC,KAAKg/C,qBAAqBh9C,KAAQ,GAAG,GAAG,IAAGqvC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA,GAE5G7lD,KAAMjC,KAAKiB,UAAqC,MAA3BjB,KAAKia,SAAShY,KAAM,CAAA,KAAA,CAAajC,KAAK8kD,YAAY7iD,EAAAA,KACzEjC,KAAKg/C,qBAAqB/8C,IAAK,GAAG,IAAGovC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA,GAEnG9lD,KAAQC,MAAQD,KAAQhC,KAAKiB;AAC7BjB,uBAAK8kD,YAAY9iD,EAAAA,KACpBhC,KAAK8sD,QAAQ9qD,IAAO+sD,EAAAA,GAEtB/sD;;AAcJ,qBARIA,MAAsC,MAA7BhC,KAAKia,SAASjY,KAAQ,CAAA,KACjChC,KAAKg/C,qBAAqBh9C,KAAQ,GAAG,GAAG,IAAGqvC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA,GAG5G7lD,KAAMjC,KAAKiB,UAAqC,MAA3BjB,KAAKia,SAAShY,KAAM,CAAA,KAC3CjC,KAAKg/C,qBAAqB/8C,IAAK,GAAG,IAAGovC,QAAAA,KAAAA,SAAAA,GAAW3oC,OAAM,IAAG2oC,QAAAA,KAAAA,SAAAA,GAAW5oC,OAAM,IAAG4oC,QAAAA,KAAAA,SAAAA,GAAW5/B,aAAY,IAAI,EAAAq2C,eAAAA,GAGnG9lD,KAAQC,MAAQD,KAAQhC,KAAKiB;AAClCjB,uBAAK8sD,QAAQ9qD,MAAS+sD,EAAAA;YAE1B;YASO1xC,OAAO3P,IAAcqhD,IAAAA;AAC1B,kBAAIrhD,OAAS1N,KAAKiB;AAChB,uBAA2B,IAApBjB,KAAKmlD,MAAMlkD,SAhTE,IAgT+BjB,KAAKmlD,MAAMvhD,OAAO0rD;AAEvE,oBAAMC,KAxUQ,IAwUM7hD;AACpB,kBAAIA,KAAO1N,KAAKiB,QAAQ;AACtB,oBAAIjB,KAAKmlD,MAAMvhD,OAAO0rD,cAA4B,IAAdC;AAElCvvD,uBAAKmlD,QAAQ,IAAIvQ,YAAY50C,KAAKmlD,MAAMvhD,QAAQ,GAAG2rD,EAAAA;qBAC9C;AAEL,wBAAMvtC,KAAO,IAAI4yB,YAAY2a,EAAAA;AAC7BvtC,kBAAAA,GAAKrZ,IAAI3I,KAAKmlD,KAAAA,GACdnlD,KAAKmlD,QAAQnjC;gBAAAA;AAEf,yBAAS9iB,KAAIc,KAAKiB,QAAQ/B,KAAIwO,IAAAA,EAAQxO;AACpCc,uBAAK8sD,QAAQ5tD,IAAG6vD,EAAAA;cAAAA,OAEb;AAEL/uD,qBAAKmlD,QAAQnlD,KAAKmlD,MAAMjqB,SAAS,GAAGq0B,EAAAA;AAEpC,sBAAMC,KAAO1gD,OAAO0gD,KAAKxvD,KAAKgvD,SAAAA;AAC9B,yBAAS9vD,KAAI,GAAGA,KAAIswD,GAAKvuD,QAAQ/B,MAAK;AACpC,wBAAM0D,KAAMouB,SAASw+B,GAAKtwD,EAAAA,GAAI,EAAA;AAC1B0D,kBAAAA,MAAO8K,MAAAA,OACF1N,KAAKgvD,UAAUpsD,EAAAA;gBAAAA;AAI1B,sBAAM6sD,KAAU3gD,OAAO0gD,KAAKxvD,KAAKivD,cAAAA;AACjC,yBAAS/vD,KAAI,GAAGA,KAAIuwD,GAAQxuD,QAAQ/B,MAAK;AACvC,wBAAM0D,KAAMouB,SAASy+B,GAAQvwD,EAAAA,GAAI,EAAA;AAC7B0D,kBAAAA,MAAO8K,MAAAA,OACF1N,KAAKivD,eAAersD,EAAAA;gBAAAA;cAAAA;AAKjC,qBADA5C,KAAKiB,SAASyM,IACO,IAAd6hD,KArVe,IAqVuBvvD,KAAKmlD,MAAMvhD,OAAO0rD;YACjE;YAQOvE,gBAAAA;AACL,kBAAwB,IAApB/qD,KAAKmlD,MAAMlkD,SA/VO,IA+V0BjB,KAAKmlD,MAAMvhD,OAAO0rD,YAAY;AAC5E,sBAAMttC,KAAO,IAAI4yB,YAAY50C,KAAKmlD,MAAMlkD,MAAAA;AAGxC,uBAFA+gB,GAAKrZ,IAAI3I,KAAKmlD,KAAAA,GACdnlD,KAAKmlD,QAAQnjC,IACN;cAAA;AAET,qBAAO;YACT;YAGOmZ,KAAK4zB,IAAyBrO,KAAAA,OAA0B;AAE7D,kBAAIA;AACF,yBAASxhD,KAAI,GAAGA,KAAIc,KAAKiB,QAAAA,EAAU/B;AAC5Bc,uBAAK8kD,YAAY5lD,EAAAA,KACpBc,KAAK8sD,QAAQ5tD,IAAG6vD,EAAAA;mBAHtB;AAQA/uD,qBAAKgvD,YAAY,CAAC,GAClBhvD,KAAKivD,iBAAiB,CAAC;AACvB,yBAAS/vD,KAAI,GAAGA,KAAIc,KAAKiB,QAAAA,EAAU/B;AACjCc,uBAAK8sD,QAAQ5tD,IAAG6vD,EAAAA;cAAAA;YAEpB;YAGOW,SAAS9+C,IAAAA;AACV5Q,mBAAKiB,WAAW2P,GAAK3P,SACvBjB,KAAKmlD,QAAQ,IAAIvQ,YAAYhkC,GAAKu0C,KAAAA,IAGlCnlD,KAAKmlD,MAAMx8C,IAAIiI,GAAKu0C,KAAAA,GAEtBnlD,KAAKiB,SAAS2P,GAAK3P,QACnBjB,KAAKgvD,YAAY,CAAC;AAClB,yBAAWlvC,MAAMlP,GAAKo+C;AACpBhvD,qBAAKgvD,UAAUlvC,EAAAA,IAAMlP,GAAKo+C,UAAUlvC,EAAAA;AAEtC9f,mBAAKivD,iBAAiB,CAAC;AACvB,yBAAWnvC,MAAMlP,GAAKq+C;AACpBjvD,qBAAKivD,eAAenvC,EAAAA,IAAMlP,GAAKq+C,eAAenvC,EAAAA;AAEhD9f,mBAAKkyB,YAAYthB,GAAKshB;YACxB;YAGOoZ,QAAAA;AACL,oBAAM+gB,KAAU,IAAIvC,EAAW,CAAA;AAC/BuC,cAAAA,GAAQlH,QAAQ,IAAIvQ,YAAY50C,KAAKmlD,KAAAA,GACrCkH,GAAQprD,SAASjB,KAAKiB;AACtB,yBAAW6e,MAAM9f,KAAKgvD;AACpB3C,gBAAAA,GAAQ2C,UAAUlvC,EAAAA,IAAM9f,KAAKgvD,UAAUlvC,EAAAA;AAEzC,yBAAWA,MAAM9f,KAAKivD;AACpB5C,gBAAAA,GAAQ4C,eAAenvC,EAAAA,IAAM9f,KAAKivD,eAAenvC,EAAAA;AAGnD,qBADAusC,GAAQn6B,YAAYlyB,KAAKkyB,WAClBm6B;YACT;YAEOn7C,mBAAAA;AACL,uBAAShS,KAAIc,KAAKiB,SAAS,GAAG/B,MAAK,GAAA,EAAKA;AACtC,oBAAgD,UAA3Cc,KAAKmlD,MArbE,IAqbIjmD,KAAgB,CAAA;AAC9B,yBAAOA,MAAKc,KAAKmlD,MAtbP,IAsbajmD,KAAgB,CAAA,KAAiB;AAG5D,qBAAO;YACT;YAEOytD,cAAcgD,IAAiBlD,IAAgBF,IAAiBtrD,IAAgB2uD,IAAAA;AACrF,oBAAMC,KAAUF,GAAIxK;AACpB,kBAAIyK;AACF,yBAAS1pD,KAAOjF,KAAS,GAAGiF,MAAQ,GAAGA,MAAQ;AAC7C,2BAAShH,KAAI,GAAGA,KAhcN,GAgcqBA;AAC7Bc,yBAAKmlD,MAjcG,KAicIoH,KAAUrmD,MAAoBhH,EAAAA,IAAK2wD,GAjcvC,KAicgDpD,KAASvmD,MAAoBhH,EAAAA;AAElC,8BAAjD2wD,GAncM,KAmcGpD,KAASvmD,MAAoB,CAAA,MACxClG,KAAKivD,eAAe1C,KAAUrmD,EAAAA,IAAQypD,GAAIV,eAAexC,KAASvmD,EAAAA;gBAAAA;;AAItE,yBAASA,KAAO,GAAGA,KAAOjF,IAAQiF,MAAQ;AACxC,2BAAShH,KAAI,GAAGA,KAzcN,GAycqBA;AAC7Bc,yBAAKmlD,MA1cG,KA0cIoH,KAAUrmD,MAAoBhH,EAAAA,IAAK2wD,GA1cvC,KA0cgDpD,KAASvmD,MAAoBhH,EAAAA;AAElC,8BAAjD2wD,GA5cM,KA4cGpD,KAASvmD,MAAoB,CAAA,MACxClG,KAAKivD,eAAe1C,KAAUrmD,EAAAA,IAAQypD,GAAIV,eAAexC,KAASvmD,EAAAA;gBAAAA;AAMxE,oBAAM4pD,KAAkBhhD,OAAO0gD,KAAKG,GAAIX,SAAAA;AACxC,uBAAS9vD,KAAI,GAAGA,KAAI4wD,GAAgB7uD,QAAQ/B,MAAK;AAC/C,sBAAM0D,KAAMouB,SAAS8+B,GAAgB5wD,EAAAA,GAAI,EAAA;AACrC0D,gBAAAA,MAAO6pD,OACTzsD,KAAKgvD,UAAUpsD,KAAM6pD,KAASF,EAAAA,IAAWoD,GAAIX,UAAUpsD,EAAAA;cAAAA;YAG7D;YAEOy1B,kBAAkBs1B,KAAAA,OAA4Br7B,KAAmB,GAAGC,KAAiBvyB,KAAKiB,QAAAA;AAC3F0sD,cAAAA,OACFp7B,KAAS5e,KAAKC,IAAI2e,IAAQvyB,KAAKkR,iBAAAA,CAAAA;AAEjC,kBAAIL,KAAS;AACb,qBAAOyhB,KAAWC,MAAQ;AACxB,sBAAM0K,KAAUj9B,KAAKmlD,MAleT,IAkee7yB,KAAuB,CAAA,GAC5C48B,KAAe,UAAVjyB;AACXpsB,gBAAAA,MAAqB,UAAVosB,KAAsCj9B,KAAKgvD,UAAU18B,EAAAA,IAAYpzB,MAAO,GAAAI,GAAA6/C,qBAAoB+P,EAAAA,IAAM,EAAAt2B,sBAC7GtG,MAAa2K,MAAW,MAAwB;cAAA;AAElD,qBAAOpsB;YACT;UAAA;AAjcF,UAAAxR,GAAA,aAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,iBAAA,QCrDAA,GAAA,iBAAA,SAA+BmO,IAAqBuiD,IAAAA;AAClD,gBAAIviD,GAAMxL,MAAM+J,IAAIyB,GAAMvL,IAAI8J;AAC5B,oBAAM,IAAIrK,MAAM,qBAAqB8L,GAAMvL,IAAI6J,MAAM0B,GAAMvL,IAAI8J,8BAA8ByB,GAAMxL,MAAM8J,MAAM0B,GAAMxL,MAAM+J,IAAAA;AAE7H,mBAAOgkD,MAAcviD,GAAMvL,IAAI8J,IAAIyB,GAAMxL,MAAM+J,MAAMyB,GAAMvL,IAAI6J,IAAI0B,GAAMxL,MAAM8J,IAAI;UACrF;QAAA,GAAA,MAAA,CAAA1M,IAAAC,OAAA;ACoMA,mBAAgBwtD,GAA4BhpD,IAAqB3E,IAAWwO,IAAAA;AAE1E,gBAAIxO,OAAM2E,GAAM5C,SAAS;AACvB,qBAAO4C,GAAM3E,EAAAA,EAAGgS,iBAAAA;AAKlB,kBAAM8+C,KAAAA,CAAensD,GAAM3E,EAAAA,EAAGoS,WAAW5D,KAAO,CAAA,KAAuC,MAAhC7J,GAAM3E,EAAAA,EAAG+a,SAASvM,KAAO,CAAA,GAC1EuiD,IAA2D,MAA7BpsD,GAAM3E,KAAI,CAAA,EAAG+a,SAAS,CAAA;AAC1D,mBAAI+1C,MAAcC,IACTviD,KAAO,IAETA;UACT;AAAA,iBAAA,eAAArO,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,8BAAAA,GAAA,iCAAAA,GAAA,6BAAAA,GAAA,8BAAAA,GAAA,+BAAA,QAvMAA,GAAA,+BAAA,SAA6CwE,IAAkCqsD,IAAiB9F,IAAiB+F,GAAyB7F,GAAAA;AAGxI,kBAAMY,IAAqB,CAAA;AAE3B,qBAASn/C,IAAI,GAAGA,IAAIlI,GAAM5C,SAAS,GAAG8K,KAAK;AAEzC,kBAAI7M,IAAI6M,GACJ0vC,IAAW53C,GAAMgF,IAAAA,EAAM3J,CAAAA;AAC3B,kBAAA,CAAKu8C,EAASvpB;AACZ;AAIF,oBAAM25B,IAA6B,CAAChoD,GAAMgF,IAAIkD,CAAAA,CAAAA;AAC9C,qBAAO7M,IAAI2E,GAAM5C,UAAUw6C,EAASvpB;AAClC25B,kBAAatnD,KAAKk3C,CAAAA,GAClBA,IAAW53C,GAAMgF,IAAAA,EAAM3J,CAAAA;AAKzB,kBAAIixD,KAAmBpkD,KAAKokD,IAAkBjxD,GAAG;AAC/C6M,qBAAK8/C,EAAa5qD,SAAS;AAC3B;cAAA;AAIF,kBAAIqrD,IAAgB,GAChBC,IAAUM,GAA4BhB,GAAcS,GAAe4D,EAAAA,GACnE1D,IAAe,GACfC,IAAS;AACb,qBAAOD,IAAeX,EAAa5qD,UAAQ;AACzC,sBAAMmvD,KAAuBvD,GAA4BhB,GAAcW,GAAc0D,EAAAA,GAC/EG,KAAoBD,KAAuB3D,GAC3C6D,KAAqBlG,KAAUmC,GAC/BG,KAAc/4C,KAAKC,IAAIy8C,IAAmBC,EAAAA;AAEhDzE,kBAAaS,CAAAA,EAAeK,cAAcd,EAAaW,CAAAA,GAAeC,GAAQF,GAASG,IAAAA,KAAa,GAEpGH,KAAWG,IACPH,MAAYnC,OACdkC,KACAC,IAAU,IAEZE,KAAUC,IACND,MAAW2D,OACb5D,KACAC,IAAS,IAIK,MAAZF,KAAmC,MAAlBD,KAC2C,MAA1DT,EAAaS,IAAgB,CAAA,EAAGryC,SAASmwC,KAAU,CAAA,MACrDyB,EAAaS,CAAAA,EAAeK,cAAcd,EAAaS,IAAgB,CAAA,GAAIlC,KAAU,GAAGmC,KAAW,GAAA,KAAG,GAEtGV,EAAaS,IAAgB,CAAA,EAAGQ,QAAQ1C,KAAU,GAAGE,CAAAA;cAAAA;AAM3DuB,gBAAaS,CAAAA,EAAe3L,aAAa4L,GAASnC,IAASE,CAAAA;AAG3D,kBAAIiG,IAAgB;AACpB,uBAASrxD,KAAI2sD,EAAa5qD,SAAS,GAAG/B,KAAI,MACpCA,KAAIotD,KAAwD,MAAvCT,EAAa3sD,EAAAA,EAAGgS,iBAAAA,IADEhS;AAEzCqxD;AAMAA,kBAAgB,MAClBrF,EAAS3mD,KAAKwH,IAAI8/C,EAAa5qD,SAASsvD,CAAAA,GACxCrF,EAAS3mD,KAAKgsD,CAAAA,IAGhBxkD,KAAK8/C,EAAa5qD,SAAS;YAAA;AAE7B,mBAAOiqD;UACT,GAOA7rD,GAAA,8BAAA,SAA4CwE,IAAkCqnD,IAAAA;AAC5E,kBAAMK,KAAmB,CAAA;AAEzB,gBAAIiF,KAAoB,GACpBC,IAAoBvF,GAASsF,EAAAA,GAC7BE,IAAoB;AACxB,qBAASxxD,IAAI,GAAGA,IAAI2E,GAAM5C,QAAQ/B;AAChC,kBAAIuxD,MAAsBvxD,GAAG;AAC3B,sBAAMqxD,KAAgBrF,GAAAA,EAAWsF,EAAAA;AAGjC3sD,gBAAAA,GAAMmmC,gBAAgBt6B,KAAK,EACzB9B,OAAO1O,IAAIwxD,GACX3yC,QAAQwyC,GAAAA,CAAAA,GAGVrxD,KAAKqxD,KAAgB,GACrBG,KAAqBH,IACrBE,IAAoBvF,GAAAA,EAAWsF,EAAAA;cAAAA;AAE/BjF,gBAAAA,GAAOhnD,KAAKrF,CAAAA;AAGhB,mBAAO,EACLqsD,QAAAA,IACAE,cAAciF,EAAAA;UAElB,GAQArxD,GAAA,6BAAA,SAA2CwE,IAAkC8sD,IAAAA;AAE3E,kBAAMC,KAA+B,CAAA;AACrC,qBAAS1xD,KAAI,GAAGA,KAAIyxD,GAAU1vD,QAAQ/B;AACpC0xD,cAAAA,GAAersD,KAAKV,GAAMgF,IAAI8nD,GAAUzxD,EAAAA,CAAAA,CAAAA;AAI1C,qBAASA,KAAI,GAAGA,KAAI0xD,GAAe3vD,QAAQ/B;AACzC2E,cAAAA,GAAM8E,IAAIzJ,IAAG0xD,GAAe1xD,EAAAA,CAAAA;AAE9B2E,YAAAA,GAAM5C,SAAS0vD,GAAU1vD;UAC3B,GAgBA5B,GAAA,iCAAA,SAA+CwsD,IAA4BqE,IAAiB9F,IAAAA;AAC1F,kBAAMyG,IAA2B,CAAA,GAC3BC,IAAcjF,GAAa7+C,IAAI,CAACm2C,IAAGjkD,OAAM2tD,GAA4BhB,IAAc3sD,IAAGgxD,EAAAA,CAAAA,EAAUa,OAAO,CAACvT,IAAG7vB,OAAM6vB,KAAI7vB,EAAAA;AAI3H,gBAAI8+B,IAAS,GACTuE,IAAU,GACVC,IAAiB;AACrB,mBAAOA,IAAiBH,KAAa;AACnC,kBAAIA,IAAcG,IAAiB7G,IAAS;AAE1CyG,kBAAetsD,KAAKusD,IAAcG,CAAAA;AAClC;cAAA;AAEFxE,mBAAUrC;AACV,oBAAM8G,IAAmBrE,GAA4BhB,IAAcmF,GAASd,EAAAA;AACxEzD,kBAASyE,MACXzE,KAAUyE,GACVF;AAEF,oBAAMG,IAA8D,MAA/CtF,GAAamF,CAAAA,EAAS/2C,SAASwyC,IAAS,CAAA;AACzD0E,mBACF1E;AAEF,oBAAMx7C,IAAakgD,IAAe/G,KAAU,IAAIA;AAChDyG,gBAAetsD,KAAK0M,CAAAA,GACpBggD,KAAkBhgD;YAAAA;AAGpB,mBAAO4/C;UACT,GAEAxxD,GAAA,8BAAAH;QAAA,GAAA,MAAA,CAAAE,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,YAAA;ACzMA,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,GAAA;AAMA,gBAAakyD,UAAkB,EAAA5xD,WAAAA;YAW7BC,YACmBgR,IACA5G,IAAAA;AAEjBjK,oBAAAA,GAHiB,KAAA6Q,kBAAAA,IACA,KAAA5G,iBAAAA,IARF,KAAAwnD,oBAAoBrxD,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACvC,KAAA6d,mBAAmBhoB,KAAKqxD,kBAAkBhnD,OAUxDrK,KAAKgX,MAAAA,GACLhX,KAAK4B,SAAS5B,KAAKyQ,gBAAgB8O,uBAAuB,cAAc,MAAMvf,KAAKqd,OAAOrd,KAAK6J,eAAe6D,MAAM1N,KAAK6J,eAAenJ,IAAAA,CAAAA,CAAAA,GACxIV,KAAK4B,SAAS5B,KAAKyQ,gBAAgB8O,uBAAuB,gBAAgB,MAAMvf,KAAK4pD,cAAAA,CAAAA,CAAAA;YACvF;YAEO5yC,QAAAA;AACLhX,mBAAKsxD,UAAU,IAAIhyD,GAAAiyD,OAAAA,MAAavxD,KAAKyQ,iBAAiBzQ,KAAK6J,cAAAA,GAC3D7J,KAAKsxD,QAAQpH,iBAAAA,GAIblqD,KAAKwxD,OAAO,IAAIlyD,GAAAiyD,OAAAA,OAAcvxD,KAAKyQ,iBAAiBzQ,KAAK6J,cAAAA,GACzD7J,KAAK+nB,gBAAgB/nB,KAAKsxD,SAC1BtxD,KAAKqxD,kBAAkB3hD,KAAK,EAC1BuY,cAAcjoB,KAAKsxD,SACnBG,gBAAgBzxD,KAAKwxD,KAAAA,CAAAA,GAGvBxxD,KAAK4pD,cAAAA;YACP;YAKWhpC,IAAAA,MAAAA;AACT,qBAAO5gB,KAAKwxD;YACd;YAKW14C,IAAAA,SAAAA;AACT,qBAAO9Y,KAAK+nB;YACd;YAKWqG,IAAAA,SAAAA;AACT,qBAAOpuB,KAAKsxD;YACd;YAKO5P,uBAAAA;AACD1hD,mBAAK+nB,kBAAkB/nB,KAAKsxD,YAGhCtxD,KAAKsxD,QAAQxlD,IAAI9L,KAAKwxD,KAAK1lD,GAC3B9L,KAAKsxD,QAAQvlD,IAAI/L,KAAKwxD,KAAKzlD,GAI3B/L,KAAKwxD,KAAKlsC,gBAAAA,GACVtlB,KAAKwxD,KAAKxoD,MAAAA,GACVhJ,KAAK+nB,gBAAgB/nB,KAAKsxD,SAC1BtxD,KAAKqxD,kBAAkB3hD,KAAK,EAC1BuY,cAAcjoB,KAAKsxD,SACnBG,gBAAgBzxD,KAAKwxD,KAAAA,CAAAA;YAEzB;YAKO/P,kBAAkB0I,IAAAA;AACnBnqD,mBAAK+nB,kBAAkB/nB,KAAKwxD,SAKhCxxD,KAAKwxD,KAAKtH,iBAAiBC,EAAAA,GAC3BnqD,KAAKwxD,KAAK1lD,IAAI9L,KAAKsxD,QAAQxlD,GAC3B9L,KAAKwxD,KAAKzlD,IAAI/L,KAAKsxD,QAAQvlD,GAC3B/L,KAAK+nB,gBAAgB/nB,KAAKwxD,MAC1BxxD,KAAKqxD,kBAAkB3hD,KAAK,EAC1BuY,cAAcjoB,KAAKwxD,MACnBC,gBAAgBzxD,KAAKsxD,QAAAA,CAAAA;YAEzB;YAOOj0C,OAAO+sC,IAAiBC,IAAAA;AAC7BrqD,mBAAKsxD,QAAQj0C,OAAO+sC,IAASC,EAAAA,GAC7BrqD,KAAKwxD,KAAKn0C,OAAO+sC,IAASC,EAAAA,GAC1BrqD,KAAK4pD,cAAcQ,EAAAA;YACrB;YAMOR,cAAc1qD,IAAAA;AACnBc,mBAAKsxD,QAAQ1H,cAAc1qD,EAAAA,GAC3Bc,KAAKwxD,KAAK5H,cAAc1qD,EAAAA;YAC1B;UAAA;AApHF,UAAAG,GAAA,YAAA;QAAA,GAAA,KAAA,CAAAD,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,WAAA;ACVA,gBAAAC,KAAAJ,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA;AAKA,gBAAa8R,UAAiB,EAAAmoB,cAAAA;YAA9B,cAAA;AAAA,oBAAA,GAAA,SAAA,GAQS,KAAA8D,UAAU,GACV,KAAAv0B,KAAK,GACL,KAAAD,KAAK,GACL,KAAAgJ,WAA2B,IAAI,EAAAq2C,iBAC/B,KAAA5qB,eAAe;YAoExB;YA9ES6B,OAAAA,aAAoB93B,IAAAA;AACzB,oBAAMyqD,KAAM,IAAI1gD;AAEhB,qBADA0gD,GAAIt0B,gBAAgBn2B,EAAAA,GACbyqD;YACT;YAQOv0B,aAAAA;AACL,qBAAsB,UAAfn9B,KAAKi9B;YACd;YAEOhjB,WAAAA;AACL,qBAAOja,KAAKi9B,WAAW;YACzB;YAEOpE,WAAAA;AACL,qBAAmB,UAAf74B,KAAKi9B,UACAj9B,KAAKk9B,eAEK,UAAfl9B,KAAKi9B,WACA,GAAA39B,GAAA6/C,qBAAmC,UAAfn/C,KAAKi9B,OAAAA,IAE3B;YACT;YAOOlF,UAAAA;AACL,qBAAQ/3B,KAAKm9B,WAAAA,IACTn9B,KAAKk9B,aAAa3Y,WAAWvkB,KAAKk9B,aAAaj8B,SAAS,CAAA,IACzC,UAAfjB,KAAKi9B;YACX;YAEOG,gBAAgBn2B,IAAAA;AACrBjH,mBAAK0I,KAAKzB,GAAM,EAAAkoD,oBAAAA,GAChBnvD,KAAKyI,KAAK;AACV,kBAAIkpD,KAAAA;AAEJ,kBAAI1qD,GAAM,EAAA4mD,oBAAAA,EAAsB5sD,SAAS;AACvC0wD,gBAAAA,KAAAA;uBAE8C,MAAvC1qD,GAAM,EAAA4mD,oBAAAA,EAAsB5sD,QAAc;AACjD,sBAAM81C,KAAO9vC,GAAM,EAAA4mD,oBAAAA,EAAsBtpC,WAAW,CAAA;AAGpD,oBAAI,SAAUwyB,MAAQA,MAAQ,OAAQ;AACpC,wBAAM2M,KAASz8C,GAAM,EAAA4mD,oBAAAA,EAAsBtpC,WAAW,CAAA;AAClD,2BAAUm/B,MAAUA,MAAU,QAChC1jD,KAAKi9B,UAA6B,QAAjB8Z,KAAO,SAAkB2M,KAAS,QAAS,QAAYz8C,GAAM,EAAA2mD,qBAAAA,KAA0B,KAGxG+D,KAAAA;gBAAW;AAIbA,kBAAAA,KAAAA;cAAW;AAIb3xD,qBAAKi9B,UAAUh2B,GAAM,EAAA4mD,oBAAAA,EAAsBtpC,WAAW,CAAA,IAAMtd,GAAM,EAAA2mD,qBAAAA,KAA0B;AAE1F+D,cAAAA,OACF3xD,KAAKk9B,eAAej2B,GAAM,EAAA4mD,oBAAAA,GAC1B7tD,KAAKi9B,UAAU,UAA4Bh2B,GAAM,EAAA2mD,qBAAAA,KAA0B;YAE/E;YAEOvwB,gBAAAA;AACL,qBAAO,CAACr9B,KAAK0I,IAAI1I,KAAK64B,SAAAA,GAAY74B,KAAKia,SAAAA,GAAYja,KAAK+3B,QAAAA,CAAAA;YAC1D;UAAA;AA/EF,UAAA14B,GAAA,WAAA;QAAA,GAAA,KAAA,CAAAD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,uBAAAA,GAAA,wBAAAA,GAAA,uBAAAA,GAAA,iBAAAA,GAAA,kBAAAA,GAAA,iBAAAA,GAAA,uBAAAA,GAAA,wBAAAA,GAAA,uBAAAA,GAAA,uBAAAA,GAAA,cAAAA,GAAA,eAAAA,GAAA,gBAAA,QCRaA,GAAAuyD,gBAAgB,GAChBvyD,GAAAwyD,eAAe,MAAaxyD,GAAAuyD,iBAAiB,GAC7CvyD,GAAAyyD,cAAc,GAEdzyD,GAAA8vD,uBAAuB,GACvB9vD,GAAAwuD,uBAAuB,GACvBxuD,GAAAuuD,wBAAwB,GACxBvuD,GAAAuoD,uBAAuB,GAOvBvoD,GAAA8pD,iBAAiB,IACjB9pD,GAAAmgD,kBAAkB,GAClBngD,GAAA24B,iBAAiB,GAOjB34B,GAAAu5B,uBAAuB,KACvBv5B,GAAAgqD,wBAAwB,GACxBhqD,GAAAwoD,uBAAuB;QAAA,GAAA,MAAA,CAAAzoD,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,SAAA;ACzBpC,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA;AAGA,gBAAa6uD,EAAAA;YAYXtuD,YACSmR,IAAAA;AAAA,mBAAAA,OAAAA,IAVF,KAAAmhD,aAAAA,OACC,KAAAhN,eAA8B,CAAA,GAE9B,KAAAiN,MAAcjE,EAAOkE,WAGZ,KAAAC,aAAalyD,KAAK4B,SAAS,IAAItC,GAAA6K,cAAAA,GAChC,KAAA6jD,YAAYhuD,KAAKkyD,WAAW7nD;YAK5C;YARWozB,IAAAA,KAAAA;AAAe,qBAAOz9B,KAAKgyD;YAAK;YAUpCxoD,UAAAA;AACDxJ,mBAAK+xD,eAGT/xD,KAAK+xD,aAAAA,MACL/xD,KAAK4Q,OAAAA,IAEL5Q,KAAKkyD,WAAWxiD,KAAAA,IAChB,GAAA,EAAAnB,cAAavO,KAAK+kD,YAAAA,GAClB/kD,KAAK+kD,aAAa9jD,SAAS;YAC7B;YAEOW,SAAgCuwD,IAAAA;AAErC,qBADAnyD,KAAK+kD,aAAaxgD,KAAK4tD,EAAAA,GAChBA;YACT;UAAA;AAhCF,UAAA9yD,GAAA,SAAA,GACiB,EAAA4yD,UAAU;QAAA,GAAA,MAAA,CAAA7yD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,kBAAAA,GAAA,WAAA,QCEdA,GAAA09C,WAAoD,CAAC,GAKrD19C,GAAAiiD,kBAAwCjiD,GAAA09C,SAAY,GAYjE19C,GAAA09C,SAAA,CAAA,IAAgB,EACd,KAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IAAgB,EACd,KAAK,IAAA,GAOP19C,GAAA09C,SAAA,IAAA,QAOA19C,GAAA09C,SAAA,CAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,KAAK,MACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAAqV,IACA/yD,GAAA09C,SAAA,CAAA,IAAgB,EACd,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IACA19C,GAAA09C,SAAA,CAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,IACA19C,GAAA09C,SAAA,CAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA,GAQP19C,GAAA09C,SAAA,GAAA,IAAgB,EACd,KAAK,KACL,KAAK,KACL,KAAK,KACL,MAAM,KACN,KAAK,KACL,KAAK,KAEL,GAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,IAAA;QAAA,GAAA,MAAA,CAAA39C,IAAAC,OAAA;ACrPP,cAAiB8Y,IA2EAmjC;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,aAAAA,GAAAA,KAAAA,GAAAA,KAAAA,QA3EjB,SAAiBnjC,IAAAA;AAEF,YAAA/Y,GAAAizD,MAAM,MAENjzD,GAAAkzD,MAAM,KAENlzD,GAAAmzD,MAAM,KAENnzD,GAAAolB,MAAM,KAENplB,GAAAozD,MAAM,KAENpzD,GAAAqzD,MAAM,KAENrzD,GAAAszD,MAAM,KAENtzD,GAAAm7C,MAAM,QAENn7C,GAAA07C,KAAM,MAEN17C,GAAA47C,KAAM,KAEN57C,GAAAq7C,KAAM,MAENr7C,GAAAu7C,KAAM,MAENv7C,GAAAw7C,KAAM,MAENx7C,GAAAqlB,KAAM,MAENrlB,GAAA87C,KAAM,KAEN97C,GAAAg8C,KAAM,KAENh8C,GAAAuzD,MAAM,KAENvzD,GAAAwzD,MAAM,KAENxzD,GAAAyzD,MAAM,KAENzzD,GAAA0zD,MAAM,KAEN1zD,GAAA2zD,MAAM,KAEN3zD,GAAA4zD,MAAM,KAEN5zD,GAAA6zD,MAAM,KAEN7zD,GAAA8zD,MAAM,KAEN9zD,GAAA+zD,MAAM,KAEN/zD,GAAAg0D,KAAM,KAENh0D,GAAAi0D,MAAM,KAENj0D,GAAAgZ,MAAM,QAENhZ,GAAAk0D,KAAM,KAENl0D,GAAAm0D,KAAM,KAENn0D,GAAAo0D,KAAM,KAENp0D,GAAAq0D,KAAM,KAENr0D,GAAAs0D,KAAM,KAENt0D,GAAAixB,MAAM;UACpB,EArEgBlY,KAAA9Y,GAAA8Y,OAAA9Y,GAAA8Y,KAAE,CAAA,EAAA,IA2EFmjC,KAAAj8C,GAAAi8C,OAAAj8C,GAAAi8C,KAAE,CAAA,IAEJqY,MAAM,KAENr0D,GAAAs0D,MAAM,KAENt0D,GAAAu0D,MAAM,KAENv0D,GAAAw0D,MAAM,KAENx0D,GAAAi8C,MAAM,KAENj8C,GAAAk8C,MAAM,KAENl8C,GAAAy0D,MAAM,KAENz0D,GAAA00D,MAAM,KAEN10D,GAAAo8C,MAAM,KAENp8C,GAAA20D,MAAM,KAEN30D,GAAA40D,MAAM,KAEN50D,GAAA60D,MAAM,KAEN70D,GAAA80D,MAAM,KAEN90D,GAAA+0D,KAAK,KAEL/0D,GAAAg1D,MAAM,KAENh1D,GAAAi1D,MAAM,KAENj1D,GAAAk1D,MAAM,KAENl1D,GAAAm1D,MAAM,KAENn1D,GAAAo1D,MAAM,KAENp1D,GAAAq1D,MAAM,KAENr1D,GAAAs1D,MAAM,KAENt1D,GAAAu1D,KAAK,KAELv1D,GAAAw1D,MAAM,KAENx1D,GAAAy1D,MAAM,KAENz1D,GAAA01D,MAAM,KAEN11D,GAAA21D,OAAO,KAEP31D,GAAA41D,MAAM,KAEN51D,GAAA61D,MAAM,KAEN71D,GAAAiZ,KAAK,KAELjZ,GAAA81D,MAAM,KAEN91D,GAAA+1D,KAAK,KAEL/1D,GAAAg2D,MAAM,MAEJj2D,GAAAiZ,eAAAjZ,GAAAiZ,aAAU,CAAA,IACZC,KAAK,GAAGJ,GAAGC;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,wBAAAA;AChJ1B,gBAAA9Y,KAAAJ,GAAA,IAAA,GAGMq2D,IAA2D,EAE/D,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GACV,IAAI,CAAC,KAAK,GAAA,GAGV,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,MAAM,GAAA,GACZ,KAAK,CAAC,KAAK,GAAA,GACX,KAAK,CAAC,KAAM,GAAA,EAAA;AAGd,UAAAl2D,GAAA,wBAAA,SACE8H,IACAquD,IACAtwD,IACA6e,GAAAA;AAEA,kBAAMlT,IAA0B,EAC9BzH,MAAM,GAGNiY,QAAAA,OAEAze,KAAAA,OAAK6M,GAEDgmD,KAAatuD,GAAG2Z,WAAW,IAAI,MAAM3Z,GAAG0Z,SAAS,IAAI,MAAM1Z,GAAGwZ,UAAU,IAAI,MAAMxZ,GAAGmd,UAAU,IAAI;AACzG,oBAAQnd,GAAG2d,SAAAA;cACT,KAAK;AACY,wCAAX3d,GAAGvE,MAEHiO,EAAOjO,MADL4yD,KACWl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM,OAGN,0BAAXjR,GAAGvE,MAERiO,EAAOjO,MADL4yD,KACWl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM,OAGN,2BAAXjR,GAAGvE,MAERiO,EAAOjO,MADL4yD,KACWl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM,OAGN,0BAAXjR,GAAGvE,QAERiO,EAAOjO,MADL4yD,KACWl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM;AAG1B;cACF,KAAK;AAEH,oBAAIjR,GAAG0Z,QAAQ;AACbhQ,oBAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM9Y,GAAA6Y,GAAGkY;AACzB;gBAAA;AAEFxf,kBAAOjO,MAAMtD,GAAA6Y,GAAGkY;AAChB;cACF,KAAK;AAEH,oBAAIlpB,GAAG2Z,UAAU;AACfjQ,oBAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM;AACtB;gBAAA;AAEFvH,kBAAOjO,MAAMtD,GAAA6Y,GAAG6iC,IAChBnqC,EAAOwQ,SAAAA;AACP;cACF,KAAK;AAEHxQ,kBAAOjO,MAAMuE,GAAG0Z,SAASvhB,GAAA6Y,GAAGC,MAAM9Y,GAAA6Y,GAAGsM,KAAKnlB,GAAA6Y,GAAGsM,IAC7C5T,EAAOwQ,SAAAA;AACP;cACF,KAAK;AAEHxQ,kBAAOjO,MAAMtD,GAAA6Y,GAAGC,KACZjR,GAAG0Z,WACLhQ,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM9Y,GAAA6Y,GAAGC,MAE3BvH,EAAOwQ,SAAAA;AACP;cACF,KAAK;AAEH,oBAAIla,GAAGmd;AACL;AAEEmxC,qBACF5kD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,KAI5C5kD,EAAOjO,QAAQtD,GAAA6Y,GAAGC,MAAM,YAC1BvH,EAAOjO,MAAMtD,GAAA6Y,GAAGC,OAAOlT,KAAQ,MAAM,aAGvC2L,EAAOjO,MADE4yD,KACIl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEH,oBAAIjR,GAAGmd;AACL;AAEEmxC,qBACF5kD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,KAI5C5kD,EAAOjO,QAAQtD,GAAA6Y,GAAGC,MAAM,YAC1BvH,EAAOjO,MAAMtD,GAAA6Y,GAAGC,OAAOlT,KAAQ,MAAM,aAGvC2L,EAAOjO,MADE4yD,KACIl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEH,oBAAIjR,GAAGmd;AACL;AAEEmxC,qBACF5kD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,KAI3CvwD,MAAS2L,EAAOjO,QAAQtD,GAAA6Y,GAAGC,MAAM,YACpCvH,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,YAGxBvH,EAAOjO,MADE4yD,KACIl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEH,oBAAIjR,GAAGmd;AACL;AAEEmxC,qBACF5kD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,KAI3CvwD,MAAS2L,EAAOjO,QAAQtD,GAAA6Y,GAAGC,MAAM,YACpCvH,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,YAGxBvH,EAAOjO,MADE4yD,KACIl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEEjR,gBAAAA,GAAG2Z,YAAa3Z,GAAGwZ,YAGtB9P,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAGDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MAEnCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAGDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MACvCD,KACIl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAGDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MACvCD,KACIl2D,GAAA6Y,GAAGC,MAAM,OAET9Y,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAECjR,gBAAAA,GAAG2Z,WACLjQ,EAAOzH,OAAO,IACLjC,GAAGwZ,UACZ9P,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MAEhD5kD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAECjR,gBAAAA,GAAG2Z,WACLjQ,EAAOzH,OAAO,IACLjC,GAAGwZ,UACZ9P,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MAEhD5kD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAGDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MAEnCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MAEnCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MAEnCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,SAASq9C,IAAY,KAAK,MAEnCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF,KAAK;AAEDvH,kBAAOjO,MADL6yD,IACWn2D,GAAA6Y,GAAGC,MAAM,UAAUq9C,IAAY,KAAK,MAEpCn2D,GAAA6Y,GAAGC,MAAM;AAExB;cACF;AAEE,oBAAA,CAAIjR,GAAGwZ,WAAYxZ,GAAG2Z,YAAa3Z,GAAG0Z,UAAW1Z,GAAGmd;AAiB7C,sBAAMpf,MAAAA,CAAS6e,KAAAA,CAAoB5c,GAAG0Z,UAAW1Z,GAAGmd;AAAAA,qBA4BhDpf,MAAUiC,GAAG0Z,UAAW1Z,GAAGwZ,WAAYxZ,GAAG2Z,YAAAA,CAAY3Z,GAAGmd,UAIzDnd,GAAGvE,OAAAA,CAAQuE,GAAGwZ,WAAAA,CAAYxZ,GAAG0Z,UAAAA,CAAW1Z,GAAGmd,WAAWnd,GAAG2d,WAAW,MAAwB,MAAlB3d,GAAGvE,IAAI3B,SAE1F4P,EAAOjO,MAAMuE,GAAGvE,MACPuE,GAAGvE,OAAOuE,GAAGwZ,YACP,QAAXxZ,GAAGvE,QACLiO,EAAOjO,MAAMtD,GAAA6Y,GAAGs7C,KAEH,QAAXtsD,GAAGvE,QACLiO,EAAOjO,MAAMtD,GAAA6Y,GAAGk6C,QAXC,OAAflrD,GAAG2d,YACLjU,EAAOzH,OAAO;uBA9BkD;AAElE,0BAAMssD,KAAaH,EAAqBpuD,GAAG2d,OAAAA,GACrCliB,KAAM8yD,QAAAA,KAAAA,SAAAA,GAAcvuD,GAAG2Z,WAAe,IAAJ,CAAA;AACxC,wBAAIle;AACFiO,wBAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAMxV;6BACbuE,GAAG2d,WAAW,MAAM3d,GAAG2d,WAAW,IAAI;AAC/C,4BAAMA,KAAU3d,GAAGwZ,UAAUxZ,GAAG2d,UAAU,KAAK3d,GAAG2d,UAAU;AAC5D,0BAAI6wC,KAAY1wC,OAAOC,aAAaJ,EAAAA;AAChC3d,sBAAAA,GAAG2Z,aACL60C,KAAYA,GAAUC,YAAAA,IAExB/kD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAMu9C;oBAAAA,WACE,OAAfxuD,GAAG2d;AACZjU,wBAAOjO,MAAMtD,GAAA6Y,GAAGC,OAAOjR,GAAGwZ,UAAUrhB,GAAA6Y,GAAGk6C,MAAM;6BACzB,WAAXlrD,GAAGvE,OAAkBuE,GAAG4vC,KAAKuN,WAAW,KAAA,GAAQ;AAMzD,0BAAIqR,KAAYxuD,GAAG4vC,KAAKjR,MAAM,GAAG,CAAA;AAC5B3+B,sBAAAA,GAAG2Z,aACN60C,KAAYA,GAAUE,YAAAA,IAExBhlD,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MAAMu9C,IACtB9kD,EAAOwQ,SAAAA;oBAAS;kBAAA;;AA1Cdla,kBAAAA,GAAG2d,WAAW,MAAM3d,GAAG2d,WAAW,KACpCjU,EAAOjO,MAAMqiB,OAAOC,aAAa/d,GAAG2d,UAAU,EAAA,IACtB,OAAf3d,GAAG2d,UACZjU,EAAOjO,MAAMtD,GAAA6Y,GAAGk6C,MACPlrD,GAAG2d,WAAW,MAAM3d,GAAG2d,WAAW,KAE3CjU,EAAOjO,MAAMqiB,OAAOC,aAAa/d,GAAG2d,UAAU,KAAK,EAAA,IAC3B,OAAf3d,GAAG2d,UACZjU,EAAOjO,MAAMtD,GAAA6Y,GAAGkY,MACQ,QAAflpB,GAAG2d,UACZjU,EAAOjO,MAAMtD,GAAA6Y,GAAGC,MACQ,QAAfjR,GAAG2d,UACZjU,EAAOjO,MAAMtD,GAAA6Y,GAAGm7C,KACQ,QAAfnsD,GAAG2d,YACZjU,EAAOjO,MAAMtD,GAAA6Y,GAAGo7C;YAAAA;AAgDxB,mBAAO1iD;UACT;QAAA,GAAA,KAAA,CAAAzR,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,cAAAA,GAAA,gBAAAA,GAAA,gBAAAA,GAAA,sBAAA,QChYAA,GAAA,sBAAA,SAAoC+vD,IAAAA;AAClC,mBAAIA,KAAY,SACdA,MAAa,OACNnqC,OAAOC,aAAiC,SAAnBkqC,MAAa,GAAA,IAAgBnqC,OAAOC,aAAckqC,KAAY,OAAS,KAAA,KAE9FnqC,OAAOC,aAAakqC,EAAAA;UAC7B,GAOA/vD,GAAA,gBAAA,SAA8B2iB,IAAmBhgB,KAAgB,GAAGC,KAAc+f,GAAK/gB,QAAAA;AACrF,gBAAI4P,KAAS;AACb,qBAAS3R,IAAI8C,IAAO9C,IAAI+C,IAAAA,EAAO/C,GAAG;AAChC,kBAAI48B,KAAY9Z,GAAK9iB,CAAAA;AACjB48B,cAAAA,KAAY,SAMdA,MAAa,OACbjrB,MAAUoU,OAAOC,aAAiC,SAAnB4W,MAAa,GAAA,IAAgB7W,OAAOC,aAAc4W,KAAY,OAAS,KAAA,KAEtGjrB,MAAUoU,OAAOC,aAAa4W,EAAAA;YAAAA;AAGlC,mBAAOjrB;UACT,GAMAxR,GAAA,gBAAA,MAAA;YAAA,cAAA;AACU,mBAAAy2D,WAAmB;YAkE7B;YA7DS9sD,QAAAA;AACLhJ,mBAAK81D,WAAW;YAClB;YAUOxX,OAAOruB,IAAexsB,IAAAA;AAC3B,oBAAMxC,KAASgvB,GAAMhvB;AAErB,kBAAA,CAAKA;AACH,uBAAO;AAGT,kBAAIgM,KAAO,GACP8oD,IAAW;AAGf,kBAAI/1D,KAAK81D,UAAU;AACjB,sBAAMpS,KAASzzB,GAAM1L,WAAWwxC,GAAAA;AAC5B,yBAAUrS,MAAUA,MAAU,QAChCjgD,GAAOwJ,IAAAA,IAAqC,QAA1BjN,KAAK81D,WAAW,SAAkBpS,KAAS,QAAS,SAGtEjgD,GAAOwJ,IAAAA,IAAUjN,KAAK81D,UACtBryD,GAAOwJ,IAAAA,IAAUy2C,KAEnB1jD,KAAK81D,WAAW;cAAA;AAGlB,uBAAS52D,IAAI62D,GAAU72D,IAAI+B,IAAAA,EAAU/B,GAAG;AACtC,sBAAM63C,KAAO9mB,GAAM1L,WAAWrlB,CAAAA;AAE9B,oBAAI,SAAU63C,MAAQA,MAAQ,OAA9B;AACE,sBAAA,EAAM73C,KAAK+B;AAET,2BADAjB,KAAK81D,WAAW/e,IACT9pC;AAET,wBAAMy2C,IAASzzB,GAAM1L,WAAWrlB,CAAAA;AAC5B,2BAAUwkD,KAAUA,KAAU,QAChCjgD,GAAOwJ,IAAAA,IAA4B,QAAjB8pC,KAAO,SAAkB2M,IAAS,QAAS,SAG7DjgD,GAAOwJ,IAAAA,IAAU8pC,IACjBtzC,GAAOwJ,IAAAA,IAAUy2C;gBAAAA;AAIR,4BAAT3M,OAIJtzC,GAAOwJ,IAAAA,IAAU8pC;cAAAA;AAEnB,qBAAO9pC;YACT;UAAA,GAMF5N,GAAA,cAAA,MAAA;YAAA,cAAA;AACS,mBAAA22D,UAAsB,IAAIC,WAAW,CAAA;YAgO9C;YA3NSjtD,QAAAA;AACLhJ,mBAAKg2D,QAAQ76B,KAAK,CAAA;YACpB;YAUOmjB,OAAOruB,IAAmBxsB,IAAAA;AAC/B,oBAAMxC,KAASgvB,GAAMhvB;AAErB,kBAAA,CAAKA;AACH,uBAAO;AAGT,kBACIi1D,IACAC,GACAC,GACAC,GAJAppD,IAAO,GAKP6uB,IAAY,GACZi6B,IAAW;AAGf,kBAAI/1D,KAAKg2D,QAAQ,CAAA,GAAI;AACnB,oBAAIM,KAAAA,OACApH,KAAKlvD,KAAKg2D,QAAQ,CAAA;AACtB9G,gBAAAA,MAAyB,QAAV,MAALA,MAAwB,KAAyB,QAAV,MAALA,MAAwB,KAAO;AAC3E,oBACIqH,IADAlvD,KAAM;AAEV,wBAAQkvD,KAA4B,KAAtBv2D,KAAKg2D,QAAAA,EAAU3uD,EAAAA,MAAgBA,KAAM;AACjD6nD,kBAAAA,OAAO,GACPA,MAAMqH;AAGR,sBAAMntD,KAAsC,QAAV,MAAlBpJ,KAAKg2D,QAAQ,CAAA,KAAwB,IAAmC,QAAV,MAAlBh2D,KAAKg2D,QAAQ,CAAA,KAAwB,IAAI,GAC/FQ,KAAUptD,KAAO/B;AACvB,uBAAO0uD,IAAWS,MAAS;AACzB,sBAAIT,KAAY90D;AACd,2BAAO;AAGT,sBADAs1D,KAAMtmC,GAAM8lC,GAAAA,GACS,QAAV,MAANQ,KAAsB;AAEzBR,yBACAO,KAAAA;AACA;kBAAA;AAGAt2D,uBAAKg2D,QAAQ3uD,IAAAA,IAASkvD,IACtBrH,OAAO,GACPA,MAAY,KAANqH;gBAAAA;AAGLD,gBAAAA,OAEU,MAATltD,KACE8lD,KAAK,MAEP6G,MAEAtyD,GAAOwJ,GAAAA,IAAUiiD,KAED,MAAT9lD,KACL8lD,KAAK,QAAWA,MAAM,SAAUA,MAAM,SAAkB,UAAPA,OAGnDzrD,GAAOwJ,GAAAA,IAAUiiD,MAGfA,KAAK,SAAYA,KAAK,YAGxBzrD,GAAOwJ,GAAAA,IAAUiiD,MAIvBlvD,KAAKg2D,QAAQ76B,KAAK,CAAA;cAAA;AAIpB,oBAAMs7B,IAAWx1D,KAAS;AAC1B,kBAAI/B,IAAI62D;AACR,qBAAO72D,IAAI+B,MAAQ;AAejB,uBAAA,EAAA,EAAO/B,IAAIu3D,MACiB,OAApBP,KAAQjmC,GAAM/wB,CAAAA,MACU,OAAxBi3D,IAAQlmC,GAAM/wB,IAAI,CAAA,MACM,OAAxBk3D,IAAQnmC,GAAM/wB,IAAI,CAAA,MACM,OAAxBm3D,IAAQpmC,GAAM/wB,IAAI,CAAA;AAExBuE,kBAAAA,GAAOwJ,GAAAA,IAAUipD,IACjBzyD,GAAOwJ,GAAAA,IAAUkpD,GACjB1yD,GAAOwJ,GAAAA,IAAUmpD,GACjB3yD,GAAOwJ,GAAAA,IAAUopD,GACjBn3D,KAAK;AAOP,oBAHAg3D,KAAQjmC,GAAM/wB,GAAAA,GAGVg3D,KAAQ;AACVzyD,kBAAAA,GAAOwJ,GAAAA,IAAUipD;yBAGW,QAAV,MAARA,KAAwB;AAClC,sBAAIh3D,KAAK+B;AAEP,2BADAjB,KAAKg2D,QAAQ,CAAA,IAAKE,IACXjpD;AAGT,sBADAkpD,IAAQlmC,GAAM/wB,GAAAA,GACS,QAAV,MAARi3D,IAAwB;AAE3Bj3D;AACA;kBAAA;AAGF,sBADA48B,KAAqB,KAARo6B,OAAiB,IAAa,KAARC,GAC/Br6B,IAAY,KAAM;AAEpB58B;AACA;kBAAA;AAEFuE,kBAAAA,GAAOwJ,GAAAA,IAAU6uB;gBAAAA,WAGW,QAAV,MAARo6B,KAAwB;AAClC,sBAAIh3D,KAAK+B;AAEP,2BADAjB,KAAKg2D,QAAQ,CAAA,IAAKE,IACXjpD;AAGT,sBADAkpD,IAAQlmC,GAAM/wB,GAAAA,GACS,QAAV,MAARi3D,IAAwB;AAE3Bj3D;AACA;kBAAA;AAEF,sBAAIA,KAAK+B;AAGP,2BAFAjB,KAAKg2D,QAAQ,CAAA,IAAKE,IAClBl2D,KAAKg2D,QAAQ,CAAA,IAAKG,GACXlpD;AAGT,sBADAmpD,IAAQnmC,GAAM/wB,GAAAA,GACS,QAAV,MAARk3D,IAAwB;AAE3Bl3D;AACA;kBAAA;AAGF,sBADA48B,KAAqB,KAARo6B,OAAiB,MAAc,KAARC,MAAiB,IAAa,KAARC,GACtDt6B,IAAY,QAAWA,KAAa,SAAUA,KAAa,SAAyB,UAAdA;AAExE;AAEFr4B,kBAAAA,GAAOwJ,GAAAA,IAAU6uB;gBAAAA,WAGW,QAAV,MAARo6B,KAAwB;AAClC,sBAAIh3D,KAAK+B;AAEP,2BADAjB,KAAKg2D,QAAQ,CAAA,IAAKE,IACXjpD;AAGT,sBADAkpD,IAAQlmC,GAAM/wB,GAAAA,GACS,QAAV,MAARi3D,IAAwB;AAE3Bj3D;AACA;kBAAA;AAEF,sBAAIA,KAAK+B;AAGP,2BAFAjB,KAAKg2D,QAAQ,CAAA,IAAKE,IAClBl2D,KAAKg2D,QAAQ,CAAA,IAAKG,GACXlpD;AAGT,sBADAmpD,IAAQnmC,GAAM/wB,GAAAA,GACS,QAAV,MAARk3D,IAAwB;AAE3Bl3D;AACA;kBAAA;AAEF,sBAAIA,KAAK+B;AAIP,2BAHAjB,KAAKg2D,QAAQ,CAAA,IAAKE,IAClBl2D,KAAKg2D,QAAQ,CAAA,IAAKG,GAClBn2D,KAAKg2D,QAAQ,CAAA,IAAKI,GACXnpD;AAGT,sBADAopD,IAAQpmC,GAAM/wB,GAAAA,GACS,QAAV,MAARm3D,IAAwB;AAE3Bn3D;AACA;kBAAA;AAGF,sBADA48B,KAAqB,IAARo6B,OAAiB,MAAc,KAARC,MAAiB,MAAc,KAARC,MAAiB,IAAa,KAARC,GAC7Ev6B,IAAY,SAAYA,IAAY;AAEtC;AAEFr4B,kBAAAA,GAAOwJ,GAAAA,IAAU6uB;gBAAAA;cAAAA;AAKrB,qBAAO7uB;YACT;UAAA;QAAA,GAAA,KAAA,CAAA7N,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,YAAA;AChVF,gBAAMq3D,KAAgB,CACpB,CAAC,KAAQ,GAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,OAAQ,KAAA,GAC7C,CAAC,OAAQ,KAAA,GAAS,CAAC,OAAQ,KAAA,GAAS,CAAC,OAAQ,KAAA,GAC7C,CAAC,OAAQ,KAAA,GAAS,CAAC,OAAQ,KAAA,GAAS,CAAC,OAAQ,KAAA,GAC7C,CAAC,OAAQ,KAAA,GAAS,CAAC,OAAQ,KAAA,GAAS,CAAC,OAAQ,KAAA,CAAA,GAEzCC,KAAiB,CACrB,CAAC,OAAS,KAAA,GAAU,CAAC,OAAS,KAAA,GAAU,CAAC,OAAS,KAAA,GAClD,CAAC,OAAS,KAAA,GAAU,CAAC,OAAS,KAAA,GAAU,CAAC,QAAS,MAAA,GAClD,CAAC,QAAS,MAAA,GAAU,CAAC,QAAS,MAAA,GAAU,CAAC,QAAS,MAAA,GAClD,CAAC,QAAS,MAAA,GAAU,CAAC,QAAS,MAAA,GAAU,CAAC,QAAS,MAAA,GAClD,CAAC,QAAS,MAAA,CAAA;AAIZ,cAAIC;AAsBJ,UAAAv3D,GAAA,YAAA,MAAA;YAGEI,cAAAA;AAEE,kBAJc,KAAAo3D,UAAU,KAAA,CAInBD,GAAO;AACVA,oBAAQ,IAAIX,WAAW,KAAA,GACvBW,EAAMz7B,KAAK,CAAA,GACXy7B,EAAM,CAAA,IAAK,GAEXA,EAAMz7B,KAAK,GAAG,GAAG,EAAA,GACjBy7B,EAAMz7B,KAAK,GAAG,KAAM,GAAA,GAIpBy7B,EAAMz7B,KAAK,GAAG,MAAQ,IAAA,GACtBy7B,EAAM,IAAA,IAAU,GAChBA,EAAM,IAAA,IAAU,GAChBA,EAAMz7B,KAAK,GAAG,OAAQ,KAAA,GACtBy7B,EAAM,KAAA,IAAU,GAEhBA,EAAMz7B,KAAK,GAAG,OAAQ,KAAA,GACtBy7B,EAAMz7B,KAAK,GAAG,OAAQ,KAAA,GACtBy7B,EAAMz7B,KAAK,GAAG,OAAQ,KAAA,GACtBy7B,EAAMz7B,KAAK,GAAG,OAAQ,KAAA,GACtBy7B,EAAMz7B,KAAK,GAAG,OAAQ,KAAA,GACtBy7B,EAAMz7B,KAAK,GAAG,OAAQ,KAAA;AAOtB,yBAAS1xB,KAAI,GAAGA,KAAIitD,GAAcz1D,QAAAA,EAAUwI;AAC1CmtD,oBAAMz7B,KAAK,GAAGu7B,GAAcjtD,EAAAA,EAAG,CAAA,GAAIitD,GAAcjtD,EAAAA,EAAG,CAAA,IAAK,CAAA;cAAA;YAG/D;YAEOw1C,QAAQ6X,IAAAA;AACb,qBAAIA,KAAM,KAAW,IACjBA,KAAM,MAAY,IAClBA,KAAM,QAAcF,EAAME,EAAAA,IA9DlC,SAAkBC,IAAa/0C,IAAAA;AAC7B,oBAEIkkC,IAFAtyC,KAAM,GACNE,KAAMkO,GAAK/gB,SAAS;AAExB,oBAAI81D,KAAM/0C,GAAK,CAAA,EAAG,CAAA,KAAM+0C,KAAM/0C,GAAKlO,EAAAA,EAAK,CAAA;AACtC,yBAAA;AAEF,uBAAOA,MAAOF;AAEZ,sBADAsyC,KAAOtyC,KAAME,MAAQ,GACjBijD,KAAM/0C,GAAKkkC,EAAAA,EAAK,CAAA;AAClBtyC,oBAAAA,KAAMsyC,KAAM;uBACP;AAAA,wBAAA,EAAI6Q,KAAM/0C,GAAKkkC,EAAAA,EAAK,CAAA;AAGzB,6BAAA;AAFApyC,oBAAAA,KAAMoyC,KAAM;kBAAA;AAKhB,uBAAA;cACF,EA6CiB4Q,IAAKH,EAAAA,IAAwB,IACrCG,MAAO,UAAWA,MAAO,UAAaA,MAAO,UAAWA,MAAO,SAAiB,IAC9E;YACT;UAAA;QAAA,GAAA,MAAA,CAAA13D,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,cAAA;AC5HF,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA;AA6BA,gBAAaqxC,UAAoB,EAAA/wC,WAAAA;YAY/BC,YAAoBu3D,IAAAA;AAClBp3D,oBAAAA,GADkB,KAAAo3D,UAAAA,IAXZ,KAAA9mB,eAAwC,CAAA,GACxC,KAAA+mB,aAA2C,CAAA,GAC3C,KAAAC,eAAe,GACf,KAAAC,gBAAgB,GAChB,KAAAC,iBAAAA,OACA,KAAAC,aAAa,GACb,KAAAC,gBAAAA,OAES,KAAAvoB,iBAAiB/uC,KAAK4B,SAAS,IAAItC,GAAA6K,cAAAA,GACpC,KAAA6kC,gBAAgBhvC,KAAK+uC,eAAe1kC;YAIpD;YAEO8lC,kBAAAA;AACLnwC,mBAAKs3D,gBAAAA;YACP;YAKOzmB,UAAU7uB,IAA2B8uB,IAAAA;AAI1C,kBAAA,WAAIA,MAAoC9wC,KAAKq3D,aAAavmB;AAIxD,uBAAA,MADA9wC,KAAKq3D,aAAa;AAWpB,kBAPAr3D,KAAKk3D,gBAAgBl1C,GAAK/gB,QAC1BjB,KAAKkwC,aAAa3rC,KAAKyd,EAAAA,GACvBhiB,KAAKi3D,WAAW1yD,KAAAA,MAAKkL,GAGrBzP,KAAKq3D,cAEDr3D,KAAKo3D;AACP;AAQF,kBAAIG;AACJ,mBAPAv3D,KAAKo3D,iBAAAA,MAOEG,KAAQv3D,KAAKkwC,aAAa/rC,MAAAA,KAAS;AACxCnE,qBAAKg3D,QAAQO,EAAAA;AACb,sBAAMC,KAAKx3D,KAAKi3D,WAAW9yD,MAAAA;AACvBqzD,gBAAAA,MAAIA,GAAAA;cAAAA;AAIVx3D,mBAAKk3D,eAAe,GACpBl3D,KAAKm3D,gBAAgB,YAGrBn3D,KAAKo3D,iBAAAA,OACLp3D,KAAKq3D,aAAa;YACpB;YAEOzmB,MAAM5uB,IAA2BrR,IAAAA;AACtC,kBAAI3Q,KAAKk3D,eApFa;AAqFpB,sBAAM,IAAIx1D,MAAM,6DAAA;AAIlB,kBAAA,CAAK1B,KAAKkwC,aAAajvC,QAAQ;AAM7B,oBALAjB,KAAKm3D,gBAAgB,GAKjBn3D,KAAKs3D;AAMP,yBALAt3D,KAAKs3D,gBAAAA,OACLt3D,KAAKk3D,gBAAgBl1C,GAAK/gB,QAC1BjB,KAAKkwC,aAAa3rC,KAAKyd,EAAAA,GACvBhiB,KAAKi3D,WAAW1yD,KAAKoM,EAAAA,GAAAA,KACrB3Q,KAAKy3D,YAAAA;AAIPryD,2BAAW,MAAMpF,KAAKy3D,YAAAA,CAAAA;cAAAA;AAGxBz3D,mBAAKk3D,gBAAgBl1C,GAAK/gB,QAC1BjB,KAAKkwC,aAAa3rC,KAAKyd,EAAAA,GACvBhiB,KAAKi3D,WAAW1yD,KAAKoM,EAAAA;YACvB;YA8BU8mD,YAAYC,KAAmB,GAAGlnB,KAAAA,MAAyB;AACnE,oBAAM7oB,KAAY+vC,MAAYlxC,KAAKC,IAAAA;AACnC,qBAAOzmB,KAAKkwC,aAAajvC,SAASjB,KAAKm3D,iBAAe;AACpD,sBAAMn1C,KAAOhiB,KAAKkwC,aAAalwC,KAAKm3D,aAAAA,GAC9BtmD,KAAS7Q,KAAKg3D,QAAQh1C,IAAMwuB,EAAAA;AAClC,oBAAI3/B,IAAQ;AAuBV,wBAAM8mD,KAAsCluD,CAAAA,OAAe+c,KAAKC,IAAAA,IAAQkB,MAhKvD,KAiKbviB,WAAW,MAAMpF,KAAKy3D,YAAY,GAAGhuD,EAAAA,CAAAA,IACrCzJ,KAAKy3D,YAAY9vC,IAAWle,EAAAA;AA0BhC,yBAAA,KAJAoH,GAAOgtC,MAAMC,CAAAA,QACXze,eAAe,MAAA;AAAO,0BAAMye;kBAAG,CAAA,GACxBL,QAAQma,QAAAA,KAAQ,EAAA,EACtBC,KAAKF,EAAAA;gBAAAA;AAIV,sBAAMH,KAAKx3D,KAAKi3D,WAAWj3D,KAAKm3D,aAAAA;AAKhC,oBAJIK,MAAIA,GAAAA,GACRx3D,KAAKm3D,iBACLn3D,KAAKk3D,gBAAgBl1C,GAAK/gB,QAEtBulB,KAAKC,IAAAA,IAAQkB,MApME;AAqMjB;cAAA;AAGA3nB,mBAAKkwC,aAAajvC,SAASjB,KAAKm3D,iBAG9Bn3D,KAAKm3D,gBApMuB,OAqM9Bn3D,KAAKkwC,eAAelwC,KAAKkwC,aAAapK,MAAM9lC,KAAKm3D,aAAAA,GACjDn3D,KAAKi3D,aAAaj3D,KAAKi3D,WAAWnxB,MAAM9lC,KAAKm3D,aAAAA,GAC7Cn3D,KAAKm3D,gBAAgB,IAEvB/xD,WAAW,MAAMpF,KAAKy3D,YAAAA,CAAAA,MAEtBz3D,KAAKkwC,aAAajvC,SAAS,GAC3BjB,KAAKi3D,WAAWh2D,SAAS,GACzBjB,KAAKk3D,eAAe,GACpBl3D,KAAKm3D,gBAAgB,IAEvBn3D,KAAK+uC,eAAer/B,KAAAA;YACtB;UAAA;AA/MF,UAAArQ,GAAA,cAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,cAAAA,GAAA,aAAA;AC7BA,gBAAMy4D,KAAU,sKAEVC,KAAW;AAiDjB,mBAASC,EAAItuD,IAAWuuD,IAAAA;AACtB,kBAAM34D,KAAIoK,GAAEjE,SAAS,EAAA,GACfyyD,KAAK54D,GAAE2B,SAAS,IAAI,MAAM3B,KAAIA;AACpC,oBAAQ24D,IAAAA;cACN,KAAK;AACH,uBAAO34D,GAAE,CAAA;cACX,KAAK;AACH,uBAAO44D;cACT,KAAK;AACH,wBAAQA,KAAKA,IAAIpyB,MAAM,GAAG,CAAA;cAC5B;AACE,uBAAOoyB,KAAKA;YAAAA;UAElB;AAjDA,UAAA74D,GAAA,aAAA,SAA2B2iB,IAAAA;AACzB,gBAAA,CAAKA;AAAM;AAEX,gBAAIm2C,KAAMn2C,GAAK6zC,YAAAA;AACf,gBAA4B,MAAxBsC,GAAIptD,QAAQ,MAAA,GAAe;AAE7BotD,cAAAA,KAAMA,GAAIryB,MAAM,CAAA;AAChB,oBAAMkc,KAAI8V,GAAQ/T,KAAKoU,EAAAA;AACvB,kBAAInW,IAAG;AACL,sBAAMoW,KAAOpW,GAAE,CAAA,IAAK,KAAKA,GAAE,CAAA,IAAK,MAAMA,GAAE,CAAA,IAAK,OAAO;AACpD,uBAAO,CACLruC,KAAKkV,MAAMmI,SAASgxB,GAAE,CAAA,KAAMA,GAAE,CAAA,KAAMA,GAAE,CAAA,KAAMA,GAAE,EAAA,GAAK,EAAA,IAAMoW,KAAO,GAAA,GAChEzkD,KAAKkV,MAAMmI,SAASgxB,GAAE,CAAA,KAAMA,GAAE,CAAA,KAAMA,GAAE,CAAA,KAAMA,GAAE,EAAA,GAAK,EAAA,IAAMoW,KAAO,GAAA,GAChEzkD,KAAKkV,MAAMmI,SAASgxB,GAAE,CAAA,KAAMA,GAAE,CAAA,KAAMA,GAAE,CAAA,KAAMA,GAAE,EAAA,GAAK,EAAA,IAAMoW,KAAO,GAAA,CAAA;cAAA;YAAA,WAGtC,MAArBD,GAAIptD,QAAQ,GAAA,MAErBotD,KAAMA,GAAIryB,MAAM,CAAA,GACZiyB,GAAShU,KAAKoU,EAAAA,KAAQ,CAAC,GAAG,GAAG,GAAG,EAAA,EAAIlmD,SAASkmD,GAAIl3D,MAAAA,IAAS;AAC5D,oBAAMo3D,KAAMF,GAAIl3D,SAAS,GACnB4P,KAAmC,CAAC,GAAG,GAAG,CAAA;AAChD,uBAAS3R,KAAI,GAAGA,KAAI,GAAA,EAAKA,IAAG;AAC1B,sBAAMyuB,KAAIqD,SAASmnC,GAAIryB,MAAMuyB,KAAMn5D,IAAGm5D,KAAMn5D,KAAIm5D,EAAAA,GAAM,EAAA;AACtDxnD,gBAAAA,GAAO3R,EAAAA,IAAa,MAARm5D,KAAY1qC,MAAK,IAAY,MAAR0qC,KAAY1qC,KAAY,MAAR0qC,KAAY1qC,MAAK,IAAIA,MAAK;cAAA;AAE7E,qBAAO9c;YAAAA;UAOb,GAqBAxR,GAAA,cAAA,SAA4B0Y,IAAiCkgD,KAAe,IAAA;AAC1E,kBAAA,CAAOxuD,IAAG09B,IAAGC,CAAAA,IAAKrvB;AAClB,mBAAO,OAAOigD,EAAIvuD,IAAGwuD,EAAAA,KAASD,EAAI7wB,IAAG8wB,EAAAA,KAASD,EAAI5wB,GAAG6wB,EAAAA;UACvD;QAAA,GAAA,MAAA,CAAA74D,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,gBAAA,QCtBaA,GAAAi5D,gBAAgB;QAAA,GAAA,MAAA,CAAAl5D,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAAA,GAAA,YAAA;AClD7B,gBAAAC,KAAAJ,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEMq5D,IAAgC,CAAA;AAEtC,UAAAl5D,GAAA,YAAA,MAAA;YAAA,cAAA;AACU,mBAAAm5D,YAA6C1pD,uBAAO2pD,OAAO,IAAA,GAC3D,KAAAC,UAAyBH,GACzB,KAAAI,SAAiB,GACjB,KAAAC,aAAqC,MAAA;cAAA,GACrC,KAAAC,SAA+B,EACrC5iB,QAAAA,OACA6iB,cAAc,GACdC,aAAAA,MAAa;YA8GjB;YA3GSvvD,UAAAA;AACLxJ,mBAAKw4D,YAAY1pD,uBAAO2pD,OAAO,IAAA,GAC/Bz4D,KAAK44D,aAAa,MAAA;cAAA,GAClB54D,KAAK04D,UAAUH;YACjB;YAEOS,gBAAgBnhD,IAAexO,IAAAA;AAAAA,yBAChCrJ,KAAKw4D,UAAU3gD,EAAAA,MACjB7X,KAAKw4D,UAAU3gD,EAAAA,IAAS,CAAA;AAE1B,oBAAMohD,KAAcj5D,KAAKw4D,UAAU3gD,EAAAA;AAEnC,qBADAohD,GAAY10D,KAAK8E,EAAAA,GACV,EACLG,SAAS,MAAA;AACP,sBAAM0vD,KAAeD,GAAYluD,QAAQ1B,EAAAA;AAAAA,uBACrC6vD,MACFD,GAAYjuD,OAAOkuD,IAAc,CAAA;cAAA,EAAA;YAIzC;YAEOC,aAAathD,IAAAA;AACd7X,mBAAKw4D,UAAU3gD,EAAAA,KAAAA,OAAe7X,KAAKw4D,UAAU3gD,EAAAA;YACnD;YAEOuhD,mBAAmB/vD,IAAAA;AACxBrJ,mBAAK44D,aAAavvD;YACpB;YAEO2N,QAAAA;AAEL,kBAAIhX,KAAK04D,QAAQz3D;AACf,yBAAS6M,KAAI9N,KAAK64D,OAAO5iB,SAASj2C,KAAK64D,OAAOC,eAAe,IAAI94D,KAAK04D,QAAQz3D,SAAS,GAAG6M,MAAK,GAAA,EAAKA;AAClG9N,uBAAK04D,QAAQ5qD,EAAAA,EAAGurD,OAAAA,KAAO;AAG3Br5D,mBAAK64D,OAAO5iB,SAAAA,OACZj2C,KAAK04D,UAAUH,GACfv4D,KAAK24D,SAAS;YAChB;YAEOW,KAAKzhD,IAAe4+B,IAAAA;AAKzB,kBAHAz2C,KAAKgX,MAAAA,GACLhX,KAAK24D,SAAS9gD,IACd7X,KAAK04D,UAAU14D,KAAKw4D,UAAU3gD,EAAAA,KAAU0gD,GACnCv4D,KAAK04D,QAAQz3D;AAGhB,yBAAS6M,KAAI9N,KAAK04D,QAAQz3D,SAAS,GAAG6M,MAAK,GAAGA;AAC5C9N,uBAAK04D,QAAQ5qD,EAAAA,EAAGwrD,KAAK7iB,EAAAA;;AAHvBz2C,qBAAK44D,WAAW54D,KAAK24D,QAAQ,QAAQliB,EAAAA;YAMzC;YAEO8iB,IAAIv3C,IAAmBhgB,IAAeC,IAAAA;AAC3C,kBAAKjC,KAAK04D,QAAQz3D;AAGhB,yBAAS6M,KAAI9N,KAAK04D,QAAQz3D,SAAS,GAAG6M,MAAK,GAAGA;AAC5C9N,uBAAK04D,QAAQ5qD,EAAAA,EAAGyrD,IAAIv3C,IAAMhgB,IAAOC,EAAAA;;AAHnCjC,qBAAK44D,WAAW54D,KAAK24D,QAAQ,QAAO,GAAAr5D,GAAAk6D,eAAcx3C,IAAMhgB,IAAOC,EAAAA,CAAAA;YAMnE;YAEOo3D,OAAOI,IAAkBjpB,KAAAA,MAAyB;AACvD,kBAAKxwC,KAAK04D,QAAQz3D,QAEX;AACL,oBAAIy4D,KAAAA,OACA5rD,KAAI9N,KAAK04D,QAAQz3D,SAAS,GAC1B83D,KAAAA;AAOJ,oBANI/4D,KAAK64D,OAAO5iB,WACdnoC,KAAI9N,KAAK64D,OAAOC,eAAe,GAC/BY,KAAgBlpB,IAChBuoB,KAAc/4D,KAAK64D,OAAOE,aAC1B/4D,KAAK64D,OAAO5iB,SAAAA,QAAS,CAElB8iB,MAAAA,UAAeW,IAAyB;AAC3C,yBAAO5rD,MAAK,MACV4rD,KAAgB15D,KAAK04D,QAAQ5qD,EAAAA,EAAGurD,OAAOI,EAAAA,GAAAA,SACnCC,KAFS5rD;AAIN,wBAAI4rD,cAAyBjc;AAIlC,6BAHAz9C,KAAK64D,OAAO5iB,SAAAA,MACZj2C,KAAK64D,OAAOC,eAAehrD,IAC3B9N,KAAK64D,OAAOE,cAAAA,OACLW;AAGX5rD,kBAAAA;gBAAAA;AAGF,uBAAOA,MAAK,GAAGA;AAEb,sBADA4rD,KAAgB15D,KAAK04D,QAAQ5qD,EAAAA,EAAGurD,OAAAA,KAAO,GACnCK,cAAyBjc;AAI3B,2BAHAz9C,KAAK64D,OAAO5iB,SAAAA,MACZj2C,KAAK64D,OAAOC,eAAehrD,IAC3B9N,KAAK64D,OAAOE,cAAAA,MACLW;cAAAA;AAhCX15D,qBAAK44D,WAAW54D,KAAK24D,QAAQ,UAAUc,EAAAA;AAoCzCz5D,mBAAK04D,UAAUH,GACfv4D,KAAK24D,SAAS;YAChB;UAAA;AAIF,gBAAMgB,IAAe,IAAI,EAAAC;AACzBD,YAAaE,SAAS,CAAA,GAMtBx6D,GAAA,aAAA,MAAA;YAKEI,YAAoBq6D,IAAAA;AAAA,mBAAAA,WAAAA,IAJZ,KAAA3U,QAAQ,IACR,KAAA4U,UAAmBJ,GACnB,KAAAK,YAAAA;YAEuF;YAExFV,KAAK7iB,IAAAA;AAKVz2C,mBAAK+5D,UAAWtjB,GAAOx1C,SAAS,KAAKw1C,GAAOA,OAAO,CAAA,IAAMA,GAAOnL,MAAAA,IAAUquB,GAC1E35D,KAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA;YACP;YAEOT,IAAIv3C,IAAmBhgB,IAAeC,IAAAA;AACvCjC,mBAAKg6D,cAGTh6D,KAAKmlD,UAAS,GAAA7lD,GAAAk6D,eAAcx3C,IAAMhgB,IAAOC,EAAAA,GACrCjC,KAAKmlD,MAAMlkD,SAAS,EAAAq3D,kBACtBt4D,KAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA;YAET;YAEOX,OAAOI,IAAAA;AACZ,kBAAIQ,KAAAA;AACJ,kBAAIj6D,KAAKg6D;AACPC,gBAAAA,KAAAA;uBACSR,OACTQ,KAAMj6D,KAAK85D,SAAS95D,KAAKmlD,OAAOnlD,KAAK+5D,OAAAA,GACjCE,cAAexc;AAGjB,uBAAOwc,GAAIpC,KAAKla,CAAAA,QACd39C,KAAK+5D,UAAUJ,GACf35D,KAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA,OACErc,GAAAA;AAOb,qBAHA39C,KAAK+5D,UAAUJ,GACf35D,KAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA,OACEC;YACT;UAAA;QAAA,GAAA,MAAA,CAAA76D,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,uBAAAA,GAAA,yBAAAA,GAAA,kBAAA;ACvLF,gBAAAC,KAAAJ,GAAA,GAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAgBA,gBAAag7D,EAAAA;YAGXz6D,YAAYwB,IAAAA;AACVjB,mBAAK42D,QAAQ,IAAIX,WAAWh1D,EAAAA;YAC9B;YAOOk5D,WAAWj6C,IAAsB2uC,IAAAA;AACtC7uD,mBAAK42D,MAAMz7B,KAAKjb,MAAU,IAAsC2uC,EAAAA;YAClE;YASOxuD,IAAI02C,IAAcvoC,IAAoB0R,IAAsB2uC,IAAAA;AACjE7uD,mBAAK42D,MAAMpoD,MAAS,IAAgCuoC,EAAAA,IAAQ72B,MAAU,IAAsC2uC;YAC9G;YASOuL,QAAQC,IAAiB7rD,IAAoB0R,IAAsB2uC,IAAAA;AACxE,uBAAS3vD,KAAI,GAAGA,KAAIm7D,GAAMp5D,QAAQ/B;AAChCc,qBAAK42D,MAAMpoD,MAAS,IAAgC6rD,GAAMn7D,EAAAA,CAAAA,IAAMghB,MAAU,IAAsC2uC;YAEpH;UAAA;AAtCF,UAAAxvD,GAAA,kBAAA;AA2CA,gBAAMi7D,IAAsB;AAOf,UAAAj7D,GAAAk7D,yBAAyB,WAAA;AACpC,kBAAM3D,KAAyB,IAAIsD,EAAgB,IAAA,GAI7CM,KAAYlwB,MAAMmwB,MAAM,MAAMnwB,MADhB,GAAA,CAAA,EACoCt9B,IAAI,CAAC0tD,IAAax7D,OAAcA,EAAAA,GAClFuK,KAAI,CAACzH,IAAeC,OAA0Bu4D,GAAU10B,MAAM9jC,IAAOC,EAAAA,GAGrE04D,KAAalxD,GAAE,IAAM,GAAA,GACrBmxD,KAAcnxD,GAAE,GAAM,EAAA;AAC5BmxD,YAAAA,GAAYr2D,KAAK,EAAA,GACjBq2D,GAAYr2D,KAAKk2D,MAAMG,IAAanxD,GAAE,IAAM,EAAA,CAAA;AAE5C,kBAAMoxD,KAAmBpxD,GAAE,GAAoB,EAAA;AAC/C,gBAAI+E;AAOJ,iBAAKA,MAJLooD,GAAMuD,WAAW,GAAD,CAAA,GAEhBvD,GAAMwD,QAAQO,IAAY,GAAF,GAAA,CAAA,GAEVE;AACZjE,cAAAA,GAAMwD,QAAQ,CAAC,IAAM,IAAM,KAAM,GAAA,GAAO5rD,IAAO,GAAF,CAAA,GAC7CooD,GAAMwD,QAAQ3wD,GAAE,KAAM,GAAA,GAAO+E,IAAO,GAAF,CAAA,GAClCooD,GAAMwD,QAAQ3wD,GAAE,KAAM,GAAA,GAAO+E,IAAO,GAAF,CAAA,GAClCooD,GAAMv2D,IAAI,KAAMmO,IAAO,GAAF,CAAA,GACrBooD,GAAMv2D,IAAI,IAAMmO,IAAO,IAAF,CAAA,GACrBooD,GAAMv2D,IAAI,KAAMmO,IAAO,GAAF,CAAA,GACrBooD,GAAMwD,QAAQ,CAAC,KAAM,KAAM,GAAA,GAAO5rD,IAAO,GAAF,CAAA,GACvCooD,GAAMv2D,IAAI,KAAMmO,IAAO,IAAF,CAAA,GACrBooD,GAAMv2D,IAAI,KAAMmO,IAAO,IAAF,CAAA;AAuFvB,mBApFAooD,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GAEdu2D,GAAMv2D,IAAI,IAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQO,IAAY,GAAF,GAAA,CAAA,GACxB/D,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQ,CAAC,KAAM,IAAM,IAAM,IAAM,CAAA,GAAO,GAAF,GAAA,CAAA,GAC5CxD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAE3BmtD,GAAMwD,QAAQ,CAAC,IAAM,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAChCxD,GAAMwD,QAAQO,IAAY,GAAF,GAAA,CAAA,GACxB/D,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GAEdu2D,GAAMv2D,IAAI,IAAM,GAAF,IAAA,CAAA,GACdu2D,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ,CAAC,IAAM,IAAM,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GACtCxD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ,CAAC,IAAM,IAAM,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GACtCxD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAE3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,GAAF,IAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,IAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,IAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ,CAAC,IAAM,IAAM,EAAA,GAAO,GAAF,IAAA,CAAA,GAChCxD,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,GAAF,IAAA,CAAA,GAE3BmtD,GAAMv2D,IAAI,IAAM,GAAF,IAAA,CAAA,GACdu2D,GAAMwD,QAAQQ,IAAa,GAAF,GAAA,CAAA,GACzBhE,GAAMv2D,IAAI,KAAM,GAAF,GAAA,CAAA,GACdu2D,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,CAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,GAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ,CAAC,IAAM,IAAM,IAAM,EAAA,GAAO,GAAF,GAAA,EAAA,GACtCxD,GAAMwD,QAAQQ,IAAa,IAAF,GAAA,EAAA,GACzBhE,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQQ,IAAa,IAAF,GAAA,EAAA,GACzBhE,GAAMv2D,IAAI,KAAM,IAAF,GAAA,EAAA,GACdu2D,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ,CAAC,IAAM,IAAM,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GACtCxD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQQ,IAAa,IAAF,GAAA,EAAA,GACzBhE,GAAMv2D,IAAI,KAAM,IAAF,GAAA,EAAA,GACdu2D,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,EAAA,GAAO,IAAF,GAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,IAAF,IAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,IAAF,IAAA,EAAA,GAC3BmtD,GAAMwD,QAAQ3wD,GAAE,IAAM,GAAA,GAAO,GAAF,IAAA,EAAA,GAC3BmtD,GAAMwD,QAAQQ,IAAa,IAAF,IAAA,EAAA,GACzBhE,GAAMwD,QAAQO,IAAY,IAAF,IAAA,EAAA,GACxB/D,GAAMv2D,IAAI,KAAM,IAAF,GAAA,EAAA,GACdu2D,GAAMwD,QAAQ,CAAC,IAAM,KAAM,IAAM,EAAA,GAAO,IAAF,IAAA,CAAA,GAEtCxD,GAAMv2D,IAAIi6D,GAAqB,GAAF,GAAA,CAAA,GAC7B1D,GAAMv2D,IAAIi6D,GAAqB,GAAF,GAAA,CAAA,GAC7B1D,GAAMv2D,IAAIi6D,GAAqB,GAAF,GAAA,CAAA,GAC7B1D,GAAMv2D,IAAIi6D,GAAqB,IAAF,GAAA,EAAA,GAC7B1D,GAAMv2D,IAAIi6D,GAAqB,IAAF,IAAA,EAAA,GACtB1D;UACR,EAvHqC;AAwJtC,gBAAaliB,UAA6Bp1C,GAAAE,WAAAA;YAkCxCC,YACqBq7D,KAAgCz7D,GAAAk7D,wBAAAA;AAEnD36D,oBAAAA,GAFmB,KAAAk7D,eAAAA,IATX,KAAA9kB,cAAiC,EACzCxnC,OAAO,GACPusD,UAAU,CAAA,GACVC,YAAY,GACZC,YAAY,GACZC,UAAU,EAAA,GAQVl7D,KAAKm7D,eAAe,GACpBn7D,KAAKo7D,eAAep7D,KAAKm7D,cACzBn7D,KAAK+5D,UAAU,IAAI,EAAAH,UACnB55D,KAAK+5D,QAAQF,SAAS,CAAA,GACtB75D,KAAKq7D,WAAW,GAChBr7D,KAAK0/C,qBAAqB,GAG1B1/C,KAAKs7D,kBAAkB,CAACt5C,IAAMhgB,IAAOC,OAAAA;cAAd,GACvBjC,KAAKu7D,oBAAqBxkB,CAAAA,OAAAA;cAAD,GACzB/2C,KAAKw7D,gBAAgB,CAAC3jD,IAAe4+B,OAAAA;cAAhB,GACrBz2C,KAAKy7D,gBAAiB5jD,CAAAA,OAAAA;cAAD,GACrB7X,KAAK07D,kBAAmBltD,CAAAA,OAAwCA,IAChExO,KAAK27D,gBAAgB37D,KAAKs7D,iBAC1Bt7D,KAAK47D,mBAAmB9sD,uBAAO2pD,OAAO,IAAA,GACtCz4D,KAAK67D,eAAe/sD,uBAAO2pD,OAAO,IAAA,GAClCz4D,KAAK87D,eAAehtD,uBAAO2pD,OAAO,IAAA,GAClCz4D,KAAK4B,UAAS,GAAAtC,GAAA+D,cAAa,MAAA;AACzBrD,qBAAK67D,eAAe/sD,uBAAO2pD,OAAO,IAAA,GAClCz4D,KAAK47D,mBAAmB9sD,uBAAO2pD,OAAO,IAAA,GACtCz4D,KAAK87D,eAAehtD,uBAAO2pD,OAAO,IAAA;cAAK,CAAA,CAAA,GAEzCz4D,KAAK+7D,aAAa/7D,KAAK4B,SAAS,IAAI,EAAAo6D,WAAAA,GACpCh8D,KAAKi8D,aAAaj8D,KAAK4B,SAAS,IAAI,EAAAs6D,WAAAA,GACpCl8D,KAAKm8D,gBAAgBn8D,KAAK07D,iBAG1B17D,KAAK0xC,mBAAmB,EAAEQ,OAAO,KAAA,GAAQ,MAAA,IAAM;YACjD;YAEUkqB,YAAY3+B,IAAyB4+B,KAAuB,CAAC,IAAM,GAAA,GAAA;AAC3E,kBAAI1e,KAAM;AACV,kBAAIlgB,GAAG0a,QAAQ;AACb,oBAAI1a,GAAG0a,OAAOl3C,SAAS;AACrB,wBAAM,IAAIS,MAAM,mCAAA;AAGlB,oBADAi8C,KAAMlgB,GAAG0a,OAAO5zB,WAAW,CAAA,GACvBo5B,MAAO,KAAOA,MAAOA,KAAM;AAC7B,wBAAM,IAAIj8C,MAAM,sCAAA;cAAA;AAGpB,kBAAI+7B,GAAG6Z,eAAe;AACpB,oBAAI7Z,GAAG6Z,cAAcr2C,SAAS;AAC5B,wBAAM,IAAIS,MAAM,+CAAA;AAElB,yBAASxC,KAAI,GAAGA,KAAIu+B,GAAG6Z,cAAcr2C,QAAAA,EAAU/B,IAAG;AAChD,wBAAMo9D,KAAe7+B,GAAG6Z,cAAc/yB,WAAWrlB,EAAAA;AACjD,sBAAI,KAAOo9D,MAAgBA,KAAe;AACxC,0BAAM,IAAI56D,MAAM,4CAAA;AAElBi8C,kBAAAA,OAAQ,GACRA,MAAO2e;gBAAAA;cAAAA;AAGX,kBAAwB,MAApB7+B,GAAGyU,MAAMjxC;AACX,sBAAM,IAAIS,MAAM,6BAAA;AAElB,oBAAM66D,KAAY9+B,GAAGyU,MAAM3tB,WAAW,CAAA;AACtC,kBAAI83C,GAAW,CAAA,IAAKE,MAAaA,KAAYF,GAAW,CAAA;AACtD,sBAAM,IAAI36D,MAAM,0BAA0B26D,GAAW,CAAA,QAASA,GAAW,CAAA,GAAA;AAK3E,qBAHA1e,OAAQ,GACRA,MAAO4e,IAEA5e;YACT;YAEOhH,cAAc9+B,IAAAA;AACnB,oBAAM8lC,KAAgB,CAAA;AACtB,qBAAO9lC;AACL8lC,gBAAAA,GAAIp5C,KAAK0gB,OAAOC,aAAqB,MAARrN,EAAAA,CAAAA,GAC7BA,OAAU;AAEZ,qBAAO8lC,GAAI6e,QAAAA,EAAUnjC,KAAK,EAAA;YAC5B;YAEO8d,gBAAgB9tC,IAAAA;AACrBrJ,mBAAK27D,gBAAgBtyD;YACvB;YACOozD,oBAAAA;AACLz8D,mBAAK27D,gBAAgB37D,KAAKs7D;YAC5B;YAEO5pB,mBAAmBjU,IAAyBp0B,IAAAA;AACjD,oBAAMwO,KAAQ7X,KAAKo8D,YAAY3+B,IAAI,CAAC,IAAM,GAAA,CAAA;AAAA,yBACtCz9B,KAAK87D,aAAajkD,EAAAA,MACpB7X,KAAK87D,aAAajkD,EAAAA,IAAS,CAAA;AAE7B,oBAAMohD,KAAcj5D,KAAK87D,aAAajkD,EAAAA;AAEtC,qBADAohD,GAAY10D,KAAK8E,EAAAA,GACV,EACLG,SAAS,MAAA;AACP,sBAAM0vD,KAAeD,GAAYluD,QAAQ1B,EAAAA;AAAAA,uBACrC6vD,MACFD,GAAYjuD,OAAOkuD,IAAc,CAAA;cAAA,EAAA;YAIzC;YACOwD,gBAAgBj/B,IAAAA;AACjBz9B,mBAAK87D,aAAa97D,KAAKo8D,YAAY3+B,IAAI,CAAC,IAAM,GAAA,CAAA,CAAA,KAAA,OAAgBz9B,KAAK87D,aAAa97D,KAAKo8D,YAAY3+B,IAAI,CAAC,IAAM,GAAA,CAAA,CAAA;YAClH;YACOoZ,sBAAsBxtC,IAAAA;AAC3BrJ,mBAAKy7D,gBAAgBpyD;YACvB;YAEOixC,kBAAkBwC,IAAczzC,IAAAA;AACrCrJ,mBAAK47D,iBAAiB9e,GAAKv4B,WAAW,CAAA,CAAA,IAAMlb;YAC9C;YACOszD,oBAAoB7f,IAAAA;AACrB98C,mBAAK47D,iBAAiB9e,GAAKv4B,WAAW,CAAA,CAAA,KAAA,OAAYvkB,KAAK47D,iBAAiB9e,GAAKv4B,WAAW,CAAA,CAAA;YAC9F;YACOuyB,0BAA0BztC,IAAAA;AAC/BrJ,mBAAKu7D,oBAAoBlyD;YAC3B;YAEOuoC,mBAAmBnU,IAAyBp0B,IAAAA;AACjD,oBAAMwO,KAAQ7X,KAAKo8D,YAAY3+B,EAAAA;AAAAA,yBAC3Bz9B,KAAK67D,aAAahkD,EAAAA,MACpB7X,KAAK67D,aAAahkD,EAAAA,IAAS,CAAA;AAE7B,oBAAMohD,KAAcj5D,KAAK67D,aAAahkD,EAAAA;AAEtC,qBADAohD,GAAY10D,KAAK8E,EAAAA,GACV,EACLG,SAAS,MAAA;AACP,sBAAM0vD,KAAeD,GAAYluD,QAAQ1B,EAAAA;AAAAA,uBACrC6vD,MACFD,GAAYjuD,OAAOkuD,IAAc,CAAA;cAAA,EAAA;YAIzC;YACO0D,gBAAgBn/B,IAAAA;AACjBz9B,mBAAK67D,aAAa77D,KAAKo8D,YAAY3+B,EAAAA,CAAAA,KAAAA,OAAaz9B,KAAK67D,aAAa77D,KAAKo8D,YAAY3+B,EAAAA,CAAAA;YACzF;YACO+Y,sBAAsB7lC,IAAAA;AAC3B3Q,mBAAKw7D,gBAAgB7qD;YACvB;YAEOghC,mBAAmBlU,IAAyBp0B,IAAAA;AACjD,qBAAOrJ,KAAKi8D,WAAWjD,gBAAgBh5D,KAAKo8D,YAAY3+B,EAAAA,GAAKp0B,EAAAA;YAC/D;YACOwzD,gBAAgBp/B,IAAAA;AACrBz9B,mBAAKi8D,WAAW9C,aAAan5D,KAAKo8D,YAAY3+B,EAAAA,CAAAA;YAChD;YACOwZ,sBAAsB5tC,IAAAA;AAC3BrJ,mBAAKi8D,WAAW7C,mBAAmB/vD,EAAAA;YACrC;YAEOwoC,mBAAmBh6B,IAAexO,IAAAA;AACvC,qBAAOrJ,KAAK+7D,WAAW/C,gBAAgBnhD,IAAOxO,EAAAA;YAChD;YACOyzD,gBAAgBjlD,IAAAA;AACrB7X,mBAAK+7D,WAAW5C,aAAathD,EAAAA;YAC/B;YACOm/B,sBAAsB3tC,IAAAA;AAC3BrJ,mBAAK+7D,WAAW3C,mBAAmB/vD,EAAAA;YACrC;YAEO6zC,gBAAgBvsC,IAAAA;AACrB3Q,mBAAKm8D,gBAAgBxrD;YACvB;YACOosD,oBAAAA;AACL/8D,mBAAKm8D,gBAAgBn8D,KAAK07D;YAC5B;YAWO1kD,QAAAA;AACLhX,mBAAKo7D,eAAep7D,KAAKm7D,cACzBn7D,KAAK+7D,WAAW/kD,MAAAA,GAChBhX,KAAKi8D,WAAWjlD,MAAAA,GAChBhX,KAAK+5D,QAAQ/iD,MAAAA,GACbhX,KAAK+5D,QAAQF,SAAS,CAAA,GACtB75D,KAAKq7D,WAAW,GAChBr7D,KAAK0/C,qBAAqB,GAIK,MAA3B1/C,KAAKg2C,YAAYxnC,UACnBxO,KAAKg2C,YAAYxnC,QAAQ,GACzBxO,KAAKg2C,YAAY+kB,WAAW,CAAA;YAEhC;YAKUzd,eACR9uC,IACAusD,IACAC,IACAC,IACAC,IAAAA;AAEAl7D,mBAAKg2C,YAAYxnC,QAAQA,IACzBxO,KAAKg2C,YAAY+kB,WAAWA,IAC5B/6D,KAAKg2C,YAAYglB,aAAaA,IAC9Bh7D,KAAKg2C,YAAYilB,aAAaA,IAC9Bj7D,KAAKg2C,YAAYklB,WAAWA;YAC9B;YA2COzqB,MAAMzuB,IAAmB/gB,IAAgBuvC,IAAAA;AAC9C,kBAGIkpB,IAHA3iB,KAAO,GACPkkB,KAAa,GACbj5D,KAAQ;AAIZ,kBAAIhC,KAAKg2C,YAAYxnC;AAGnB,oBAA+B,MAA3BxO,KAAKg2C,YAAYxnC;AACnBxO,uBAAKg2C,YAAYxnC,QAAQ,GACzBxM,KAAQhC,KAAKg2C,YAAYklB,WAAW;qBAC/B;AACL,sBAAA,WAAI1qB,MAA0D,MAA3BxwC,KAAKg2C,YAAYxnC;AAiBlD,0BADAxO,KAAKg2C,YAAYxnC,QAAQ,GACnB,IAAI9M,MAAM,wEAAA;AAMlB,wBAAMq5D,KAAW/6D,KAAKg2C,YAAY+kB;AAClC,sBAAIC,KAAah7D,KAAKg2C,YAAYglB,aAAa;AAC/C,0BAAQh7D,KAAKg2C,YAAYxnC,OAAAA;oBACvB,KAAK;AACH,0BAAA,UAAIgiC,MAA2BwqB,KAAAA;AAC7B,+BAAOA,MAAc,MACnBtB,KAAiBqB,GAA8BC,EAAAA,EAAYh7D,KAAK+5D,OAAAA,GAAAA,SAC5DL,KAFkBsB;AAIf,8BAAItB,cAAyBjc;AAElC,mCADAz9C,KAAKg2C,YAAYglB,aAAaA,IACvBtB;;AAIb15D,2BAAKg2C,YAAY+kB,WAAW,CAAA;AAC5B;oBACF,KAAK;AACH,0BAAA,UAAIvqB,MAA2BwqB,KAAAA;AAC7B,+BAAOA,MAAc,MACnBtB,KAAiBqB,GAA8BC,EAAAA,EAAAA,GAAAA,SAC3CtB,KAFkBsB;AAIf,8BAAItB,cAAyBjc;AAElC,mCADAz9C,KAAKg2C,YAAYglB,aAAaA,IACvBtB;;AAIb15D,2BAAKg2C,YAAY+kB,WAAW,CAAA;AAC5B;oBACF,KAAK;AAGH,0BAFAhkB,KAAO/0B,GAAKhiB,KAAKg2C,YAAYklB,QAAAA,GAC7BxB,KAAgB15D,KAAKi8D,WAAW5C,OAAgB,OAATtiB,MAA0B,OAATA,IAAevG,EAAAA,GACnEkpB;AACF,+BAAOA;AAEI,6BAAT3iB,OAAe/2C,KAAKg2C,YAAYilB,cAAc,IAClDj7D,KAAK+5D,QAAQ/iD,MAAAA,GACbhX,KAAK+5D,QAAQF,SAAS,CAAA,GACtB75D,KAAKq7D,WAAW;AAChB;oBACF,KAAK;AAGH,0BAFAtkB,KAAO/0B,GAAKhiB,KAAKg2C,YAAYklB,QAAAA,GAC7BxB,KAAgB15D,KAAK+7D,WAAW95D,IAAa,OAAT80C,MAA0B,OAATA,IAAevG,EAAAA,GAChEkpB;AACF,+BAAOA;AAEI,6BAAT3iB,OAAe/2C,KAAKg2C,YAAYilB,cAAc,IAClDj7D,KAAK+5D,QAAQ/iD,MAAAA,GACbhX,KAAK+5D,QAAQF,SAAS,CAAA,GACtB75D,KAAKq7D,WAAW;kBAAA;AAIpBr7D,uBAAKg2C,YAAYxnC,QAAQ,GACzBxM,KAAQhC,KAAKg2C,YAAYklB,WAAW,GACpCl7D,KAAK0/C,qBAAqB,GAC1B1/C,KAAKo7D,eAA6C,KAA9Bp7D,KAAKg2C,YAAYilB;gBAAAA;AAOzC,uBAAS/7D,KAAI8C,IAAO9C,KAAI+B,IAAAA,EAAU/B,IAAG;AAKnC,wBAJA63C,KAAO/0B,GAAK9iB,EAAAA,GAGZ+7D,KAAaj7D,KAAK86D,aAAalE,MAAM52D,KAAKo7D,gBAAgB,KAAiCrkB,KAAO,MAAOA,KAAOujB,EAAAA,GACxGW,MAAc,GAAA;kBACpB,KAAK;AAGH,6BAASntD,KAAI5O,KAAI,KAAA,EAAO4O,IAAG;AACzB,0BAAIA,MAAK7M,OAAW81C,KAAO/0B,GAAKlU,EAAAA,KAAM,MAASipC,KAAO,OAAQA,KAAOujB,GAAsB;AACzFt6D,6BAAK27D,cAAc35C,IAAM9iB,IAAG4O,EAAAA,GAC5B5O,KAAI4O,KAAI;AACR;sBAAA;AAEF,0BAAA,EAAMA,MAAK7M,OAAW81C,KAAO/0B,GAAKlU,EAAAA,KAAM,MAASipC,KAAO,OAAQA,KAAOujB,GAAsB;AAC3Ft6D,6BAAK27D,cAAc35C,IAAM9iB,IAAG4O,EAAAA,GAC5B5O,KAAI4O,KAAI;AACR;sBAAA;AAEF,0BAAA,EAAMA,MAAK7M,OAAW81C,KAAO/0B,GAAKlU,EAAAA,KAAM,MAASipC,KAAO,OAAQA,KAAOujB,GAAsB;AAC3Ft6D,6BAAK27D,cAAc35C,IAAM9iB,IAAG4O,EAAAA,GAC5B5O,KAAI4O,KAAI;AACR;sBAAA;AAEF,0BAAA,EAAMA,MAAK7M,OAAW81C,KAAO/0B,GAAKlU,EAAAA,KAAM,MAASipC,KAAO,OAAQA,KAAOujB,GAAsB;AAC3Ft6D,6BAAK27D,cAAc35C,IAAM9iB,IAAG4O,EAAAA,GAC5B5O,KAAI4O,KAAI;AACR;sBAAA;oBAAA;AAGJ;kBACF,KAAK;AACC9N,yBAAK47D,iBAAiB7kB,EAAAA,IAAO/2C,KAAK47D,iBAAiB7kB,EAAAA,EAAAA,IAClD/2C,KAAKu7D,kBAAkBxkB,EAAAA,GAC5B/2C,KAAK0/C,qBAAqB;AAC1B;kBACF,KAAK;AACH;kBACF,KAAK;AAUH,wBAT8B1/C,KAAKm8D,cACjC,EACE54D,UAAUrE,IACV63C,MAAAA,IACAqkB,cAAcp7D,KAAKo7D,cACnB4B,SAASh9D,KAAKq7D,UACd5kB,QAAQz2C,KAAK+5D,SACbkD,OAAAA,MAAO,CAAA,EAEAA;AAAO;AAElB;kBACF,KAAK;AAEH,0BAAMlC,KAAW/6D,KAAK67D,aAAa77D,KAAKq7D,YAAY,IAAItkB,EAAAA;AACxD,wBAAIjpC,KAAIitD,KAAWA,GAAS95D,SAAS,IAAA;AACrC,2BAAO6M,MAAK,MAGV4rD,KAAgBqB,GAASjtD,EAAAA,EAAG9N,KAAK+5D,OAAAA,GAAAA,SAC7BL,KAJS5rD;AAMN,0BAAI4rD,cAAyBjc;AAElC,+BADAz9C,KAAKs9C,eAAe,GAAqByd,IAAUjtD,IAAGmtD,IAAY/7D,EAAAA,GAC3Dw6D;AAGP5rD,oBAAAA,KAAI,KACN9N,KAAKw7D,cAAcx7D,KAAKq7D,YAAY,IAAItkB,IAAM/2C,KAAK+5D,OAAAA,GAErD/5D,KAAK0/C,qBAAqB;AAC1B;kBACF,KAAK;AAEH,uBAAA;AACE,8BAAQ3I,IAAAA;wBACN,KAAK;AACH/2C,+BAAK+5D,QAAQF,SAAS,CAAA;AACtB;wBACF,KAAK;AACH75D,+BAAK+5D,QAAQmD,YAAAA,EAAa;AAC1B;wBACF;AACEl9D,+BAAK+5D,QAAQoD,SAASpmB,KAAO,EAAA;sBAAA;oBAAA,SAAA,EAExB73C,KAAI+B,OAAW81C,KAAO/0B,GAAK9iB,EAAAA,KAAM,MAAQ63C,KAAO;AAC3D73C,oBAAAA;AACA;kBACF,KAAK;AACHc,yBAAKq7D,aAAa,GAClBr7D,KAAKq7D,YAAYtkB;AACjB;kBACF,KAAK;AACH,0BAAMqmB,KAAcp9D,KAAK87D,aAAa97D,KAAKq7D,YAAY,IAAItkB,EAAAA;AAC3D,wBAAIsmB,IAAKD,KAAcA,GAAYn8D,SAAS,IAAA;AAC5C,2BAAOo8D,KAAM,MAGX3D,KAAgB0D,GAAYC,CAAAA,EAAAA,GAAAA,SACxB3D,KAJU2D;AAMP,0BAAI3D,cAAyBjc;AAElC,+BADAz9C,KAAKs9C,eAAe,GAAqB8f,IAAaC,GAAIpC,IAAY/7D,EAAAA,GAC/Dw6D;AAGP2D,wBAAK,KACPr9D,KAAKy7D,cAAcz7D,KAAKq7D,YAAY,IAAItkB,EAAAA,GAE1C/2C,KAAK0/C,qBAAqB;AAC1B;kBACF,KAAK;AACH1/C,yBAAK+5D,QAAQ/iD,MAAAA,GACbhX,KAAK+5D,QAAQF,SAAS,CAAA,GACtB75D,KAAKq7D,WAAW;AAChB;kBACF,KAAK;AACHr7D,yBAAKi8D,WAAW3C,KAAKt5D,KAAKq7D,YAAY,IAAItkB,IAAM/2C,KAAK+5D,OAAAA;AACrD;kBACF,KAAK;AAGH,6BAASjsD,KAAI5O,KAAI,KAAA,EAAO4O;AACtB,0BAAIA,MAAK7M,MAA+B,QAApB81C,KAAO/0B,GAAKlU,EAAAA,MAAyB,OAATipC,MAA0B,OAATA,MAAkBA,KAAO,OAAQA,KAAOujB,GAAsB;AAC7Ht6D,6BAAKi8D,WAAW1C,IAAIv3C,IAAM9iB,IAAG4O,EAAAA,GAC7B5O,KAAI4O,KAAI;AACR;sBAAA;AAGJ;kBACF,KAAK;AAEH,wBADA4rD,KAAgB15D,KAAKi8D,WAAW5C,OAAgB,OAATtiB,MAA0B,OAATA,EAAAA,GACpD2iB;AAEF,6BADA15D,KAAKs9C,eAAe,GAAqB,CAAA,GAAI,GAAG2d,IAAY/7D,EAAAA,GACrDw6D;AAEI,2BAAT3iB,OAAekkB,MAAc,IACjCj7D,KAAK+5D,QAAQ/iD,MAAAA,GACbhX,KAAK+5D,QAAQF,SAAS,CAAA,GACtB75D,KAAKq7D,WAAW,GAChBr7D,KAAK0/C,qBAAqB;AAC1B;kBACF,KAAK;AACH1/C,yBAAK+7D,WAAW/5D,MAAAA;AAChB;kBACF,KAAK;AAEH,6BAAS8L,KAAI5O,KAAI,KAAK4O;AACpB,0BAAIA,MAAK7M,OAAW81C,KAAO/0B,GAAKlU,EAAAA,KAAM,MAASipC,KAAO,OAAQA,KAAOujB,GAAsB;AACzFt6D,6BAAK+7D,WAAWxC,IAAIv3C,IAAM9iB,IAAG4O,EAAAA,GAC7B5O,KAAI4O,KAAI;AACR;sBAAA;AAGJ;kBACF,KAAK;AAEH,wBADA4rD,KAAgB15D,KAAK+7D,WAAW95D,IAAa,OAAT80C,MAA0B,OAATA,EAAAA,GACjD2iB;AAEF,6BADA15D,KAAKs9C,eAAe,GAAqB,CAAA,GAAI,GAAG2d,IAAY/7D,EAAAA,GACrDw6D;AAEI,2BAAT3iB,OAAekkB,MAAc,IACjCj7D,KAAK+5D,QAAQ/iD,MAAAA,GACbhX,KAAK+5D,QAAQF,SAAS,CAAA,GACtB75D,KAAKq7D,WAAW,GAChBr7D,KAAK0/C,qBAAqB;gBAAA;AAG9B1/C,qBAAKo7D,eAA4B,KAAbH;cAAAA;YAExB;UAAA;AAjjBF,UAAA57D,GAAA,uBAAA;QAAA,GAAA,MAAA,CAAAD,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAAA,GAAA,YAAA;AC/NA,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GAGMq5D,IAAgC,CAAA;AAEtC,UAAAl5D,GAAA,YAAA,MAAA;YAAA,cAAA;AACU,mBAAAi+D,SAAS,GACT,KAAA5E,UAAUH,GACV,KAAAvG,MAAAA,IACA,KAAAwG,YAA6C1pD,uBAAO2pD,OAAO,IAAA,GAC3D,KAAAG,aAAqC,MAAA;cAAA,GACrC,KAAAC,SAA+B,EACrC5iB,QAAAA,OACA6iB,cAAc,GACdC,aAAAA,MAAa;YAwKjB;YArKSC,gBAAgBnhD,IAAexO,IAAAA;AAAAA,yBAChCrJ,KAAKw4D,UAAU3gD,EAAAA,MACjB7X,KAAKw4D,UAAU3gD,EAAAA,IAAS,CAAA;AAE1B,oBAAMohD,KAAcj5D,KAAKw4D,UAAU3gD,EAAAA;AAEnC,qBADAohD,GAAY10D,KAAK8E,EAAAA,GACV,EACLG,SAAS,MAAA;AACP,sBAAM0vD,KAAeD,GAAYluD,QAAQ1B,EAAAA;AAAAA,uBACrC6vD,MACFD,GAAYjuD,OAAOkuD,IAAc,CAAA;cAAA,EAAA;YAIzC;YACOC,aAAathD,IAAAA;AACd7X,mBAAKw4D,UAAU3gD,EAAAA,KAAAA,OAAe7X,KAAKw4D,UAAU3gD,EAAAA;YACnD;YACOuhD,mBAAmB/vD,IAAAA;AACxBrJ,mBAAK44D,aAAavvD;YACpB;YAEOG,UAAAA;AACLxJ,mBAAKw4D,YAAY1pD,uBAAO2pD,OAAO,IAAA,GAC/Bz4D,KAAK44D,aAAa,MAAA;cAAA,GAClB54D,KAAK04D,UAAUH;YACjB;YAEOvhD,QAAAA;AAEL,kBAAoB,MAAhBhX,KAAKs9D;AACP,yBAASxvD,KAAI9N,KAAK64D,OAAO5iB,SAASj2C,KAAK64D,OAAOC,eAAe,IAAI94D,KAAK04D,QAAQz3D,SAAS,GAAG6M,MAAK,GAAA,EAAKA;AAClG9N,uBAAK04D,QAAQ5qD,EAAAA,EAAG7L,IAAAA,KAAI;AAGxBjC,mBAAK64D,OAAO5iB,SAAAA,OACZj2C,KAAK04D,UAAUH,GACfv4D,KAAKgyD,MAAAA,IACLhyD,KAAKs9D,SAAS;YAChB;YAEQ7W,SAAAA;AAEN,kBADAzmD,KAAK04D,UAAU14D,KAAKw4D,UAAUx4D,KAAKgyD,GAAAA,KAAQuG,GACtCv4D,KAAK04D,QAAQz3D;AAGhB,yBAAS6M,KAAI9N,KAAK04D,QAAQz3D,SAAS,GAAG6M,MAAK,GAAGA;AAC5C9N,uBAAK04D,QAAQ5qD,EAAAA,EAAG9L,MAAAA;;AAHlBhC,qBAAK44D,WAAW54D,KAAKgyD,KAAK,OAAA;YAM9B;YAEQuL,KAAKv7C,IAAmBhgB,IAAeC,IAAAA;AAC7C,kBAAKjC,KAAK04D,QAAQz3D;AAGhB,yBAAS6M,KAAI9N,KAAK04D,QAAQz3D,SAAS,GAAG6M,MAAK,GAAGA;AAC5C9N,uBAAK04D,QAAQ5qD,EAAAA,EAAGyrD,IAAIv3C,IAAMhgB,IAAOC,EAAAA;;AAHnCjC,qBAAK44D,WAAW54D,KAAKgyD,KAAK,QAAO,GAAA,EAAAwH,eAAcx3C,IAAMhgB,IAAOC,EAAAA,CAAAA;YAMhE;YAEOD,QAAAA;AAELhC,mBAAKgX,MAAAA,GACLhX,KAAKs9D,SAAS;YAChB;YASO/D,IAAIv3C,IAAmBhgB,IAAeC,IAAAA;AAC3C,kBAAoB,MAAhBjC,KAAKs9D,QAAT;AAGA,oBAAoB,MAAhBt9D,KAAKs9D;AACP,yBAAOt7D,KAAQC,MAAK;AAClB,0BAAM80C,KAAO/0B,GAAKhgB,IAAAA;AAClB,wBAAa,OAAT+0C,IAAe;AACjB/2C,2BAAKs9D,SAAS,GACdt9D,KAAKymD,OAAAA;AACL;oBAAA;AAEF,wBAAI1P,KAAO,MAAQ,KAAOA;AAExB,6BAAA,MADA/2C,KAAKs9D,SAAS;AAAA,2BAGZt9D,KAAKgyD,QACPhyD,KAAKgyD,MAAM,IAEbhyD,KAAKgyD,MAAiB,KAAXhyD,KAAKgyD,MAAWjb,KAAO;kBAAA;AAGlB,sBAAhB/2C,KAAKs9D,UAA+Br7D,KAAMD,KAAQ,KACpDhC,KAAKu9D,KAAKv7C,IAAMhgB,IAAOC,EAAAA;cAAAA;YAE3B;YAOOA,IAAIw3D,IAAkBjpB,KAAAA,MAAyB;AACpD,kBAAoB,MAAhBxwC,KAAKs9D,QAAT;AAIA,oBAAoB,MAAhBt9D,KAAKs9D;AAQP,sBAJoB,MAAhBt9D,KAAKs9D,UACPt9D,KAAKymD,OAAAA,GAGFzmD,KAAK04D,QAAQz3D,QAEX;AACL,wBAAIy4D,KAAAA,OACA5rD,KAAI9N,KAAK04D,QAAQz3D,SAAS,GAC1B83D,KAAAA;AAOJ,wBANI/4D,KAAK64D,OAAO5iB,WACdnoC,KAAI9N,KAAK64D,OAAOC,eAAe,GAC/BY,KAAgBlpB,IAChBuoB,KAAc/4D,KAAK64D,OAAOE,aAC1B/4D,KAAK64D,OAAO5iB,SAAAA,QAAS,CAElB8iB,MAAAA,UAAeW,IAAyB;AAC3C,6BAAO5rD,MAAK,MACV4rD,KAAgB15D,KAAK04D,QAAQ5qD,EAAAA,EAAG7L,IAAIw3D,EAAAA,GAAAA,SAChCC,KAFS5rD;AAIN,4BAAI4rD,cAAyBjc;AAIlC,iCAHAz9C,KAAK64D,OAAO5iB,SAAAA,MACZj2C,KAAK64D,OAAOC,eAAehrD,IAC3B9N,KAAK64D,OAAOE,cAAAA,OACLW;AAGX5rD,sBAAAA;oBAAAA;AAKF,2BAAOA,MAAK,GAAGA;AAEb,0BADA4rD,KAAgB15D,KAAK04D,QAAQ5qD,EAAAA,EAAG7L,IAAAA,KAAI,GAChCy3D,cAAyBjc;AAI3B,+BAHAz9C,KAAK64D,OAAO5iB,SAAAA,MACZj2C,KAAK64D,OAAOC,eAAehrD,IAC3B9N,KAAK64D,OAAOE,cAAAA,MACLW;kBAAAA;AAlCX15D,yBAAK44D,WAAW54D,KAAKgyD,KAAK,OAAOyH,EAAAA;AAwCrCz5D,qBAAK04D,UAAUH,GACfv4D,KAAKgyD,MAAAA,IACLhyD,KAAKs9D,SAAS;cAAA;YAChB;UAAA,GAOFj+D,GAAA,aAAA,MAAA;YAIEI,YAAoBq6D,IAAAA;AAAA,mBAAAA,WAAAA,IAHZ,KAAA3U,QAAQ,IACR,KAAA6U,YAAAA;YAEsE;YAEvEh4D,QAAAA;AACLhC,mBAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA;YACP;YAEOT,IAAIv3C,IAAmBhgB,IAAeC,IAAAA;AACvCjC,mBAAKg6D,cAGTh6D,KAAKmlD,UAAS,GAAA,EAAAqU,eAAcx3C,IAAMhgB,IAAOC,EAAAA,GACrCjC,KAAKmlD,MAAMlkD,SAAS3B,GAAAg5D,kBACtBt4D,KAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA;YAET;YAEO/3D,IAAIw3D,IAAAA;AACT,kBAAIQ,KAAAA;AACJ,kBAAIj6D,KAAKg6D;AACPC,gBAAAA,KAAAA;uBACSR,OACTQ,KAAMj6D,KAAK85D,SAAS95D,KAAKmlD,KAAAA,GACrB8U,cAAexc;AAGjB,uBAAOwc,GAAIpC,KAAKla,CAAAA,QACd39C,KAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA,OACErc,GAAAA;AAMb,qBAFA39C,KAAKmlD,QAAQ,IACbnlD,KAAKg6D,YAAAA,OACEC;YACT;UAAA;QAAA,GAAA,MAAA,CAAA76D,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,SAAA;ACrOF,gBAAMm+D,KAAY;AAuBlB,gBAAa5D,GAAAA;YAyCXn6D,YAAmBgrC,KAAoB,IAAWgzB,KAA6B,IAAA;AAC7E,kBADiB,KAAAhzB,YAAAA,IAA+B,KAAAgzB,qBAAAA,IAC5CA,KA/Dc;AAgEhB,sBAAM,IAAI/7D,MAAM,iDAAA;AAElB1B,mBAAKy2C,SAAS,IAAIinB,WAAWjzB,EAAAA,GAC7BzqC,KAAKiB,SAAS,GACdjB,KAAK29D,aAAa,IAAID,WAAWD,EAAAA,GACjCz9D,KAAK49D,mBAAmB,GACxB59D,KAAK69D,gBAAgB,IAAIC,YAAYrzB,EAAAA,GACrCzqC,KAAK+9D,gBAAAA,OACL/9D,KAAKg+D,mBAAAA,OACLh+D,KAAKi+D,cAAAA;YACP;YAnCOl/B,OAAAA,UAAiBknB,IAAAA;AACtB,oBAAMxP,KAAS,IAAImjB;AACnB,kBAAA,CAAK3T,GAAOhlD;AACV,uBAAOw1C;AAGT,uBAASv3C,KAAKorC,MAAMoB,QAAQua,GAAO,CAAA,CAAA,IAAO,IAAI,GAAG/mD,KAAI+mD,GAAOhlD,QAAAA,EAAU/B,IAAG;AACvE,sBAAM+H,KAAQg/C,GAAO/mD,EAAAA;AACrB,oBAAIorC,MAAMoB,QAAQzkC,EAAAA;AAChB,2BAASi3D,KAAI,GAAGA,KAAIj3D,GAAMhG,QAAAA,EAAUi9D;AAClCznB,oBAAAA,GAAOymB,YAAYj2D,GAAMi3D,EAAAA,CAAAA;;AAG3BznB,kBAAAA,GAAOojB,SAAS5yD,EAAAA;cAAAA;AAGpB,qBAAOwvC;YACT;YAuBOnL,QAAAA;AACL,oBAAM6yB,KAAY,IAAIvE,GAAO55D,KAAKyqC,WAAWzqC,KAAKy9D,kBAAAA;AASlD,qBARAU,GAAU1nB,OAAO9tC,IAAI3I,KAAKy2C,MAAAA,GAC1B0nB,GAAUl9D,SAASjB,KAAKiB,QACxBk9D,GAAUR,WAAWh1D,IAAI3I,KAAK29D,UAAAA,GAC9BQ,GAAUP,mBAAmB59D,KAAK49D,kBAClCO,GAAUN,cAAcl1D,IAAI3I,KAAK69D,aAAAA,GACjCM,GAAUJ,gBAAgB/9D,KAAK+9D,eAC/BI,GAAUH,mBAAmBh+D,KAAKg+D,kBAClCG,GAAUF,cAAcj+D,KAAKi+D,aACtBE;YACT;YAQOvnB,UAAAA;AACL,oBAAM+G,KAAmB,CAAA;AACzB,uBAASz+C,KAAI,GAAGA,KAAIc,KAAKiB,QAAAA,EAAU/B,IAAG;AACpCy+C,gBAAAA,GAAIp5C,KAAKvE,KAAKy2C,OAAOv3C,EAAAA,CAAAA;AACrB,sBAAM8C,KAAQhC,KAAK69D,cAAc3+D,EAAAA,KAAM,GACjC+C,KAA8B,MAAxBjC,KAAK69D,cAAc3+D,EAAAA;AAC3B+C,gBAAAA,KAAMD,KAAQ,KAChB27C,GAAIp5C,KAAK+lC,MAAM4T,UAAUpY,MAAM2M,KAAKzyC,KAAK29D,YAAY37D,IAAOC,EAAAA,CAAAA;cAAAA;AAGhE,qBAAO07C;YACT;YAKO3mC,QAAAA;AACLhX,mBAAKiB,SAAS,GACdjB,KAAK49D,mBAAmB,GACxB59D,KAAK+9D,gBAAAA,OACL/9D,KAAKg+D,mBAAAA,OACLh+D,KAAKi+D,cAAAA;YACP;YASOpE,SAAS5yD,IAAAA;AAEd,kBADAjH,KAAKi+D,cAAAA,OACDj+D,KAAKiB,UAAUjB,KAAKyqC;AACtBzqC,qBAAK+9D,gBAAAA;mBADP;AAIA,oBAAI92D,KAAAA;AACF,wBAAM,IAAIvF,MAAM,uCAAA;AAElB1B,qBAAK69D,cAAc79D,KAAKiB,MAAAA,IAAUjB,KAAK49D,oBAAoB,IAAI59D,KAAK49D,kBACpE59D,KAAKy2C,OAAOz2C,KAAKiB,QAAAA,IAAYgG,KAAQu2D,KAAYA,KAAYv2D;cAAAA;YAC/D;YASOi2D,YAAYj2D,IAAAA;AAEjB,kBADAjH,KAAKi+D,cAAAA,MACAj+D,KAAKiB;AAGV,oBAAIjB,KAAK+9D,iBAAiB/9D,KAAK49D,oBAAoB59D,KAAKy9D;AACtDz9D,uBAAKg+D,mBAAAA;qBADP;AAIA,sBAAI/2D,KAAAA;AACF,0BAAM,IAAIvF,MAAM,uCAAA;AAElB1B,uBAAK29D,WAAW39D,KAAK49D,kBAAAA,IAAsB32D,KAAQu2D,KAAYA,KAAYv2D,IAC3EjH,KAAK69D,cAAc79D,KAAKiB,SAAS,CAAA;gBAAA;YACnC;YAKO2hD,aAAaiB,IAAAA;AAClB,sBAAmC,MAA1B7jD,KAAK69D,cAAcha,EAAAA,MAAgB7jD,KAAK69D,cAAcha,EAAAA,KAAQ,KAAK;YAC9E;YAOOf,aAAae,IAAAA;AAClB,oBAAM7hD,KAAQhC,KAAK69D,cAAcha,EAAAA,KAAQ,GACnC5hD,KAAgC,MAA1BjC,KAAK69D,cAAcha,EAAAA;AAC/B,qBAAI5hD,KAAMD,KAAQ,IACThC,KAAK29D,WAAWziC,SAASl5B,IAAOC,EAAAA,IAElC;YACT;YAMOm8D,kBAAAA;AACL,oBAAMvtD,KAAsC,CAAC;AAC7C,uBAAS3R,KAAI,GAAGA,KAAIc,KAAKiB,QAAAA,EAAU/B,IAAG;AACpC,sBAAM8C,KAAQhC,KAAK69D,cAAc3+D,EAAAA,KAAM,GACjC+C,KAA8B,MAAxBjC,KAAK69D,cAAc3+D,EAAAA;AAC3B+C,gBAAAA,KAAMD,KAAQ,MAChB6O,GAAO3R,EAAAA,IAAKc,KAAK29D,WAAW73B,MAAM9jC,IAAOC,EAAAA;cAAAA;AAG7C,qBAAO4O;YACT;YAMOssD,SAASl2D,IAAAA;AACd,kBAAIhG;AACJ,kBAAIjB,KAAK+9D,iBAAAA,EACF98D,KAASjB,KAAKi+D,cAAcj+D,KAAK49D,mBAAmB59D,KAAKiB,WAC1DjB,KAAKi+D,eAAej+D,KAAKg+D;AAE7B;AAGF,oBAAMK,KAAQr+D,KAAKi+D,cAAcj+D,KAAK29D,aAAa39D,KAAKy2C,QAClD6nB,IAAMD,GAAMp9D,KAAS,CAAA;AAC3Bo9D,cAAAA,GAAMp9D,KAAS,CAAA,IAAA,CAAMq9D,IAAM3qD,KAAKC,IAAU,KAAN0qD,IAAWr3D,IAAOu2D,EAAAA,IAAav2D;YACrE;UAAA;AArMF,UAAA5H,GAAA,SAAAC;QAAA,GAAA,MAAA,CAAAF,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,eAAA,QCjBAA,GAAA,eAAA,MAAA;YAGEI,cAAAA;AAFU,mBAAA8+D,UAA0B,CAAA;YAGpC;YAEO/0D,UAAAA;AACL,uBAAStK,KAAIc,KAAKu+D,QAAQt9D,SAAS,GAAG/B,MAAK,GAAGA;AAC5Cc,qBAAKu+D,QAAQr/D,EAAAA,EAAGs/D,SAASh1D,QAAAA;YAE7B;YAEOi1D,UAAUC,IAAoBF,IAAAA;AACnC,oBAAMG,KAA4B,EAChCH,UAAAA,IACAh1D,SAASg1D,GAASh1D,SAClBuoD,YAAAA,MAAY;AAEd/xD,mBAAKu+D,QAAQh6D,KAAKo6D,EAAAA,GAClBH,GAASh1D,UAAU,MAAMxJ,KAAK4+D,qBAAqBD,EAAAA,GACnDH,GAASrwD,SAASuwD,EAAAA;YACpB;YAEQE,qBAAqBD,IAAAA;AAC3B,kBAAIA,GAAY5M;AAEd;AAEF,kBAAInkD,KAAAA;AACJ,uBAAS1O,KAAI,GAAGA,KAAIc,KAAKu+D,QAAQt9D,QAAQ/B;AACvC,oBAAIc,KAAKu+D,QAAQr/D,EAAAA,MAAOy/D,IAAa;AACnC/wD,kBAAAA,KAAQ1O;AACR;gBAAA;AAGJ,kBAAA,OAAI0O;AACF,sBAAM,IAAIlM,MAAM,qDAAA;AAElBi9D,cAAAA,GAAY5M,aAAAA,MACZ4M,GAAYn1D,QAAQixD,MAAMkE,GAAYH,QAAAA,GACtCx+D,KAAKu+D,QAAQvzD,OAAO4C,IAAO,CAAA;YAC7B;UAAA;QAAA,GAAA,MAAA,CAAAxO,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,gBAAA;AC/CF,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA;AAEA,UAAAG,GAAA,gBAAA,MAAA;YACEI,YACU6uD,IACQllD,IAAAA;AADR,mBAAAklD,UAAAA,IACQ,KAAAllD,OAAAA;YACd;YAEGy1D,KAAKj7D,IAAAA;AAEV,qBADA5D,KAAKsuD,UAAU1qD,IACR5D;YACT;YAEW4Z,IAAAA,UAAAA;AAAoB,qBAAO5Z,KAAKsuD,QAAQviD;YAAG;YAC3CgO,IAAAA,UAAAA;AAAoB,qBAAO/Z,KAAKsuD,QAAQxiD;YAAG;YAC3CgzD,IAAAA,YAAAA;AAAsB,qBAAO9+D,KAAKsuD,QAAQ1oD;YAAO;YACjDm5D,IAAAA,QAAAA;AAAkB,qBAAO/+D,KAAKsuD,QAAQz0C;YAAO;YAC7C5Y,IAAAA,SAAAA;AAAmB,qBAAOjB,KAAKsuD,QAAQzqD,MAAM5C;YAAQ;YACzD+9D,QAAQjzD,IAAAA;AACb,oBAAM6E,KAAO5Q,KAAKsuD,QAAQzqD,MAAMgF,IAAIkD,EAAAA;AACpC,kBAAK6E;AAGL,uBAAO,IAAItR,GAAA2/D,kBAAkBruD,EAAAA;YAC/B;YACO2uC,cAAAA;AAAgC,qBAAO,IAAI,EAAAvuC;YAAY;UAAA;QAAA,GAAA,MAAA,CAAA5R,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,oBAAA;AC5BhE,gBAAAC,KAAAJ,GAAA,GAAA;AAIA,UAAAG,GAAA,oBAAA,MAAA;YACEI,YAAoBy/D,IAAAA;AAAA,mBAAAA,QAAAA;YAAsB;YAE/BhtC,IAAAA,YAAAA;AAAuB,qBAAOlyB,KAAKk/D,MAAMhtC;YAAW;YACpDjxB,IAAAA,SAAAA;AAAmB,qBAAOjB,KAAKk/D,MAAMj+D;YAAQ;YACjDk+D,QAAQrzD,IAAW5F,IAAAA;AACxB,kBAAA,EAAI4F,KAAI,KAAKA,MAAK9L,KAAKk/D,MAAMj+D;AAI7B,uBAAIiF,MACFlG,KAAKk/D,MAAM3tD,SAASzF,IAAG5F,EAAAA,GAChBA,MAEFlG,KAAKk/D,MAAM3tD,SAASzF,IAAG,IAAIxM,GAAA0R,UAAAA;YACpC;YACOqnB,kBAAkBs1B,IAAqByR,IAAsBC,IAAAA;AAClE,qBAAOr/D,KAAKk/D,MAAM7mC,kBAAkBs1B,IAAWyR,IAAaC,EAAAA;YAC9D;UAAA;QAAA,GAAA,MAAA,CAAAjgE,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,qBAAA;ACrBF,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAGA,UAAAG,GAAA,qBAAA,MAAA;YAOEI,YAAoB6/D,IAAAA;AAAA,mBAAAA,QAAAA,IAHH,KAAAC,kBAAkB,IAAI,EAAAp1D,gBACvB,KAAAq1D,iBAAiBx/D,KAAKu/D,gBAAgBl1D,OAGpDrK,KAAKsxD,UAAU,IAAIhyD,GAAAmgE,cAAcz/D,KAAKs/D,MAAMzmD,QAAQuV,QAAQ,QAAA,GAC5DpuB,KAAK0/D,aAAa,IAAIpgE,GAAAmgE,cAAcz/D,KAAKs/D,MAAMzmD,QAAQ+H,KAAK,WAAA,GAC5D5gB,KAAKs/D,MAAMzmD,QAAQmP,iBAAiB,MAAMhoB,KAAKu/D,gBAAgB7vD,KAAK1P,KAAK8Y,MAAAA,CAAAA;YAC3E;YACWA,IAAAA,SAAAA;AACT,kBAAI9Y,KAAKs/D,MAAMzmD,QAAQC,WAAW9Y,KAAKs/D,MAAMzmD,QAAQuV;AAAU,uBAAOpuB,KAAKouB;AAC3E,kBAAIpuB,KAAKs/D,MAAMzmD,QAAQC,WAAW9Y,KAAKs/D,MAAMzmD,QAAQ+H;AAAO,uBAAO5gB,KAAK2/D;AACxE,oBAAM,IAAIj+D,MAAM,+CAAA;YAClB;YACW0sB,IAAAA,SAAAA;AACT,qBAAOpuB,KAAKsxD,QAAQuN,KAAK7+D,KAAKs/D,MAAMzmD,QAAQuV,MAAAA;YAC9C;YACWuxC,IAAAA,YAAAA;AACT,qBAAO3/D,KAAK0/D,WAAWb,KAAK7+D,KAAKs/D,MAAMzmD,QAAQ+H,GAAAA;YACjD;UAAA;QAAA,GAAA,MAAA,CAAAxhB,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,YAAA,QCvBFA,GAAA,YAAA,MAAA;YACEI,YAAoB6/D,IAAAA;AAAA,mBAAAA,QAAAA;YAAwB;YAErC1tB,mBAAmBnU,IAAyB9sB,IAAAA;AACjD,qBAAO3Q,KAAKs/D,MAAM1tB,mBAAmBnU,IAAKgZ,CAAAA,OAAoB9lC,GAAS8lC,GAAOG,QAAAA,CAAAA,CAAAA;YAChF;YACOgpB,cAAcniC,IAAyB9sB,IAAAA;AAC5C,qBAAO3Q,KAAK4xC,mBAAmBnU,IAAI9sB,EAAAA;YACrC;YACOghC,mBAAmBlU,IAAyB9sB,IAAAA;AACjD,qBAAO3Q,KAAKs/D,MAAM3tB,mBAAmBlU,IAAI,CAACzb,IAAcy0B,OAAoB9lC,GAASqR,IAAMy0B,GAAOG,QAAAA,CAAAA,CAAAA;YACpG;YACOipB,cAAcpiC,IAAyB9sB,IAAAA;AAC5C,qBAAO3Q,KAAK2xC,mBAAmBlU,IAAI9sB,EAAAA;YACrC;YACO+gC,mBAAmBjU,IAAyBp0B,IAAAA;AACjD,qBAAOrJ,KAAKs/D,MAAM5tB,mBAAmBjU,IAAIp0B,EAAAA;YAC3C;YACOy2D,cAAcriC,IAAyBp0B,IAAAA;AAC5C,qBAAOrJ,KAAK0xC,mBAAmBjU,IAAIp0B,EAAAA;YACrC;YACOwoC,mBAAmBh6B,IAAelH,IAAAA;AACvC,qBAAO3Q,KAAKs/D,MAAMztB,mBAAmBh6B,IAAOlH,EAAAA;YAC9C;YACOovD,cAAcloD,IAAelH,IAAAA;AAClC,qBAAO3Q,KAAK6xC,mBAAmBh6B,IAAOlH,EAAAA;YACxC;UAAA;QAAA,GAAA,MAAA,CAAAvR,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAA,QC3BFA,GAAA,aAAA,MAAA;YACEI,YAAoB6/D,IAAAA;AAAA,mBAAAA,QAAAA;YAAwB;YAErC19D,SAASo+D,IAAAA;AACdhgE,mBAAKs/D,MAAM7vB,eAAe7tC,SAASo+D,EAAAA;YACrC;YAEWC,IAAAA,WAAAA;AACT,qBAAOjgE,KAAKs/D,MAAM7vB,eAAewwB;YACnC;YAEWC,IAAAA,gBAAAA;AACT,qBAAOlgE,KAAKs/D,MAAM7vB,eAAeywB;YACnC;YAEWA,IAAAA,cAAcrJ,IAAAA;AACvB72D,mBAAKs/D,MAAM7vB,eAAeywB,gBAAgBrJ;YAC5C;UAAA;QAAA,GAAA,KAAA,SAAAz3D,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,gBAAAA,GAAA,eAAAA,GAAA,eAAA;ACpBF,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA;AAGa,UAAAG,GAAA6xC,eAAe,GACf7xC,GAAA8xC,eAAe;AAE5B,cAAahC,IAAb,cAAmC,EAAA3vC,WAAAA;YAmBjCC,YAA6B6f,IAAAA;AAC3B1f,oBAAAA,GAbK,KAAAugE,kBAAAA,OAEU,KAAArxB,YAAY9uC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAAtI,WAAW7B,KAAK8uC,UAAUzkC,OACzB,KAAAyU,YAAY9e,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAAjI,WAAWlC,KAAK8e,UAAUzU,OASxCrK,KAAK0N,OAAOiG,KAAKG,IAAIwL,GAAevO,WAAWrD,QAAQ,GAAGrO,GAAA6xC,YAAAA,GAC1DlxC,KAAKU,OAAOiT,KAAKG,IAAIwL,GAAevO,WAAWrQ,QAAQ,GAAGrB,GAAA8xC,YAAAA,GAC1DnxC,KAAK6Y,UAAU7Y,KAAK4B,SAAS,IAAI,EAAAwvD,UAAU9xC,IAAgBtf,IAAAA,CAAAA;YAC7D;YAVW4D,IAAAA,SAAAA;AAAoB,qBAAO5D,KAAK6Y,QAAQC;YAAQ;YAYpDuE,OAAO3P,IAAchN,IAAAA;AAC1BV,mBAAK0N,OAAOA,IACZ1N,KAAKU,OAAOA,IACZV,KAAK6Y,QAAQwE,OAAO3P,IAAMhN,EAAAA,GAE1BV,KAAK8uC,UAAUp/B,KAAK,EAAEhC,MAAAA,IAAMhN,MAAAA,GAAAA,CAAAA;YAC9B;YAEOsW,QAAAA;AACLhX,mBAAK6Y,QAAQ7B,MAAAA,GACbhX,KAAKmgE,kBAAAA;YACP;YAOO/uB,OAAOC,IAA2Bnf,KAAAA,OAAqB;AAC5D,oBAAMtuB,KAAS5D,KAAK4D;AAEpB,kBAAIyoD;AACJA,cAAAA,KAAUrsD,KAAKogE,kBACV/T,MAAWA,GAAQprD,WAAWjB,KAAK0N,QAAQ2+C,GAAQruB,MAAM,CAAA,MAAOqT,GAAU3oC,MAAM2jD,GAAQnuB,MAAM,CAAA,MAAOmT,GAAU5oC,OAClH4jD,KAAUzoD,GAAO2hB,aAAa8rB,IAAWnf,EAAAA,GACzClyB,KAAKogE,mBAAmB/T,KAE1BA,GAAQn6B,YAAYA;AAEpB,oBAAMmuC,KAASz8D,GAAOiW,QAAQjW,GAAOklB,WAC/Bw3C,KAAY18D,GAAOiW,QAAQjW,GAAO0sC;AAExC,kBAAyB,MAArB1sC,GAAOklB,WAAiB;AAE1B,sBAAMy3C,KAAsB38D,GAAOC,MAAMknC;AAGrCu1B,gBAAAA,OAAc18D,GAAOC,MAAM5C,SAAS,IAClCs/D,KACF38D,GAAOC,MAAMinC,QAAAA,EAAU4kB,SAASrD,EAAAA,IAEhCzoD,GAAOC,MAAMU,KAAK8nD,GAAQ/gB,MAAAA,CAAAA,IAG5B1nC,GAAOC,MAAMmH,OAAOs1D,KAAY,GAAG,GAAGjU,GAAQ/gB,MAAAA,CAAAA,GAI3Ci1B,KASCvgE,KAAKmgE,oBACPv8D,GAAOgC,QAAQ+N,KAAKG,IAAIlQ,GAAOgC,QAAQ,GAAG,CAAA,MAT5ChC,GAAOiW,SAEF7Z,KAAKmgE,mBACRv8D,GAAOgC;cAAAA,OASN;AAGL,sBAAM8+C,KAAqB4b,KAAYD,KAAS;AAChDz8D,gBAAAA,GAAOC,MAAMunC,cAAci1B,KAAS,GAAG3b,KAAqB,GAAA,EAAI,GAChE9gD,GAAOC,MAAM8E,IAAI23D,IAAWjU,GAAQ/gB,MAAAA,CAAAA;cAAAA;AAKjCtrC,mBAAKmgE,oBACRv8D,GAAOgC,QAAQhC,GAAOiW,QAGxB7Z,KAAK8e,UAAUpP,KAAK9L,GAAOgC,KAAAA;YAC7B;YASOpB,YAAYge,IAAc/D,IAA+BgE,IAAAA;AAC9D,oBAAM7e,KAAS5D,KAAK4D;AACpB,kBAAI4e,KAAO,GAAG;AACZ,oBAAqB,MAAjB5e,GAAOgC;AACT;AAEF5F,qBAAKmgE,kBAAAA;cAAkB;AACd39C,gBAAAA,KAAO5e,GAAOgC,SAAShC,GAAOiW,UACvC7Z,KAAKmgE,kBAAAA;AAGP,oBAAMK,KAAW58D,GAAOgC;AACxBhC,cAAAA,GAAOgC,QAAQ+N,KAAKG,IAAIH,KAAKC,IAAIhQ,GAAOgC,QAAQ4c,IAAM5e,GAAOiW,KAAAA,GAAQ,CAAA,GAGjE2mD,OAAa58D,GAAOgC,UAInB6Y,MACHze,KAAK8e,UAAUpP,KAAK9L,GAAOgC,KAAAA;YAE/B;YAMO0rC,YAAYC,IAAAA;AACjBvxC,mBAAKwE,YAAY+sC,MAAavxC,KAAKU,OAAO,EAAA;YAC5C;YAKO8wC,cAAAA;AACLxxC,mBAAKwE,YAAAA,CAAaxE,KAAK4D,OAAOgC,KAAAA;YAChC;YAKOse,iBAAAA;AACLlkB,mBAAKwE,YAAYxE,KAAK4D,OAAOiW,QAAQ7Z,KAAK4D,OAAOgC,KAAAA;YACnD;YAEO6rC,aAAa7gC,IAAAA;AAClB,oBAAM6vD,KAAe7vD,KAAO5Q,KAAK4D,OAAOgC;AACnB,oBAAjB66D,MACFzgE,KAAKwE,YAAYi8D,EAAAA;YAErB;UAAA;AAlKWtxB,cAAa7vC,GAAA,CAmBX,EAAA,GAAA,EAAAsT,eAAAA,CAAAA,GAnBFu8B,CAAAA,GAAA9vC,GAAA8vC,gBAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,iBAAAA,QCPb9vC,GAAA,iBAAA,MAAA;YAAA,cAAA;AAIS,mBAAAqhE,SAAiB,GAEhB,KAAAC,YAAsC,CAAA;YAmBhD;YAjBS3pD,QAAAA;AACLhX,mBAAKw+C,UAAAA,QACLx+C,KAAK2gE,YAAY,CAAA,GACjB3gE,KAAK0gE,SAAS;YAChB;YAEO9jB,UAAUzV,IAAAA;AACfnnC,mBAAK0gE,SAASv5B,IACdnnC,KAAKw+C,UAAUx+C,KAAK2gE,UAAUx5B,EAAAA;YAChC;YAEOka,YAAYla,IAAWqX,IAAAA;AAC5Bx+C,mBAAK2gE,UAAUx5B,EAAAA,IAAKqX,IAChBx+C,KAAK0gE,WAAWv5B,OAClBnnC,KAAKw+C,UAAUA;YAEnB;UAAA;QAAA,GAAA,MAAA,SAAAp/C,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,mBAAA;AC5BF,gBAAA,IAAAH,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,GAAA,GAKM0hE,IAA2D,EAM/DC,MAAM,EACJt/C,QAAQ,GACRu/C,UAAU,MAAA,MAAM,GAOlBC,KAAK,EACHx/C,QAAQ,GACRu/C,UAAW1hE,CAAAA,OAEQ,MAAbA,GAAE0b,UAAiD,MAAb1b,GAAE8gB,WAI5C9gB,GAAEshB,OAAAA,OACFthB,GAAEwhB,MAAAA,OACFxhB,GAAE+E,QAAAA,OAAQ,MACH,GAQX68D,OAAO,EACLz/C,QAAQ,IACRu/C,UAAW1hE,CAAAA,OAEQ,OAAbA,GAAE8gB,OAAAA,GAWV+gD,MAAM,EACJ1/C,QAAQ,IACRu/C,UAAW1hE,CAAAA,OAEQ,OAAbA,GAAE8gB,UAAgD,MAAb9gB,GAAE0b,OAAAA,GAW/ComD,KAAK,EACH3/C,QACE,IAEFu/C,UAAW1hE,CAAAA,OAAAA,KAAuB,EAAA;AAWtC,mBAAS+hE,EAAU/hE,IAAoBgiE,IAAAA;AACrC,gBAAIrqB,MAAQ33C,GAAEshB,OAAO,KAAiB,MAAMthB,GAAE+E,QAAQ,IAAkB,MAAM/E,GAAEwhB,MAAM,IAAgB;AAoBtG,mBAnBiB,MAAbxhB,GAAE0b,UACJi8B,MAAQ,IACRA,MAAQ33C,GAAE8gB,WAEV62B,MAAmB,IAAX33C,GAAE0b,QACK,IAAX1b,GAAE0b,WACJi8B,MAAQ,KAEK,IAAX33C,GAAE0b,WACJi8B,MAAQ,MAEO,OAAb33C,GAAE8gB,SACJ62B,MAAQ,KACc,MAAb33C,GAAE8gB,UAAkCkhD,OAG7CrqB,MAAQ,KAGLA;UACT;AAEA,gBAAMsqB,IAAIp8C,OAAOC,cAKXo8C,IAA0D,EAM9DC,SAAUniE,CAAAA,OAAAA;AACR,kBAAMq3C,KAAS,CAAC0qB,EAAU/hE,IAAAA,KAAG,IAAS,IAAIA,GAAEohB,MAAM,IAAIphB,GAAEqhB,MAAM,EAAA;AAK9D,mBAAIg2B,GAAO,CAAA,IAAK,OAAOA,GAAO,CAAA,IAAK,OAAOA,GAAO,CAAA,IAAK,MAC7C,KAEF,SAAS4qB,EAAE5qB,GAAO,CAAA,CAAA,IAAM4qB,EAAE5qB,GAAO,CAAA,CAAA,IAAM4qB,EAAE5qB,GAAO,CAAA,CAAA;UAAK,GAO9D+qB,KAAMpiE,CAAAA,OAAAA;AACJ,kBAAM8yC,KAAsB,MAAb9yC,GAAE8gB,UAA8C,MAAb9gB,GAAE0b,SAAoC,MAAM;AAC9F,mBAAO,SAASqmD,EAAU/hE,IAAAA,IAAG,KAASA,GAAEohB,OAAOphB,GAAEqhB,MAAMyxB;UAAO,GAEhEuvB,YAAariE,CAAAA,OAAAA;AACX,kBAAM8yC,KAAsB,MAAb9yC,GAAE8gB,UAA8C,MAAb9gB,GAAE0b,SAAoC,MAAM;AAC9F,mBAAO,SAASqmD,EAAU/hE,IAAAA,IAAG,KAASA,GAAE0M,KAAK1M,GAAE2M,IAAImmC;UAAO,EAAA;AAoB9D,cAAa3C,IAAb,cAAsC,EAAA/vC,WAAAA;YAUpCC,YACmCoK,IACF2lB,IAAAA;AAE/B5vB,oBAAAA,GAHiC,KAAAiK,iBAAAA,IACF,KAAA2lB,eAAAA,IAXzB,KAAAkyC,aAAqD,CAAC,GACtD,KAAAC,aAAoD,CAAC,GACrD,KAAAC,kBAA0B,IAC1B,KAAAC,kBAA0B,IAC1B,KAAAC,aAAqC,MAE5B,KAAAC,oBAAoB/hE,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACvC,KAAAmX,mBAAoBthB,KAAK+hE,kBAAkB13D;AAQzD,yBAAW23D,MAAQlzD,OAAO0gD,KAAKoR,CAAAA;AAAoB5gE,qBAAKiiE,YAAYD,IAAMpB,EAAkBoB,EAAAA,CAAAA;AAC5F,yBAAWA,MAAQlzD,OAAO0gD,KAAK8R,CAAAA;AAAoBthE,qBAAKkiE,YAAYF,IAAMV,EAAkBU,EAAAA,CAAAA;AAE5FhiE,mBAAKgX,MAAAA;YACP;YAEOirD,YAAYD,IAAc9vD,IAAAA;AAC/BlS,mBAAK0hE,WAAWM,EAAAA,IAAQ9vD;YAC1B;YAEOgwD,YAAYF,IAAcG,IAAAA;AAC/BniE,mBAAK2hE,WAAWK,EAAAA,IAAQG;YAC1B;YAEWxgD,IAAAA,iBAAAA;AACT,qBAAO3hB,KAAK4hE;YACd;YAEW1iD,IAAAA,uBAAAA;AACT,qBAAwD,MAAjDlf,KAAK0hE,WAAW1hE,KAAK4hE,eAAAA,EAAiBrgD;YAC/C;YAEWI,IAAAA,eAAeqgD,IAAAA;AACxB,kBAAA,CAAKhiE,KAAK0hE,WAAWM,EAAAA;AACnB,sBAAM,IAAItgE,MAAM,qBAAqBsgE,KAAAA;AAEvChiE,mBAAK4hE,kBAAkBI,IACvBhiE,KAAK+hE,kBAAkBryD,KAAK1P,KAAK0hE,WAAWM,EAAAA,EAAMzgD,MAAAA;YACpD;YAEWigC,IAAAA,iBAAAA;AACT,qBAAOxhD,KAAK6hE;YACd;YAEWrgB,IAAAA,eAAewgB,IAAAA;AACxB,kBAAA,CAAKhiE,KAAK2hE,WAAWK,EAAAA;AACnB,sBAAM,IAAItgE,MAAM,qBAAqBsgE,KAAAA;AAEvChiE,mBAAK6hE,kBAAkBG;YACzB;YAEOhrD,QAAAA;AACLhX,mBAAK2hB,iBAAiB,QACtB3hB,KAAKwhD,iBAAiB,WACtBxhD,KAAK8hE,aAAa;YACpB;YAYOvhD,kBAAkBnhB,IAAAA;AAEvB,kBAAIA,GAAEohB,MAAM,KAAKphB,GAAEohB,OAAOxgB,KAAK6J,eAAe6D,QACzCtO,GAAEqhB,MAAM,KAAKrhB,GAAEqhB,OAAOzgB,KAAK6J,eAAenJ;AAC7C,uBAAA;AAIF,kBAAiB,MAAbtB,GAAE0b,UAAiD,OAAb1b,GAAE8gB;AAC1C,uBAAA;AAEF,kBAAiB,MAAb9gB,GAAE0b,UAAgD,OAAb1b,GAAE8gB;AACzC,uBAAA;AAEF,kBAAiB,MAAb9gB,GAAE0b,WAAkD,MAAb1b,GAAE8gB,UAAgD,MAAb9gB,GAAE8gB;AAChF,uBAAA;AAQF,kBAJA9gB,GAAEohB,OACFphB,GAAEqhB,OAGe,OAAbrhB,GAAE8gB,UACDlgB,KAAK8hE,cACL9hE,KAAKoiE,aAAapiE,KAAK8hE,YAAY1iE,IAA4B,iBAAzBY,KAAK6hE,eAAAA;AAE9C,uBAAA;AAIF,kBAAA,CAAK7hE,KAAK0hE,WAAW1hE,KAAK4hE,eAAAA,EAAiBd,SAAS1hE,EAAAA;AAClD,uBAAA;AAIF,oBAAMijE,KAASriE,KAAK2hE,WAAW3hE,KAAK6hE,eAAAA,EAAiBziE,EAAAA;AAYrD,qBAXIijE,OAE2B,cAAzBriE,KAAK6hE,kBACP7hE,KAAKwvB,aAAa8yC,mBAAmBD,EAAAA,IAErCriE,KAAKwvB,aAAaxoB,iBAAiBq7D,IAAAA,IAAQ,IAI/CriE,KAAK8hE,aAAa1iE,IAAAA;YAGpB;YAEOqiB,cAAcF,IAAAA;AACnB,qBAAO,EACLghD,MAAAA,CAAAA,EAAkB,IAAThhD,KACTihD,IAAAA,CAAAA,EAAgB,IAATjhD,KACPkhD,MAAAA,CAAAA,EAAkB,IAATlhD,KACTmhD,MAAAA,CAAAA,EAAkB,IAATnhD,KACTN,OAAAA,CAAAA,EAAmB,KAATM,IAAAA;YAEd;YAEQ6gD,aAAaO,IAAqBC,IAAqBC,IAAAA;AAC7D,kBAAIA,IAAQ;AACV,oBAAIF,GAAG72D,MAAM82D,GAAG92D;AAAG,yBAAA;AACnB,oBAAI62D,GAAG52D,MAAM62D,GAAG72D;AAAG,yBAAA;cAAO,OACrB;AACL,oBAAI42D,GAAGniD,QAAQoiD,GAAGpiD;AAAK,yBAAA;AACvB,oBAAImiD,GAAGliD,QAAQmiD,GAAGniD;AAAK,yBAAA;cAAO;AAEhC,qBAAIkiD,GAAG7nD,WAAW8nD,GAAG9nD,UACjB6nD,GAAGziD,WAAW0iD,GAAG1iD,UACjByiD,GAAGjiD,SAASkiD,GAAGliD,QACfiiD,GAAG/hD,QAAQgiD,GAAGhiD,OACd+hD,GAAGx+D,UAAUy+D,GAAGz+D;YAEtB;UAAA;AApJWorC,cAAgBjwC,GAAA,CAWxB,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAAogB,YAAAA,CAAAA,GAZQ6e,CAAAA,GAAAlwC,GAAAkwC,mBAAAA;QAAAA,GAAAA,MAAAA,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,cAAAA,KAAAA,QAAAA,KAAAA,cAAAA,SAAAA,IAAAA,IAAAA,IAAAA,IAAAA;AAAAA,gBAAAA,IAAAA,KAAAA,UAAAA,QAAAA,KAAAA,KAAAA,IAAAA,KAAAA,SAAAA,KAAAA,KAAAA,OAAAA,yBAAAA,IAAAA,EAAAA,IAAAA;AAAAA,gBAAAA,YAAAA,OAAAA,WAAAA,cAAAA,OAAAA,QAAAA;AAAAA,cAAAA,KAAAA,QAAAA,SAAAA,IAAAA,IAAAA,IAAAA,EAAAA;;AAAAA,uBAAAA,KAAAA,GAAAA,SAAAA,GAAAA,MAAAA,GAAAA;AAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,OAAAA,MAAAA,KAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,MAAAA;AAAAA,mBAAAA,KAAAA,KAAAA,MAAAA,OAAAA,eAAAA,IAAAA,IAAAA,EAAAA,GAAAA;UAAAA,GAAAA,IAAAA,QAAAA,KAAAA,WAAAA,SAAAA,IAAAA,IAAAA;AAAAA,mBAAAA,SAAAA,IAAAA,IAAAA;AAAAA,cAAAA,GAAAA,IAAAA,IAAAA,EAAAA;YAAAA;UAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,cAAAA;ACnKb,gBAAA,IAAArwC,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GAEM4jE,IAAwBh0D,OAAOo4B,OAAO,EAC1CyX,YAAAA,MAAY,CAAA,GAGRokB,IAA8Cj0D,OAAOo4B,OAAO,EAChEnlB,uBAAAA,OACAw/B,mBAAAA,OACA56C,oBAAAA,OACAihB,QAAAA,OACAg4B,mBAAAA,OACAzmC,WAAAA,OACAulC,YAAAA,KAAY,CAAA;AAGd,cAAapP,IAAb,cAAiC,EAAA9vC,WAAAA;YAiB/BC,YACmCoK,IACH+R,IACInL,IAAAA;AAElC7Q,oBAAAA,GAJiC,KAAAiK,iBAAAA,IACH,KAAA+R,cAAAA,IACI,KAAAnL,kBAAAA,IAjB7B,KAAA8R,sBAAAA,OACA,KAAAgW,iBAAAA,OAIU,KAAAoW,UAAU3uC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC7B,KAAAykC,SAAS5uC,KAAK2uC,QAAQtkC,OACrB,KAAA24D,eAAehjE,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAClC,KAAAk4B,cAAcriC,KAAKgjE,aAAa34D,OAC/B,KAAAokC,YAAYzuC,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC/B,KAAAukC,WAAW1uC,KAAKyuC,UAAUpkC,OACzB,KAAA44D,2BAA2BjjE,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC9C,KAAA8lC,0BAA0BjwC,KAAKijE,yBAAyB54D,OAQtErK,KAAK4+C,SAAQ,GAAA,EAAAtT,OAAMw3B,CAAAA,GACnB9iE,KAAK+G,mBAAkB,GAAA,EAAAukC,OAAMy3B,CAAAA;YAC/B;YAEO/rD,QAAAA;AACLhX,mBAAK4+C,SAAQ,GAAA,EAAAtT,OAAMw3B,CAAAA,GACnB9iE,KAAK+G,mBAAkB,GAAA,EAAAukC,OAAMy3B,CAAAA;YAC/B;YAEO/7D,iBAAiBgb,IAAckhD,KAAAA,OAAwB;AAE5D,kBAAIljE,KAAKyQ,gBAAgBM,WAAWoyD;AAClC;AAIF,oBAAMv/D,KAAS5D,KAAK6J,eAAejG;AAC/Bs/D,cAAAA,MAAgBljE,KAAKyQ,gBAAgBM,WAAWkT,qBAAqBrgB,GAAOiW,UAAUjW,GAAOgC,SAC/F5F,KAAKijE,yBAAyBvzD,KAAAA,GAI5BwzD,MACFljE,KAAKgjE,aAAatzD,KAAAA,GAIpB1P,KAAK4b,YAAYC,MAAM,iBAAiBmG,OAAS,MAAMA,GAAKm8B,MAAM,EAAA,EAAInxC,IAAI5N,CAAAA,OAAKA,GAAEmlB,WAAW,CAAA,CAAA,CAAA,GAC5FvkB,KAAK2uC,QAAQj/B,KAAKsS,EAAAA;YACpB;YAEOsgD,mBAAmBtgD,IAAAA;AACpBhiB,mBAAKyQ,gBAAgBM,WAAWoyD,iBAGpCnjE,KAAK4b,YAAYC,MAAM,mBAAmBmG,OAAS,MAAMA,GAAKm8B,MAAM,EAAA,EAAInxC,IAAI5N,CAAAA,OAAKA,GAAEmlB,WAAW,CAAA,CAAA,CAAA,GAC9FvkB,KAAKyuC,UAAU/+B,KAAKsS,EAAAA;YACtB;UAAA;AA5DWstB,cAAWhwC,GAAA,CAkBnB,EAAA,GAAA,EAAAgR,cAAAA,GACA,EAAA,GAAA,EAAA++B,WAAAA,GACA,EAAA,GAAA,EAAAz8B,eAAAA,CAAAA,GApBQ08B,CAAAA,GAAAjwC,GAAAiwC,cAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,oBAAAA;ACpBb,gBAAAhwC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA,GAEA,IAAAA,GAAA,IAAA;AAKA,cAAIkkE,IAAQ,GACRC,IAAQ;AAEZ,gBAAa9sD,UAA0B,EAAA/W,WAAAA;YAiBrCC,cAAAA;AACEG,oBAAAA,GAVe,KAAA0jE,eAAgD,IAAI,EAAAC,WAAWnkE,CAAAA,OAAKA,QAAAA,KAAAA,SAAAA,GAAGosB,OAAO5a,IAAAA,GAE9E,KAAA4yD,0BAA0BxjE,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC7C,KAAA6gB,yBAAyBhrB,KAAKwjE,wBAAwBn5D,OACrD,KAAAo5D,uBAAuBzjE,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAC1C,KAAA8gB,sBAAsBjrB,KAAKyjE,qBAAqBp5D,OAO9DrK,KAAK4B,UAAS,GAAA,EAAAyB,cAAa,MAAA;AACzB,2BAAWg3B,MAAKr6B,KAAKsjE,aAAard,OAAAA;AAChCjmD,uBAAKyjE,qBAAqB/zD,KAAK2qB,EAAAA;AAEjCr6B,qBAAKgX,MAAAA;cAAO,CAAA,CAAA;YAEhB;YAXWvI,IAAAA,cAAAA;AAAuD,qBAAOzO,KAAKsjE,aAAard,OAAAA;YAAU;YAa9F9iC,mBAAmB7Z,IAAAA;AACxB,kBAAIA,GAAQkiB,OAAOumC;AACjB;AAEF,oBAAM7mC,KAAa,IAAIw4C,EAAWp6D,EAAAA;AAClC,kBAAI4hB,IAAY;AACd,sBAAMy4C,KAAgBz4C,GAAWM,OAAOwiC,UAAU,MAAM9iC,GAAW1hB,QAAAA,CAAAA;AACnE0hB,gBAAAA,GAAW8iC,UAAU,MAAA;AACf9iC,kBAAAA,OACElrB,KAAKsjE,aAAaz3C,OAAOX,EAAAA,KAC3BlrB,KAAKyjE,qBAAqB/zD,KAAKwb,EAAAA,GAEjCy4C,GAAcn6D,QAAAA;gBAAAA,CAAAA,GAGlBxJ,KAAKsjE,aAAaxd,OAAO56B,EAAAA,GACzBlrB,KAAKwjE,wBAAwB9zD,KAAKwb,EAAAA;cAAAA;AAEpC,qBAAOA;YACT;YAEOlU,QAAAA;AACL,yBAAWqjB,MAAKr6B,KAAKsjE,aAAard,OAAAA;AAChC5rB,gBAAAA,GAAE7wB,QAAAA;AAEJxJ,mBAAKsjE,aAAat6D,MAAAA;YACpB;YAEO,CAAA,qBAAsB8C,IAAW8E,IAAc0pB,IAAAA;AAAAA,kBAAAA,IAAAA,IAAAA;AACpD,kBAAIspC,KAAO,GACPC,KAAO;AACX,yBAAWxpC,MAAKr6B,KAAKsjE,aAAaQ,eAAelzD,EAAAA;AAC/CgzD,gBAAAA,KAAkB,UAAXtkE,KAAA+6B,GAAE/wB,QAAQwC,MAAAA,WAACxM,KAAAA,KAAI,GACtBukE,KAAOD,MAAuB,UAAfn6D,KAAA4wB,GAAE/wB,QAAQjD,UAAAA,WAAKoD,KAAAA,KAAI,IAC9BqC,MAAK83D,MAAQ93D,KAAI+3D,OAAAA,CAAUvpC,OAAyB,UAAf5wB,KAAA2wB,GAAE/wB,QAAQgxB,UAAAA,WAAK5wB,KAAAA,KAAI,cAAc4wB,QAAAA,MAClED;YAGZ;YAEOD,wBAAwBtuB,IAAW8E,IAAc0pB,IAAqC3pB,IAAAA;AAC3F3Q,mBAAKsjE,aAAatd,aAAap1C,IAAMypB,CAAAA,OAAAA;AAAAA,oBAAAA,IAAAA,IAAAA;AACnC+oC,oBAAmB,UAAX35D,KAAA4wB,GAAE/wB,QAAQwC,MAAAA,WAACrC,KAAAA,KAAI,GACvB45D,IAAQD,KAAwB,UAAf15D,KAAA2wB,GAAE/wB,QAAQjD,UAAAA,WAAKqD,KAAAA,KAAI,IAChCoC,MAAKs3D,KAASt3D,KAAIu3D,MAAAA,CAAW/oC,OAAyB,UAAf3wB,KAAA0wB,GAAE/wB,QAAQgxB,UAAAA,WAAK3wB,KAAAA,KAAI,cAAc2wB,OAC1E3pB,GAAS0pB,EAAAA;cAAAA,CAAAA;YAGf;YAEO7wB,UAAAA;AACL,yBAAW6wB,MAAKr6B,KAAKsjE,aAAard,OAAAA;AAChCjmD,qBAAKyjE,qBAAqB/zD,KAAK2qB,EAAAA;AAEjCr6B,mBAAKgX,MAAAA;YACP;UAAA;AAnFF,UAAA3X,GAAA,oBAAA;AAsFA,gBAAMqkE,UAAmB,EAAAlkE,WAAAA;YAkCvBC,YACkB6J,IAAAA;AAEhB1J,oBAAAA,GAFgB,KAAA0J,UAAAA,IAhCX,KAAAyoD,aAAAA,OAES,KAAArmC,kBAAkB1rB,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GACpC,KAAApI,WAAW/B,KAAK0rB,gBAAgBrhB,OAC/B,KAAA6nD,aAAalyD,KAAK4B,SAAS,IAAI,EAAAuI,cAAAA,GAChC,KAAA6jD,YAAYhuD,KAAKkyD,WAAW7nD,OAEpC,KAAA05D,YAAuC,MAYvC,KAAAC,YAAuC,MAgB7ChkE,KAAKwrB,SAASliB,GAAQkiB,QAClBxrB,KAAKsJ,QAAQgjB,wBAAAA,CAAyBtsB,KAAKsJ,QAAQgjB,qBAAqB/oB,aAC1EvD,KAAKsJ,QAAQgjB,qBAAqB/oB,WAAW;YAEjD;YA/BWg3B,IAAAA,qBAAAA;AAQT,qBAPuB,SAAnBv6B,KAAK+jE,cACH/jE,KAAKsJ,QAAQ+e,kBACfroB,KAAK+jE,YAAYzkE,GAAA2G,IAAIyS,QAAQ1Y,KAAKsJ,QAAQ+e,eAAAA,IAE1CroB,KAAK+jE,YAAAA,SAGF/jE,KAAK+jE;YACd;YAGWvpC,IAAAA,qBAAAA;AAQT,qBAPuB,SAAnBx6B,KAAKgkE,cACHhkE,KAAKsJ,QAAQ26D,kBACfjkE,KAAKgkE,YAAY1kE,GAAA2G,IAAIyS,QAAQ1Y,KAAKsJ,QAAQ26D,eAAAA,IAE1CjkE,KAAKgkE,YAAAA,SAGFhkE,KAAKgkE;YACd;YAYgBx6D,UAAAA;AACdxJ,mBAAKkyD,WAAWxiD,KAAAA,GAChB9P,MAAM4J,QAAAA;YACR;UAAA;QAAA,GAAA,MAAA,CAAApK,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,uBAAAA,GAAA,oBAAA;AC3IF,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA;AAEA,gBAAaglE,EAAAA;YAIXzkE,eAAekN,IAAAA;AAFP,mBAAAw3D,WAAW,oBAAI13D;AAGrB,yBAAK,CAAOgxB,IAAI2mC,EAAAA,KAAYz3D;AAC1B3M,qBAAK2I,IAAI80B,IAAI2mC,EAAAA;YAEjB;YAEOz7D,IAAO80B,IAA2B+gC,IAAAA;AACvC,oBAAM3tD,KAAS7Q,KAAKmkE,SAASt7D,IAAI40B,EAAAA;AAEjC,qBADAz9B,KAAKmkE,SAASx7D,IAAI80B,IAAI+gC,EAAAA,GACf3tD;YACT;YAEOvE,QAAQqE,IAAAA;AACb,yBAAK,CAAO/N,IAAKqE,EAAAA,KAAUjH,KAAKmkE,SAASx3D,QAAAA;AACvCgE,gBAAAA,GAAS/N,IAAKqE,EAAAA;YAElB;YAEO0G,IAAI8vB,IAAAA;AACT,qBAAOz9B,KAAKmkE,SAASx2D,IAAI8vB,EAAAA;YAC3B;YAEO50B,IAAO40B,IAAAA;AACZ,qBAAOz9B,KAAKmkE,SAASt7D,IAAI40B,EAAAA;YAC3B;UAAA;AA5BF,UAAAp+B,GAAA,oBAAA,GA+BAA,GAAA,uBAAA,MAAA;YAKEI,cAAAA;AAFiB,mBAAA4kE,YAA+B,IAAIH,KAGlDlkE,KAAKqkE,UAAU17D,IAAIrJ,GAAA63B,uBAAuBn3B,IAAAA;YAC5C;YAEOwW,WAAcinB,IAA2B+gC,IAAAA;AAC9Cx+D,mBAAKqkE,UAAU17D,IAAI80B,IAAI+gC,EAAAA;YACzB;YAEO8F,WAAc7mC,IAAAA;AACnB,qBAAOz9B,KAAKqkE,UAAUx7D,IAAI40B,EAAAA;YAC5B;YAEOpnB,eAAkBkuD,OAAcvgB,IAAAA;AACrC,oBAAMwgB,MAAsB,GAAA,EAAAC,wBAAuBF,EAAAA,EAAMG,KAAK,CAACzlE,IAAGmoC,OAAMnoC,GAAE2O,QAAQw5B,GAAEx5B,KAAAA,GAE9E+2D,KAAqB,CAAA;AAC3B,yBAAWC,MAAcJ,IAAqB;AAC5C,sBAAMJ,KAAUpkE,KAAKqkE,UAAUx7D,IAAI+7D,GAAWnnC,EAAAA;AAC9C,oBAAA,CAAK2mC;AACH,wBAAM,IAAI1iE,MAAM,oBAAoB6iE,GAAKvC,mCAAmC4C,GAAWnnC,KAAAA;AAEzFknC,gBAAAA,GAAYpgE,KAAK6/D,EAAAA;cAAAA;AAGnB,oBAAMS,KAAqBL,GAAoBvjE,SAAS,IAAIujE,GAAoB,CAAA,EAAG52D,QAAQo2C,GAAK/iD;AAGhG,kBAAI+iD,GAAK/iD,WAAW4jE;AAClB,sBAAM,IAAInjE,MAAM,gDAAgD6iE,GAAKvC,oBAAoB6C,KAAqB,oBAAoB7gB,GAAK/iD,yBAAAA;AAIzI,qBAAO,IAAIsjE,GAAAA,GAAQ,CAAA,GAAIvgB,IAAAA,GAAS2gB,EAAAA,CAAAA;YAClC;UAAA;QAAA,GAAA,MAAA,SAAAvlE,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAAL,KAAAG,GAAA,SAAA,GAAAH,MAAA,GAAAA;AAAA,iBAAAwK,KAAArK,GAAAH,EAAA,OAAA0K,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,aAAA;AC9EF,gBAAA,IAAAH,GAAA,GAAA,GACA,IAAAA,GAAA,IAAA,GAgBM4lE,IAAwD,EAC5DjpD,OAAO,EAAAk1B,aAAakN,OACpB8mB,MAAM,EAAAh0B,aAAai0B,MACnBryD,MAAM,EAAAo+B,aAAaC,MACnBzS,OAAO,EAAAwS,aAAak0B,OACpBC,KAAK,EAAAn0B,aAAao0B,IAAAA;AAKpB,cAAa/1B,IAAb,cAAgC,EAAA5vC,WAAAA;YAK9BC,YACoCgR,IAAAA;AAElC7Q,oBAAAA,GAFkC,KAAA6Q,kBAAAA,IAH7B,KAAA+Q,WAAyB,EAAAuvB,aAAao0B,KAM3CnlE,KAAKolE,gBAAAA,GACLplE,KAAK4B,SAAS5B,KAAKyQ,gBAAgB8O,uBAAuB,YAAY,MAAMvf,KAAKolE,gBAAAA,CAAAA,CAAAA;YACnF;YAEQA,kBAAAA;AACNplE,mBAAKwhB,WAAWsjD,EAAqB9kE,KAAKyQ,gBAAgBM,WAAWyQ,QAAAA;YACvE;YAEQ6jD,wBAAwBC,IAAAA;AAC9B,uBAASpmE,KAAI,GAAGA,KAAIomE,GAAerkE,QAAQ/B;AACR,8BAAA,OAAtBomE,GAAepmE,EAAAA,MACxBomE,GAAepmE,EAAAA,IAAKomE,GAAepmE,EAAAA,EAAAA;YAGzC;YAEQqmE,KAAKn8D,IAAeo8D,IAAiBF,IAAAA;AAC3CtlE,mBAAKqlE,wBAAwBC,EAAAA,GAC7Bl8D,GAAKqpC,KAAK//B,SA7BK,eA6BiB8yD,IAAAA,GAAYF,EAAAA;YAC9C;YAEOzpD,MAAM2pD,OAAoBF,IAAAA;AAC3BtlE,mBAAKwhB,YAAY,EAAAuvB,aAAakN,SAChCj+C,KAAKulE,KAAK7yD,QAAQ+yD,KAAKD,IAASF,EAAAA;YAEpC;YAEOP,KAAKS,OAAoBF,IAAAA;AAC1BtlE,mBAAKwhB,YAAY,EAAAuvB,aAAai0B,QAChChlE,KAAKulE,KAAK7yD,QAAQqyD,MAAMS,IAASF,EAAAA;YAErC;YAEO3yD,KAAK6yD,OAAoBF,IAAAA;AAC1BtlE,mBAAKwhB,YAAY,EAAAuvB,aAAaC,QAChChxC,KAAKulE,KAAK7yD,QAAQC,MAAM6yD,IAASF,EAAAA;YAErC;YAEO/mC,MAAMinC,OAAoBF,IAAAA;AAC3BtlE,mBAAKwhB,YAAY,EAAAuvB,aAAak0B,SAChCjlE,KAAKulE,KAAK7yD,QAAQ6rB,OAAOinC,IAASF,EAAAA;YAEtC;UAAA;AApDWl2B,cAAU9vC,GAAA,CAMlB,EAAA,GAAA,EAAAsT,eAAAA,CAAAA,GANQw8B,CAAAA,GAAA/vC,GAAA+vC,aAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA,iBAAAA,eAAAA,IAAAA,cAAAA,EAAAA,OAAAA,KAAAA,CAAAA,GAAAA,GAAAA,iBAAAA,GAAAA,kBAAAA;AC1Bb,gBAAA9vC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,IAAA,GAEA,IAAAA,GAAA,GAAA;AAEa,UAAAG,GAAAqmE,kBAAwD,EACnEh4D,MAAM,IACNhN,MAAM,IACNg2B,aAAAA,OACAE,aAAa,SACbvB,aAAa,GACbswC,cAAAA,MACArsC,4BAAAA,MACAlP,oBAAoB,OACpBC,uBAAuB,GACvBkG,YAAY,mCACZC,UAAU,IACVoE,YAAY,UACZC,gBAAgB,QAChBxa,YAAY,GACZia,eAAe,GACfxjB,aAAa,MACb0Q,UAAU,QACVyoC,YAAY,KACZhmC,mBAAAA,MACAqG,mBAAmB,GACnBjL,kBAAAA,OACAiK,sBAAsB,GACtBvF,iBAAAA,OACA6f,+BAAAA,OACAxI,sBAAsB,GACtB+nC,cAAAA,OACAyC,kBAAAA,OACAC,mBAAAA,OACA/X,cAAc,GACd9lB,OAAO,CAAC,GACRhtB,uBAAuB,EAAA9V,OACvB80C,eAAe,CAAC,GAChBlI,aAAAA,OACAxL,eAAe,gBACfzB,qBAAAA,MACA8a,YAAAA,OACAyB,UAAU,SACVn7B,cAAAA,OACAzG,oBAAoB,EAAA;AAGtB,gBAAMsmD,IAAqD,CAAC,UAAU,QAAQ,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAA;AAEtI,gBAAa52B,UAAuB,EAAA1vC,WAAAA;YASlCC,YAAY6J,IAAAA;AACV1J,oBAAAA,GAJe,KAAAmmE,kBAAkB/lE,KAAK4B,SAAS,IAAItC,GAAA6K,cAAAA,GACrC,KAAA0pB,iBAAiB7zB,KAAK+lE,gBAAgB17D;AAKpD,oBAAM27D,KAAiB,OAAH,OAAA,CAAA,GAAQ3mE,GAAAqmE,eAAAA;AAC5B,yBAAW9iE,MAAO0G;AAChB,oBAAI1G,MAAOojE;AACT,sBAAA;AACE,0BAAM51C,KAAW9mB,GAAQ1G,EAAAA;AACzBojE,oBAAAA,GAAepjE,EAAAA,IAAO5C,KAAKimE,2BAA2BrjE,IAAKwtB,EAAAA;kBAAAA,SACpDhxB,IAAP;AACAsT,4BAAQ6rB,MAAMn/B,EAAAA;kBAAAA;AAMpBY,mBAAK+Q,aAAai1D,IAClBhmE,KAAKsJ,UAAU,OAAH,OAAA,CAAA,GAAS08D,EAAAA,GACrBhmE,KAAKkmE,cAAAA;YACP;YAGO3mD,uBAAyD3c,IAAQuR,IAAAA;AACtE,qBAAOnU,KAAK6zB,eAAesyC,CAAAA,OAAAA;AACrBA,gBAAAA,OAAavjE,MACfuR,GAASnU,KAAK+Q,WAAWnO,EAAAA,CAAAA;cAAAA,CAAAA;YAG/B;YAGO85B,uBAAuB8yB,IAAkCr7C,IAAAA;AAC9D,qBAAOnU,KAAK6zB,eAAesyC,CAAAA,OAAAA;AAAAA,uBACrB3W,GAAKzkD,QAAQo7D,EAAAA,KACfhyD,GAAAA;cAAAA,CAAAA;YAGN;YAEQ+xD,gBAAAA;AACN,oBAAME,KAAUC,CAAAA,OAAAA;AACd,oBAAA,EAAMA,MAAYhnE,GAAAqmE;AAChB,wBAAM,IAAIhkE,MAAM,uBAAuB2kE,KAAAA;AAEzC,uBAAOrmE,KAAK+Q,WAAWs1D,EAAAA;cAAS,GAG5BC,KAAS,CAACD,IAAkBp/D,OAAAA;AAChC,oBAAA,EAAMo/D,MAAYhnE,GAAAqmE;AAChB,wBAAM,IAAIhkE,MAAM,uBAAuB2kE,KAAAA;AAGzCp/D,gBAAAA,KAAQjH,KAAKimE,2BAA2BI,IAAUp/D,EAAAA,GAE9CjH,KAAK+Q,WAAWs1D,EAAAA,MAAcp/D,OAChCjH,KAAK+Q,WAAWs1D,EAAAA,IAAYp/D,IAC5BjH,KAAK+lE,gBAAgBr2D,KAAK22D,EAAAA;cAAAA;AAI9B,yBAAWA,MAAYrmE,KAAK+Q,YAAY;AACtC,sBAAMw1D,KAAO,EACX19D,KAAKu9D,GAAO9kE,KAAKtB,MAAMqmE,EAAAA,GACvB19D,KAAK29D,GAAOhlE,KAAKtB,MAAMqmE,EAAAA,EAAAA;AAEzBv3D,uBAAO03D,eAAexmE,KAAKsJ,SAAS+8D,IAAUE,EAAAA;cAAAA;YAElD;YAEQN,2BAA2BrjE,IAAaqE,IAAAA;AAC9C,sBAAQrE,IAAAA;gBACN,KAAK;AAIH,sBAHKqE,OACHA,KAAQ5H,GAAAqmE,gBAAgB9iE,EAAAA,IAAAA,CAqDlC,SAAuBqE,IAAAA;AACrB,2BAAiB,YAAVA,MAA+B,gBAAVA,MAAmC,UAAVA;kBACvD,EArD2BA,EAAAA;AACjB,0BAAM,IAAIvF,MAAM,IAAIuF,gCAAmCrE,IAAAA;AAEzD;gBACF,KAAK;AACEqE,kBAAAA,OACHA,KAAQ5H,GAAAqmE,gBAAgB9iE,EAAAA;AAE1B;gBACF,KAAK;gBACL,KAAK;AACH,sBAAqB,YAAA,OAAVqE,MAAsB,KAAKA,MAASA,MAAS;AAEtD;AAEFA,kBAAAA,KAAQ6+D,EAAoB7zD,SAAShL,EAAAA,IAASA,KAAQ5H,GAAAqmE,gBAAgB9iE,EAAAA;AACtE;gBACF,KAAK;AACHqE,kBAAAA,KAAQ0M,KAAKuW,MAAMjjB,EAAAA;gBAErB,KAAK;gBACL,KAAK;AACH,sBAAIA,KAAQ;AACV,0BAAM,IAAIvF,MAAM,GAAGkB,oCAAqCqE,IAAAA;AAE1D;gBACF,KAAK;AACHA,kBAAAA,KAAQ0M,KAAKG,IAAI,GAAGH,KAAKC,IAAI,IAAID,KAAKkV,MAAc,KAAR5hB,EAAAA,IAAc,EAAA,CAAA;AAC1D;gBACF,KAAK;AAEH,uBADAA,KAAQ0M,KAAKC,IAAI3M,IAAO,UAAA,KACZ;AACV,0BAAM,IAAIvF,MAAM,GAAGkB,oCAAqCqE,IAAAA;AAE1D;gBACF,KAAK;gBACL,KAAK;AACH,sBAAIA,MAAS;AACX,0BAAM,IAAIvF,MAAM,GAAGkB,gDAAiDqE,IAAAA;gBAExE,KAAK;gBACL,KAAK;AACH,sBAAA,CAAKA,MAAmB,MAAVA;AACZ,0BAAM,IAAIvF,MAAM,GAAGkB,8BAA+BqE,IAAAA;cAAAA;AAIxD,qBAAOA;YACT;UAAA;AApIF,UAAA5H,GAAA,iBAAA;QAAA,GAAA,MAAA,SAAAD,IAAAC,IAAAH,IAAA;AAAA,cAAAI,KAAA,QAAA,KAAA,cAAA,SAAAF,IAAAC,IAAAH,IAAAI,IAAA;AAAA,gBAAAmK,IAAAC,KAAA,UAAA,QAAAC,KAAAD,KAAA,IAAArK,KAAA,SAAAC,KAAAA,KAAA,OAAA,yBAAAD,IAAAH,EAAA,IAAAI;AAAA,gBAAA,YAAA,OAAA,WAAA,cAAA,OAAA,QAAA;AAAA,cAAAqK,KAAA,QAAA,SAAAvK,IAAAC,IAAAH,IAAAI,EAAA;;AAAA,uBAAA,IAAAF,GAAA,SAAA,GAAA,KAAA,GAAA;AAAA,iBAAAqK,KAAArK,GAAA,CAAA,OAAAuK,MAAAD,KAAA,IAAAD,GAAAE,EAAA,IAAAD,KAAA,IAAAD,GAAApK,IAAAH,IAAAyK,EAAA,IAAAF,GAAApK,IAAAH,EAAA,MAAAyK;AAAA,mBAAAD,KAAA,KAAAC,MAAA,OAAA,eAAAtK,IAAAH,IAAAyK,EAAA,GAAAA;UAAA,GAAA,IAAA,QAAA,KAAA,WAAA,SAAAvK,IAAAC,IAAA;AAAA,mBAAA,SAAAH,IAAAI,IAAA;AAAA,cAAAD,GAAAH,IAAAI,IAAAF,EAAA;YAAA;UAAA;AAAA,iBAAA,eAAAC,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,iBAAA;ACnDA,gBAAA,IAAAH,GAAA,IAAA;AAGA,cAAa6wC,IAAb,MAAA;YAiBEtwC,YACmCoK,IAAAA;AAAA,mBAAAA,iBAAAA,IAf3B,KAAAooD,UAAU,GAKV,KAAAwU,iBAAmD,oBAAIh6D,OAOvD,KAAAi6D,gBAAsE,oBAAIj6D;YAKlF;YAEO83C,aAAaviC,IAAAA;AAClB,oBAAMpe,KAAS5D,KAAK6J,eAAejG;AAGnC,kBAAA,WAAIoe,GAAKyb,IAAkB;AACzB,sBAAMjS,KAAS5nB,GAAOqf,UAAUrf,GAAOiW,QAAQjW,GAAOmI,CAAAA,GAChDg1B,KAA2B,EAC/B/e,MAAAA,IACAyb,IAAIz9B,KAAKiyD,WACTpuD,OAAO,CAAC2nB,EAAAA,EAAAA;AAIV,uBAFAA,GAAOwiC,UAAU,MAAMhuD,KAAK2mE,sBAAsB5lC,IAAOvV,EAAAA,CAAAA,GACzDxrB,KAAK0mE,cAAc/9D,IAAIo4B,GAAMtD,IAAIsD,EAAAA,GAC1BA,GAAMtD;cAAAA;AAIf,oBAAMmpC,KAAW5kD,IACXpf,KAAM5C,KAAK6mE,eAAeD,EAAAA,GAC1Bx5B,KAAQptC,KAAKymE,eAAe59D,IAAIjG,EAAAA;AACtC,kBAAIwqC;AAEF,uBADAptC,KAAKo/C,cAAchS,GAAM3P,IAAI75B,GAAOiW,QAAQjW,GAAOmI,CAAAA,GAC5CqhC,GAAM3P;AAIf,oBAAMjS,KAAS5nB,GAAOqf,UAAUrf,GAAOiW,QAAQjW,GAAOmI,CAAAA,GAChDg1B,KAA6B,EACjCtD,IAAIz9B,KAAKiyD,WACTrvD,KAAK5C,KAAK6mE,eAAeD,EAAAA,GACzB5kD,MAAM4kD,IACN/iE,OAAO,CAAC2nB,EAAAA,EAAAA;AAKV,qBAHAA,GAAOwiC,UAAU,MAAMhuD,KAAK2mE,sBAAsB5lC,IAAOvV,EAAAA,CAAAA,GACzDxrB,KAAKymE,eAAe99D,IAAIo4B,GAAMn+B,KAAKm+B,EAAAA,GACnC/gC,KAAK0mE,cAAc/9D,IAAIo4B,GAAMtD,IAAIsD,EAAAA,GAC1BA,GAAMtD;YACf;YAEO2hB,cAAc0nB,IAAgB/6D,IAAAA;AACnC,oBAAMg1B,KAAQ/gC,KAAK0mE,cAAc79D,IAAIi+D,EAAAA;AACrC,kBAAK/lC,MAGDA,GAAMl9B,MAAMkjE,MAAM3nE,CAAAA,OAAKA,GAAEwR,SAAS7E,EAAAA,GAAI;AACxC,sBAAMyf,KAASxrB,KAAK6J,eAAejG,OAAOqf,UAAUlX,EAAAA;AACpDg1B,gBAAAA,GAAMl9B,MAAMU,KAAKinB,EAAAA,GACjBA,GAAOwiC,UAAU,MAAMhuD,KAAK2mE,sBAAsB5lC,IAAOvV,EAAAA,CAAAA;cAAAA;YAE7D;YAEO7Z,YAAYm1D,IAAAA;AAAAA,kBAAAA;AACjB,qBAAqC,UAA9BznE,KAAAW,KAAK0mE,cAAc79D,IAAIi+D,EAAAA,MAAAA,WAAOznE,KAAA,SAAAA,GAAE2iB;YACzC;YAEQ6kD,eAAeG,IAAAA;AACrB,qBAAO,GAAGA,GAASvpC,OAAOupC,GAASp1D;YACrC;YAEQ+0D,sBAAsB5lC,IAAgDvV,IAAAA;AAC5E,oBAAM5d,KAAQmzB,GAAMl9B,MAAMkH,QAAQygB,EAAAA;AAAAA,qBAC9B5d,OAGJmzB,GAAMl9B,MAAMmH,OAAO4C,IAAO,CAAA,GACC,MAAvBmzB,GAAMl9B,MAAM5C,WAAAA,WACV8/B,GAAM/e,KAAKyb,MACbz9B,KAAKymE,eAAe56C,OAAQkV,GAA8Bn+B,GAAAA,GAE5D5C,KAAK0mE,cAAc76C,OAAOkV,GAAMtD,EAAAA;YAEpC;UAAA;AA7FWsS,cAAczwC,GAAA,CAkBtB,EAAA,GAAA,EAAAgR,cAAAA,CAAAA,GAlBQy/B,CAAAA,GAAA1wC,GAAA0wC,iBAAAA;QAAAA,GAAAA,MAAAA,CAAAA,IAAAA,OAAAA;ACkCb,mBAASk3B,GAAuBxpC,IAAch6B,IAAkBmK,IAAAA;AACzDnK,YAAAA,GAAwB,cAAMA,KAChCA,GAA8B,gBAAEc,KAAK,EAAEk5B,IAAAA,IAAI7vB,OAAAA,GAAAA,CAAAA,KAE3CnK,GAA8B,kBAAI,CAAC,EAAEg6B,IAAAA,IAAI7vB,OAAAA,GAAAA,CAAAA,GACzCnK,GAAwB,YAAIA;UAEjC;AAAA,iBAAA,eAAApE,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,kBAAAA,GAAA,yBAAAA,GAAA,kBAAA,QAhCaA,GAAA6nE,kBAAwD,oBAAIz6D,OAEzEpN,GAAA,yBAAA,SAAuCklE,IAAAA;AACrC,mBAAOA,GAAoB,mBAAK,CAAA;UAClC,GAEAllE,GAAA,kBAAA,SAAmCo+B,IAAAA;AACjC,gBAAIp+B,GAAA6nE,gBAAgBv5D,IAAI8vB,EAAAA;AACtB,qBAAOp+B,GAAA6nE,gBAAgBr+D,IAAI40B,EAAAA;AAG7B,kBAAM0pC,KAAiB,SAAU1jE,IAAkBb,IAAagL,GAAAA;AAC9D,kBAAyB,MAArBw5D,UAAUnmE;AACZ,sBAAM,IAAIS,MAAM,kEAAA;AAGlBulE,cAAAA,GAAuBE,IAAW1jE,IAAQmK,CAAAA;YAC5C;AAKA,mBAHAu5D,GAAU1hE,WAAW,MAAMg4B,IAE3Bp+B,GAAA6nE,gBAAgBv+D,IAAI80B,IAAI0pC,EAAAA,GACjBA;UACT;QAAA,GAAA,MAAA,CAAA/nE,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,qBAAAA,GAAA,kBAAAA,GAAA,kBAAAA,GAAA,kBAAAA,GAAA,cAAAA,GAAA,eAAAA,GAAA,wBAAAA,GAAA,kBAAAA,GAAA,eAAAA,GAAA,oBAAAA,GAAA,iBAAA;AC/BA,gBAAAC,KAAAJ,GAAA,IAAA;AAmJA,cAAY6xC;AAhJC,UAAA1xC,GAAAiR,kBAAiB,GAAAhR,GAAAqnC,iBAAgC,eAAA,GAqBjDtnC,GAAAmwC,qBAAoB,GAAAlwC,GAAAqnC,iBAAmC,kBAAA,GAgCvDtnC,GAAAqxB,gBAAe,GAAApxB,GAAAqnC,iBAA8B,aAAA,GAsC7CtnC,GAAAywC,mBAAkB,GAAAxwC,GAAAqnC,iBAAiC,gBAAA,GA4CnDtnC,GAAA83B,yBAAwB,GAAA73B,GAAAqnC,iBAAuC,sBAAA,IAShEoK,IAAA1xC,GAAA0xC,iBAAA1xC,GAAA0xC,eAAY,CAAA,IACtB,EAAA,QAAA,CAAA,IAAA,SACA,EAAA,EAAA,OAAA,CAAA,IAAA,QACA,EAAA,EAAA,OAAA,CAAA,IAAA,QACA,EAAA,EAAA,QAAA,CAAA,IAAA,SACA,EAAA,EAAA,MAAA,CAAA,IAAA,OAGW1xC,GAAAgwC,eAAc,GAAA/vC,GAAAqnC,iBAA6B,YAAA,GAY3CtnC,GAAAuT,mBAAkB,GAAAtT,GAAAqnC,iBAAiC,gBAAA,GAiHnDtnC,GAAAwT,mBAAkB,GAAAvT,GAAAqnC,iBAAiC,gBAAA,GAgBnDtnC,GAAAswC,mBAAkB,GAAArwC,GAAAqnC,iBAAiC,gBAAA,GAwBnDtnC,GAAAoX,sBAAqB,GAAAnX,GAAAqnC,iBAAoC,mBAAA;QAAA,GAAA,MAAA,CAAAvnC,IAAAC,IAAAH,OAAA;AAAA,iBAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,iBAAA;ACnUtE,gBAAAC,KAAAJ,GAAA,IAAA,GACA,IAAAA,GAAA,GAAA;AAEA,UAAAG,GAAA,iBAAA,MAAA;YAUEI,cAAAA;AAPQ,mBAAA4nE,aAAuDv4D,uBAAO2pD,OAAO,IAAA,GACrE,KAAAC,UAAkB,IAGT,KAAA4O,YAAY,IAAIhoE,GAAA6K,gBACjB,KAAAo9D,WAAWvnE,KAAKsnE,UAAUj9D;AAGxC,oBAAMm9D,KAAkB,IAAI,EAAAC;AAC5BznE,mBAAK4B,SAAS4lE,EAAAA,GACdxnE,KAAK04D,UAAU8O,GAAgB3Q,SAC/B72D,KAAK0nE,kBAAkBF;YACzB;YAEOh+D,UAAAA;AACLxJ,mBAAKsnE,UAAU99D,QAAAA;YACjB;YAEWy2D,IAAAA,WAAAA;AACT,qBAAOnxD,OAAO0gD,KAAKxvD,KAAKqnE,UAAAA;YAC1B;YAEWnH,IAAAA,gBAAAA;AACT,qBAAOlgE,KAAK04D;YACd;YAEWwH,IAAAA,cAAcrJ,IAAAA;AACvB,kBAAA,CAAK72D,KAAKqnE,WAAWxQ,EAAAA;AACnB,sBAAM,IAAIn1D,MAAM,4BAA4Bm1D,KAAAA;AAE9C72D,mBAAK04D,UAAU7B,IACf72D,KAAK0nE,kBAAkB1nE,KAAKqnE,WAAWxQ,EAAAA,GACvC72D,KAAKsnE,UAAU53D,KAAKmnD,EAAAA;YACtB;YAEOj1D,SAASo+D,IAAAA;AACdhgE,mBAAKqnE,WAAWrH,GAASnJ,OAAAA,IAAWmJ;YACtC;YAKO/gB,QAAQ6X,IAAAA;AACb,qBAAO92D,KAAK0nE,gBAAgBzoB,QAAQ6X,EAAAA;YACtC;YAEO6Q,mBAAmBroE,IAAAA;AACxB,kBAAIuR,KAAS;AACb,oBAAM5P,KAAS3B,GAAE2B;AACjB,uBAAS/B,KAAI,GAAGA,KAAI+B,IAAAA,EAAU/B,IAAG;AAC/B,oBAAI63C,KAAOz3C,GAAEilB,WAAWrlB,EAAAA;AAExB,oBAAI,SAAU63C,MAAQA,MAAQ,OAAQ;AACpC,sBAAA,EAAM73C,MAAK+B;AAMT,2BAAO4P,KAAS7Q,KAAKi/C,QAAQlI,EAAAA;AAE/B,wBAAM2M,IAASpkD,GAAEilB,WAAWrlB,EAAAA;AAGxB,2BAAUwkD,KAAUA,KAAU,QAChC3M,KAAyB,QAAjBA,KAAO,SAAkB2M,IAAS,QAAS,QAEnD7yC,MAAU7Q,KAAKi/C,QAAQyE,CAAAA;gBAAAA;AAG3B7yC,gBAAAA,MAAU7Q,KAAKi/C,QAAQlI,EAAAA;cAAAA;AAEzB,qBAAOlmC;YACT;UAAA;QAAA,EAAA,GCnFE+2D,IAA2B,CAAC;AAGhC,iBAASC,EAAoBC,IAAAA;AAE5B,cAAIC,IAAeH,EAAyBE,EAAAA;AAC5C,cAAA,WAAIC;AACH,mBAAOA,EAAalpE;AAGrB,cAAIC,IAAS8oE,EAAyBE,EAAAA,IAAY,EAGjDjpE,SAAS,CAAC,EAAA;AAOX,iBAHAmpE,EAAoBF,EAAAA,EAAUr1B,KAAK3zC,EAAOD,SAASC,GAAQA,EAAOD,SAASgpE,CAAAA,GAGpE/oE,EAAOD;QACf;AAAA,YAAA,IAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAAO,KAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,WAAA;ACfA,gBAAAC,KAAA,EAAA,IAAA,GACA,IAAA,EAAA,IAAA,GAEA,IAAA,EAAA,IAAA,GACA,IAAA,EAAA,IAAA,GACA,IAAA,EAAA,IAAA,GACA,IAAA,EAAA,IAAA,GAMM4oE,IAA2B,CAAC,QAAQ,MAAA;AAE1C,UAAA7oE,GAAA,WAAA,MAAA;YAOEK,YAAY6J,IAAAA;AACVtJ,mBAAKs/D,QAAQ,IAAIjgE,GAAAsV,SAAarL,EAAAA,GAC9BtJ,KAAKkoE,gBAAgB,IAAI,EAAAC,gBAEzBnoE,KAAKooE,iBAAiB,OAAH,OAAA,CAAA,GAASpoE,KAAKs/D,MAAMh2D,OAAAA;AACvC,oBAAM88D,KAAUC,CAAAA,OACPrmE,KAAKs/D,MAAMh2D,QAAQ+8D,EAAAA,GAEtBC,KAAS,CAACD,IAAkBp/D,OAAAA;AAChCjH,qBAAKqoE,sBAAsBhC,EAAAA,GAC3BrmE,KAAKs/D,MAAMh2D,QAAQ+8D,EAAAA,IAAYp/D;cAAK;AAGtC,yBAAWo/D,MAAYrmE,KAAKs/D,MAAMh2D,SAAS;AACzC,sBAAMi9D,KAAO,EACX19D,KAAKu9D,GAAO9kE,KAAKtB,MAAMqmE,EAAAA,GACvB19D,KAAK29D,GAAOhlE,KAAKtB,MAAMqmE,EAAAA,EAAAA;AAEzBv3D,uBAAO03D,eAAexmE,KAAKooE,gBAAgB/B,IAAUE,EAAAA;cAAAA;YAEzD;YAEQ8B,sBAAsBhC,IAAAA;AAI5B,kBAAI4B,EAAyBh2D,SAASo0D,EAAAA;AACpC,sBAAM,IAAI3kE,MAAM,WAAW2kE,wCAAAA;YAE/B;YAEQiC,oBAAAA;AACN,kBAAA,CAAKtoE,KAAKs/D,MAAMhgD,eAAevO,WAAW60D;AACxC,sBAAM,IAAIlkE,MAAM,sEAAA;YAEpB;YAEWkU,IAAAA,SAAAA;AAAyB,qBAAO5V,KAAKs/D,MAAM1pD;YAAQ;YACnD84B,IAAAA,WAAAA;AAA6B,qBAAO1uC,KAAKs/D,MAAM5wB;YAAU;YACzDt5B,IAAAA,eAAAA;AAA+B,qBAAOpV,KAAKs/D,MAAMlqD;YAAc;YAC/Dw5B,IAAAA,SAAAA;AAA2B,qBAAO5uC,KAAKs/D,MAAM1wB;YAAQ;YACrDlsC,IAAAA,QAAAA;AAA4D,qBAAO1C,KAAKs/D,MAAM58D;YAAO;YACrFJ,IAAAA,aAAAA;AAA6B,qBAAOtC,KAAKs/D,MAAMh9D;YAAY;YAC3DP,IAAAA,WAAAA;AAAqD,qBAAO/B,KAAKs/D,MAAMv9D;YAAU;YACjFF,IAAAA,WAAAA;AAAqD,qBAAO7B,KAAKs/D,MAAMz9D;YAAU;YACjFK,IAAAA,WAAAA;AAA6B,qBAAOlC,KAAKs/D,MAAMp9D;YAAU;YACzDsT,IAAAA,oBAAAA;AAAoC,qBAAOxV,KAAKs/D,MAAM9pD;YAAmB;YACzEE,IAAAA,gBAAAA;AAAkC,qBAAO1V,KAAKs/D,MAAM5pD;YAAe;YACnEs5B,IAAAA,gBAAAA;AAAgC,qBAAOhvC,KAAKs/D,MAAMtwB;YAAe;YAEjEvtC,IAAAA,UAAAA;AAAqC,qBAAOzB,KAAKs/D,MAAM79D;YAAS;YAChE8mE,IAAAA,SAAAA;AAIT,qBAHKvoE,KAAKy0C,YACRz0C,KAAKy0C,UAAU,IAAI,EAAA+zB,UAAUxoE,KAAKs/D,KAAAA,IAE7Bt/D,KAAKy0C;YACd;YACWg0B,IAAAA,UAAAA;AAET,qBADAzoE,KAAKsoE,kBAAAA,GACE,IAAI,EAAAI,WAAW1oE,KAAKs/D,KAAAA;YAC7B;YACWz4D,IAAAA,WAAAA;AAA8C,qBAAO7G,KAAKs/D,MAAMz4D;YAAU;YAC1EnG,IAAAA,OAAAA;AAAiB,qBAAOV,KAAKs/D,MAAM5+D;YAAM;YACzCgN,IAAAA,OAAAA;AAAiB,qBAAO1N,KAAKs/D,MAAM5xD;YAAM;YACzC9J,IAAAA,SAAAA;AAIT,qBAHK5D,KAAKsuD,YACRtuD,KAAKsuD,UAAU,IAAI,EAAAqa,mBAAmB3oE,KAAKs/D,KAAAA,IAEtCt/D,KAAKsuD;YACd;YACWtrC,IAAAA,UAAAA;AAET,qBADAhjB,KAAKsoE,kBAAAA,GACEtoE,KAAKs/D,MAAMt8C;YACpB;YACW47B,IAAAA,QAAAA;AACT,oBAAMoD,KAAIhiD,KAAKs/D,MAAMx4D,YAAYC;AACjC,kBAAI6hE,KAA+D;AACnE,sBAAQ5oE,KAAKs/D,MAAMrgD,iBAAiB0C,gBAAAA;gBAClC,KAAK;AAAOinD,kBAAAA,KAAoB;AAAO;gBACvC,KAAK;AAASA,kBAAAA,KAAoB;AAAS;gBAC3C,KAAK;AAAQA,kBAAAA,KAAoB;AAAQ;gBACzC,KAAK;AAAOA,kBAAAA,KAAoB;cAAA;AAElC,qBAAO,EACLC,2BAA2B7mB,GAAEjgC,uBAC7B+mD,uBAAuB9mB,GAAET,mBACzB56C,oBAAoBq7C,GAAEr7C,oBACtBg4C,YAAY3+C,KAAKs/D,MAAMx4D,YAAY83C,MAAMD,YACzCiqB,mBAAmBA,IACnBG,YAAY/mB,GAAEp6B,QACdohD,uBAAuBhnB,GAAEpC,mBACzBqpB,eAAejnB,GAAE7oC,WACjBslC,gBAAgBuD,GAAEtD,WAAAA;YAEtB;YACWp1C,IAAAA,UAAAA;AACT,qBAAOtJ,KAAKooE;YACd;YACW9+D,IAAAA,QAAQA,IAAAA;AACjB,yBAAW+8D,MAAY/8D;AACrBtJ,qBAAKooE,eAAe/B,EAAAA,IAAY/8D,GAAQ+8D,EAAAA;YAE5C;YACO/sD,OAAAA;AACLtZ,mBAAKs/D,MAAMhmD,KAAAA;YACb;YACO7U,QAAAA;AACLzE,mBAAKs/D,MAAM76D,MAAAA;YACb;YACO4Y,OAAO6rD,IAAiBxoE,IAAAA;AAC7BV,mBAAKmpE,gBAAgBD,IAASxoE,EAAAA,GAC9BV,KAAKs/D,MAAMjiD,OAAO6rD,IAASxoE,EAAAA;YAC7B;YACO4R,KAAKoJ,IAAAA;AACV1b,mBAAKs/D,MAAMhtD,KAAKoJ,EAAAA;YAClB;YACOgH,4BAA4BC,IAAAA;AACjC3iB,mBAAKs/D,MAAM58C,4BAA4BC,EAAAA;YACzC;YACO/X,qBAAqBC,IAAAA;AAC1B,qBAAO7K,KAAKs/D,MAAM10D,qBAAqBC,EAAAA;YACzC;YACO+X,wBAAwBvZ,IAAAA;AAE7B,qBADArJ,KAAKsoE,kBAAAA,GACEtoE,KAAKs/D,MAAM18C,wBAAwBvZ,EAAAA;YAC5C;YACOyZ,0BAA0BD,IAAAA;AAC/B7iB,mBAAKsoE,kBAAAA,GACLtoE,KAAKs/D,MAAMx8C,0BAA0BD,EAAAA;YACvC;YACOumD,eAAelmD,KAAwB,GAAA;AAE5C,qBADAljB,KAAKmpE,gBAAgBjmD,EAAAA,GACdljB,KAAKs/D,MAAMr8C,UAAUC,EAAAA;YAC9B;YACOC,mBAAmBC,IAAAA;AAAAA,kBAAAA,IAAAA,IAAAA;AAGxB,qBAFApjB,KAAKsoE,kBAAAA,GACLtoE,KAAKqpE,wBAA2C,UAAnBhqE,KAAA+jB,GAAkBtX,MAAAA,WAACzM,KAAAA,KAAI,GAA0B,UAAvBH,KAAAkkB,GAAkB/c,UAAAA,WAAKnH,KAAAA,KAAI,GAA2B,UAAxBI,KAAA8jB,GAAkBjd,WAAAA,WAAM7G,KAAAA,KAAI,CAAA,GAC1GU,KAAKs/D,MAAMn8C,mBAAmBC,EAAAA;YACvC;YACO5I,eAAAA;AACL,qBAAOxa,KAAKs/D,MAAM9kD,aAAAA;YACpB;YACOpS,OAAOib,IAAgB5C,IAAaxf,IAAAA;AACzCjB,mBAAKmpE,gBAAgB9lD,IAAQ5C,IAAKxf,EAAAA,GAClCjB,KAAKs/D,MAAMl3D,OAAOib,IAAQ5C,IAAKxf,EAAAA;YACjC;YACOsiB,eAAAA;AACL,qBAAOvjB,KAAKs/D,MAAM/7C,aAAAA;YACpB;YACOC,uBAAAA;AACL,qBAAOxjB,KAAKs/D,MAAM97C,qBAAAA;YACpB;YACOG,iBAAAA;AACL3jB,mBAAKs/D,MAAM37C,eAAAA;YACb;YACOC,YAAAA;AACL5jB,mBAAKs/D,MAAM17C,UAAAA;YACb;YACOC,YAAY7hB,IAAeC,IAAAA;AAChCjC,mBAAKmpE,gBAAgBnnE,IAAOC,EAAAA,GAC5BjC,KAAKs/D,MAAMz7C,YAAY7hB,IAAOC,EAAAA;YAChC;YACOuH,UAAAA;AACLxJ,mBAAKkoE,cAAc1+D,QAAAA,GACnBxJ,KAAKs/D,MAAM91D,QAAAA;YACb;YACOhF,YAAYuZ,IAAAA;AACjB/d,mBAAKmpE,gBAAgBprD,EAAAA,GACrB/d,KAAKs/D,MAAM96D,YAAYuZ,EAAAA;YACzB;YACOuzB,YAAYC,IAAAA;AACjBvxC,mBAAKmpE,gBAAgB53B,EAAAA,GACrBvxC,KAAKs/D,MAAMhuB,YAAYC,EAAAA;YACzB;YACOC,cAAAA;AACLxxC,mBAAKs/D,MAAM9tB,YAAAA;YACb;YACOttB,iBAAAA;AACLlkB,mBAAKs/D,MAAMp7C,eAAAA;YACb;YACOutB,aAAa7gC,IAAAA;AAClB5Q,mBAAKmpE,gBAAgBv4D,EAAAA,GACrB5Q,KAAKs/D,MAAM7tB,aAAa7gC,EAAAA;YAC1B;YACO5H,QAAAA;AACLhJ,mBAAKs/D,MAAMt2D,MAAAA;YACb;YACO4nC,MAAM5uB,IAA2BrR,IAAAA;AACtC3Q,mBAAKs/D,MAAM1uB,MAAM5uB,IAAMrR,EAAAA;YACzB;YACO24D,QAAQtnD,IAA2BrR,IAAAA;AACxC3Q,mBAAKs/D,MAAM1uB,MAAM5uB,EAAAA,GACjBhiB,KAAKs/D,MAAM1uB,MAAM,QAAQjgC,EAAAA;YAC3B;YACO/J,MAAMob,IAAAA;AACXhiB,mBAAKs/D,MAAM14D,MAAMob,EAAAA;YACnB;YACOzc,QAAQvD,IAAeC,IAAAA;AAC5BjC,mBAAKmpE,gBAAgBnnE,IAAOC,EAAAA,GAC5BjC,KAAKs/D,MAAM/5D,QAAQvD,IAAOC,EAAAA;YAC5B;YACO+U,QAAAA;AACLhX,mBAAKs/D,MAAMtoD,MAAAA;YACb;YACOyO,oBAAAA;AACLzlB,mBAAKs/D,MAAM75C,kBAAAA;YACb;YACOg5C,UAAU8K,IAAAA;AACf,qBAAOvpE,KAAKkoE,cAAczJ,UAAUz+D,MAAMupE,EAAAA;YAC5C;YACkBC,WAAAA,UAAAA;AAChB,qBAAOxkE;YACT;YAEQmkE,mBAAmBljB,IAAAA;AACzB,yBAAWh/C,MAASg/C;AAClB,oBAAIh/C,OAAUwiE,IAAAA,KAAYx4B,MAAMhqC,EAAAA,KAAUA,KAAQ,KAAM;AACtD,wBAAM,IAAIvF,MAAM,gCAAA;YAGtB;YAEQ2nE,2BAA2BpjB,IAAAA;AACjC,yBAAWh/C,MAASg/C;AAClB,oBAAIh/C,OAAUA,OAAUwiE,IAAAA,KAAYx4B,MAAMhqC,EAAAA,KAAUA,KAAQ,KAAM,KAAKA,KAAQ;AAC7E,wBAAM,IAAIvF,MAAM,yCAAA;YAGtB;UAAA;QAAA,GAAA,GAAA;MAAA,GAAA;IAAA,CAAA;;;",
  "names": ["root", "factory", "exports", "module", "define", "amd", "a", "i", "self", "e", "t", "s", "AccessibilityManager", "Disposable", "constructor", "_terminal", "_renderService", "super", "_liveRegionLineCount", "_charsToConsume", "_charsToAnnounce", "this", "_accessibilityTreeRoot", "document", "createElement", "classList", "add", "tabIndex", "_rowContainer", "setAttribute", "_rowElements", "rows", "_createAccessibilityTreeNode", "appendChild", "_topBoundaryFocusListener", "_handleBoundaryFocus", "_bottomBoundaryFocusListener", "addEventListener", "length", "_refreshRowsDimensions", "_renderRowsDebouncer", "TimeBasedDebouncer", "_renderRows", "bind", "_refreshRows", "_liveRegion", "element", "Error", "insertAdjacentElement", "register", "onResize", "_handleResize", "onRender", "start", "end", "onScroll", "onA11yChar", "char", "_handleChar", "onLineFeed", "onA11yTab", "spaceCount", "_handleTab", "onKey", "_handleKey", "key", "onBlur", "_clearLiveRegion", "onDimensionsChange", "_screenDprMonitor", "ScreenDprMonitor", "window", "setListener", "addDisposableDomListener", "toDisposable", "removeElementFromParent", "position", "boundaryElement", "target", "beforeBoundaryElement", "getAttribute", "buffer", "lines", "relatedTarget", "topBoundaryElement", "bottomBoundaryElement", "pop", "removeChild", "shift", "removeEventListener", "newElement", "unshift", "push", "scrollLines", "focus", "preventDefault", "stopImmediatePropagation", "children", "_refreshRowDimensions", "MAX_ROWS_TO_READ", "textContent", "Strings", "tooMuchOutput", "isMac", "parentNode", "setTimeout", "keyChar", "test", "refresh", "setSize", "toString", "lineData", "translateBufferLineToString", "ydisp", "posInSet", "innerText", "_announceCharacters", "dimensions", "css", "cell", "height", "style", "width", "canvas", "prepareTextForTerminal", "text", "replace", "bracketTextForPaste", "bracketedPasteMode", "paste", "textarea", "coreService", "decPrivateModes", "triggerDataEvent", "value", "moveTextAreaUnderMouseCursor", "ev", "screenElement", "pos", "getBoundingClientRect", "left", "clientX", "top", "clientY", "zIndex", "selectionService", "clipboardData", "setData", "selectionText", "stopPropagation", "getData", "shouldSelectWord", "rightClickSelect", "select", "_color", "TwoKeyMap", "_css", "setCss", "bg", "fg", "set", "getCss", "get", "setColor", "getColor", "clear", "elements", "parentElement", "node", "type", "handler", "options", "disposed", "dispose", "r", "n", "o", "Linkifier2", "_bufferService", "_linkProviders", "_linkCacheDisposables", "_isMouseOut", "_activeLine", "_onShowLinkUnderline", "EventEmitter", "onShowLinkUnderline", "event", "_onHideLinkUnderline", "onHideLinkUnderline", "getDisposeArrayDisposable", "_lastMouseEvent", "currentLink", "_currentLink", "registerLinkProvider", "linkProvider", "providerIndex", "indexOf", "splice", "attachToDom", "mouseService", "renderService", "_element", "_mouseService", "_clearCurrentLink", "_handleMouseMove", "_handleMouseDown", "_handleMouseUp", "_positionFromMouseEvent", "composedPath", "contains", "_lastBufferCell", "x", "y", "_handleHover", "_askForLink", "_linkAtPosition", "link", "useLineCache", "_activeProviderReplies", "forEach", "reply", "linkWithState", "Map", "linkProvided", "entries", "_checkLinkProviderResult", "provideLinks", "links", "linksWithState", "map", "size", "_removeIntersectingLinks", "replies", "occupiedCells", "Set", "providerReply", "startX", "range", "endX", "cols", "has", "index", "hasLinkBefore", "j", "linkAtPosition", "find", "_handleNewLink", "_mouseDownLink", "activate", "startRow", "endRow", "_linkLeave", "disposeArray", "state", "decorations", "underline", "pointerCursor", "isHovered", "_linkHover", "Object", "defineProperties", "v", "toggle", "_fireUnderlineEvent", "onRenderedViewportChange", "oldEvent", "hover", "showEvent", "scrollOffset", "_createLinkUnderlineEvent", "undefined", "fire", "remove", "leave", "lower", "upper", "current", "coords", "getCoords", "x1", "y1", "x2", "y2", "IBufferService", "promptLabel", "OscLinkProvider", "_optionsService", "_oscLinkService", "callback", "line", "result", "linkHandler", "rawOptions", "CellData", "lineLength", "getTrimmedLength", "currentLinkId", "currentStart", "finishLink", "hasContent", "loadCell", "hasExtendedAttrs", "extended", "urlId", "getLinkData", "uri", "ignoreLink", "allowNonHttpProtocols", "parsed", "URL", "includes", "protocol", "defaultActivate", "confirm", "newWindow", "open", "opener", "location", "href", "console", "warn", "IOptionsService", "IOscLinkService", "_parentWindow", "_renderCallback", "_refreshCallbacks", "_animationFrame", "cancelAnimationFrame", "addRefreshCallback", "requestAnimationFrame", "_innerRefresh", "rowStart", "rowEnd", "rowCount", "_rowCount", "_rowStart", "Math", "min", "_rowEnd", "max", "_runRefreshCallbacks", "_currentDevicePixelRatio", "devicePixelRatio", "clearListener", "listener", "_listener", "_outerListener", "_updateDpr", "_resolutionMediaMatchList", "removeListener", "matchMedia", "addListener", "Terminal", "CoreTerminal", "browser", "Browser", "_keyDownHandled", "_keyDownSeen", "_keyPressHandled", "_unprocessedDeadKey", "_onCursorMove", "onCursorMove", "_onKey", "_onRender", "_onSelectionChange", "onSelectionChange", "_onTitleChange", "onTitleChange", "_onBell", "onBell", "_onFocus", "_onBlur", "_onA11yCharEmitter", "_onA11yTabEmitter", "_onWillOpen", "_setup", "linkifier2", "_instantiationService", "createInstance", "_decorationService", "DecorationService", "setService", "IDecorationService", "_inputHandler", "onRequestBell", "onRequestRefreshRows", "onRequestSendFocus", "_reportFocus", "onRequestReset", "reset", "onRequestWindowsOptionsReport", "_reportWindowsOptions", "onColor", "_handleColorEvent", "forwardEvent", "_afterResize", "_customKeyEventHandler", "onFocus", "onWillOpen", "_themeService", "req", "acc", "ident", "channels", "color", "toColorRGB", "colors", "ansi", "C0", "ESC", "toRgbString", "C1_ESCAPED", "ST", "modifyColors", "rgba", "toColor", "narrowedAcc", "restoreColor", "buffers", "active", "preventScroll", "_handleScreenReaderModeOptionChange", "_accessibilityManager", "_handleTextAreaFocus", "sendFocus", "updateCursorStyle", "_showCursor", "blur", "_handleTextAreaBlur", "_syncTextArea", "isCursorInViewport", "_compositionHelper", "isComposing", "cursorY", "ybase", "bufferLine", "cursorX", "cellHeight", "getWidth", "cellWidth", "cursorTop", "cursorLeft", "lineHeight", "_initGlobal", "_bindKeys", "hasSelection", "copyHandler", "_selectionService", "pasteHandlerWrapper", "handlePasteEvent", "isFirefox", "button", "rightClickHandler", "rightClickSelectsWord", "isLinux", "_keyUp", "_keyDown", "_keyPress", "compositionstart", "compositionupdate", "compositionend", "_inputEvent", "updateCompositionElements", "parent", "isConnected", "_logService", "debug", "_document", "ownerDocument", "dir", "fragment", "createDocumentFragment", "_viewportElement", "_viewportScrollArea", "_helperContainer", "isChromeOS", "_coreBrowserService", "CoreBrowserService", "defaultView", "ICoreBrowserService", "_charSizeService", "CharSizeService", "ICharSizeService", "ThemeService", "IThemeService", "_characterJoinerService", "CharacterJoinerService", "ICharacterJoinerService", "RenderService", "IRenderService", "resize", "_compositionView", "CompositionHelper", "hasRenderer", "setRenderer", "_createRenderer", "MouseService", "IMouseService", "viewport", "Viewport", "amount", "onRequestSyncScrollBar", "syncScrollArea", "handleCursorMove", "handleResize", "handleBlur", "handleFocus", "SelectionService", "ISelectionService", "onRequestScrollLines", "suppressScrollEvent", "onRequestRedraw", "handleSelectionChanged", "columnSelectMode", "onLinuxMouseSelection", "_onScroll", "BufferDecorationRenderer", "handleMouseDown", "coreMouseService", "areMouseEventsActive", "disable", "enable", "screenReaderMode", "optionsService", "onSpecificOptionChange", "overviewRulerWidth", "_overviewRulerRenderer", "OverviewRulerRenderer", "measure", "bindMouse", "DomRenderer", "el", "sendEvent", "getMouseReportCoords", "but", "action", "overrideType", "buttons", "getLinesScrolled", "deltaY", "triggerMouseEvent", "col", "row", "ctrl", "ctrlKey", "alt", "altKey", "shiftKey", "requestedEvents", "mouseup", "wheel", "mousedrag", "mousemove", "eventListeners", "cancel", "onProtocolChange", "events", "logLevel", "explainEvents", "passive", "activeProtocol", "shouldForceSelection", "hasScrollback", "sequence", "applicationCursorKeys", "data", "abs", "handleWheel", "handleTouchStart", "handleTouchMove", "refreshRows", "shouldColumnSelect", "isCursorInitialized", "disp", "source", "attachCustomKeyEventHandler", "customKeyEventHandler", "registerCharacterJoiner", "joinerId", "deregisterCharacterJoiner", "deregister", "markers", "addMarker", "cursorYOffset", "registerDecoration", "decorationOptions", "column", "setSelection", "getSelection", "getSelectionPosition", "selectionStart", "selectionEnd", "clearSelection", "selectAll", "selectLines", "shouldIgnoreComposition", "macOptionIsMeta", "keydown", "scrollOnUserInput", "scrollToBottom", "evaluateKeyboardEvent", "scrollCount", "_isThirdLevelShift", "metaKey", "charCodeAt", "ETX", "CR", "domEvent", "thirdLevelKey", "isWindows", "getModifierState", "keyCode", "charCode", "which", "String", "fromCharCode", "inputType", "composed", "hasValidSize", "clearAllMarkers", "getBlankLine", "DEFAULT_ATTR_DATA", "clearTextureAtlas", "WindowsOptionsReportType", "GET_WIN_SIZE_PIXELS", "canvasWidth", "toFixed", "canvasHeight", "GET_CELL_SIZE_PIXELS", "force", "cancelEvents", "_debounceThresholdMS", "_lastRefreshMs", "_additionalRefreshRequested", "_refreshTimeoutID", "clearTimeout", "refreshRequestTime", "Date", "now", "elapsed", "waitPeriodBeforeTrailingRefresh", "_scrollLines", "_scrollArea", "themeService", "scrollBarWidth", "_currentRowHeight", "_currentDeviceCellHeight", "_lastRecordedBufferLength", "_lastRecordedViewportHeight", "_lastRecordedBufferHeight", "_lastTouchY", "_lastScrollTop", "_wheelPartialScroll", "_refreshAnimationFrame", "_ignoreNextScrollEvent", "_smoothScrollState", "startTime", "origin", "offsetWidth", "_handleScroll", "_activeBuffer", "onBufferActivate", "activeBuffer", "_renderDimensions", "_handleThemeChange", "onChangeColors", "backgroundColor", "background", "_refresh", "immediate", "device", "dpr", "offsetHeight", "newBufferHeight", "round", "scrollTop", "offsetParent", "diff", "_smoothScroll", "_isDisposed", "percent", "_smoothScrollPercent", "_clearSmoothScrollState", "smoothScrollDuration", "_bubbleScroll", "scrollPosFromTop", "cancelable", "_getPixelsScrolled", "scrollHeight", "_applyScrollModifier", "deltaMode", "WheelEvent", "DOM_DELTA_LINE", "DOM_DELTA_PAGE", "DOM_DELTA_PIXEL", "floor", "modifier", "fastScrollModifier", "fastScrollSensitivity", "scrollSensitivity", "touches", "pageY", "_screenElement", "_decorationElements", "_altBufferIsActive", "_dimensionsChanged", "_container", "_doRefreshDecorations", "_queueRefresh", "onDecorationRegistered", "onDecorationRemoved", "decoration", "_removeDecoration", "_renderDecoration", "_refreshStyle", "_refreshXPosition", "_createElement", "marker", "display", "onRenderEmitter", "anchor", "right", "delete", "_zones", "_zonePool", "_zonePoolIndex", "_linePadding", "full", "center", "zones", "addDecoration", "overviewRulerOptions", "z", "_lineIntersectsZone", "_lineAdjacentToZone", "_addLineToZone", "startBufferLine", "endBufferLine", "setPadding", "padding", "zone", "drawHeight", "drawWidth", "drawX", "_coreBrowseService", "_colorZoneStore", "ColorZoneStore", "_shouldUpdateDimensions", "_shouldUpdateAnchor", "_lastKnownBufferLength", "_canvas", "_refreshCanvasDimensions", "c", "insertBefore", "ctx", "getContext", "_ctx", "_registerDecorationListeners", "_registerBufferChangeListeners", "_registerDimensionChangeListeners", "_width", "normal", "_refreshDrawHeightConstants", "_refreshColorZonePadding", "_containerHeight", "clientHeight", "_refreshDrawConstants", "outerWidth", "innerWidth", "ceil", "pixelsPerLine", "nonFullHeight", "_refreshDecorations", "clearRect", "lineWidth", "_renderColorZone", "fillStyle", "fillRect", "updateCanvasDimensions", "updateAnchor", "_textarea", "_coreService", "_isComposing", "_isSendingComposition", "_compositionPosition", "_dataAlreadySent", "_finalizeComposition", "_handleAnyTextareaChanges", "waitForPropagation", "currentCompositionPosition", "input", "substring", "oldValue", "newValue", "DEL", "dontRecurse", "fontFamily", "fontSize", "compositionViewBounds", "ICoreService", "getCoordsRelativeToElement", "rect", "elementStyle", "getComputedStyle", "leftPadding", "parseInt", "getPropertyValue", "topPadding", "colCount", "hasValidCharSize", "cssCellWidth", "cssCellHeight", "isSelection", "moveToRequestedRow", "startY", "targetY", "bufferService", "applicationCursor", "wrappedRowsForRow", "rowsToMove", "wrappedRows", "direction", "verticalDirection", "isWrapped", "repeat", "currentRow", "lineWraps", "startCol", "endCol", "forward", "currentCol", "bufferStr", "mod", "count", "str", "rpt", "targetX", "rowDifference", "currX", "TERMINAL_CLASS_PREFIX", "FOCUS_CLASS", "nextTerminalId", "_linkifier2", "instantiationService", "_terminalClass", "_cellToRowElements", "_refreshRowElements", "_selectionContainer", "createRenderDimensions", "_updateDimensions", "onOptionChange", "_handleOptionsChanged", "_injectCss", "_rowFactory", "DomRendererRowFactory", "_handleLinkHover", "_handleLinkLeave", "_themeStyleElement", "_dimensionsStyleElement", "letterSpacing", "overflow", "styles", "_terminalSelector", "foreground", "BOLD_CLASS", "fontWeight", "fontWeightBold", "ITALIC_CLASS", "cursor", "cursorAccent", "CURSOR_CLASS", "CURSOR_STYLE_BLOCK_CLASS", "CURSOR_BLINK_CLASS", "CURSOR_STYLE_BAR_CLASS", "cursorWidth", "CURSOR_STYLE_UNDERLINE_CLASS", "selectionBackgroundOpaque", "selectionInactiveBackgroundOpaque", "INVERTED_DEFAULT_COLOR", "opaque", "handleDevicePixelRatioChange", "handleCharSizeChanged", "renderRows", "viewportStartRow", "viewportEndRow", "viewportCappedStartRow", "viewportCappedEndRow", "documentFragment", "isXFlipped", "_createSelectionElement", "middleRowsCount", "colStart", "colEnd", "replaceChildren", "cursorAbsoluteY", "cursorBlink", "rowElement", "cursorStyle", "Int16Array", "createRow", "_setCellUnderline", "enabled", "span", "textDecoration", "IInstantiationService", "DIM_CLASS", "UNDERLINE_CLASS", "STRIKETHROUGH_CLASS", "_workCell", "_columnSelectMode", "_selectionStart", "_selectionEnd", "isCursorRow", "cellMap", "joinedRanges", "getJoinedCharacters", "getCode", "NULL_CELL_CODE", "elemIndex", "isJoined", "lastCharX", "JoinedCellData", "translateToString", "charElement", "isCursorHidden", "isBold", "isItalic", "isDim", "isInvisible", "WHITESPACE_CELL_CHAR", "getChars", "isUnderline", "underlineStyle", "isUnderlineColorDefault", "isUnderlineColorRGB", "textDecorationColor", "AttributeData", "getUnderlineColor", "join", "drawBoldTextInBrightColors", "isStrikethrough", "getFgColor", "fgColorMode", "getFgColorMode", "getBgColor", "bgColorMode", "getBgColorMode", "isInverse", "temp", "temp2", "bgOverride", "fgOverride", "isTop", "forEachDecorationAtCell", "d", "layer", "backgroundColorRGB", "foregroundColorRGB", "isInSelection", "_isCellInSelection", "resolvedBg", "selectionForeground", "isFocused", "_addStyle", "padStart", "multiplyOpacity", "_applyMinimumContrast", "subarray", "fill", "minimumContrastRatio", "excludeFromContrastRatioDemands", "adjustedColor", "contrastCache", "ensureContrastRatio", "padChar", "DIM_OPACITY", "TEXT_BASELINE", "isLegacyEdge", "isPowerlineGlyph", "codepoint", "isSelectAllActive", "selectionStartLength", "finalSelectionStart", "areSelectionValuesReversed", "finalSelectionEnd", "startPlusLength", "handleTrim", "_onCharSizeChange", "onCharSizeChange", "_measureStrategy", "DomMeasureStrategy", "onMultipleOptionChange", "_parentElement", "_result", "_measureElement", "geometry", "firstCell", "chars", "content", "combinedData", "isCombined", "setFromCharData", "getAsCharData", "_characterJoiners", "_nextCharacterJoinerId", "joiner", "id", "ranges", "lineStr", "rangeStartColumn", "currentStringIndex", "rangeStartStringIndex", "rangeAttrFG", "getFg", "rangeAttrBG", "getBg", "_getJoinedRanges", "startIndex", "endIndex", "allJoinedRanges", "error", "joinerRanges", "_mergeRanges", "_stringRangesToCellRanges", "currentRangeIndex", "currentRangeStarted", "currentRange", "getString", "static", "newRange", "inRange", "_isFocused", "_cachedIsFocused", "hasFocus", "queueMicrotask", "decorationService", "coreBrowserService", "_pausedResizeTask", "DebouncedIdleTask", "_isPaused", "_needsFullRefresh", "_isNextRenderRedrawOnly", "_needsSelectionRefresh", "_canvasWidth", "_canvasHeight", "_selectionState", "_onDimensionsChange", "_onRenderedViewportChange", "_onRefreshRequest", "onRefreshRequest", "_renderer", "_renderDebouncer", "RenderDebouncer", "_fullRefresh", "observer", "IntersectionObserver", "_handleIntersectionChange", "threshold", "observe", "disconnect", "entry", "isIntersecting", "intersectionRatio", "flush", "isRedrawOnly", "_fireOnCanvasResize", "renderer", "NON_BREAKING_SPACE_CHAR", "ALL_NON_BREAKING_SPACE_REGEX", "RegExp", "_linkifier", "_dragScrollAmount", "_enabled", "_mouseDownTimeStamp", "_oldHasSelection", "_oldSelectionStart", "_oldSelectionEnd", "_onLinuxMouseSelection", "_onRedrawRequest", "_onRequestScrollLines", "_mouseMoveListener", "_mouseUpListener", "onUserInput", "_trimListener", "onTrim", "_handleTrim", "_handleBufferActivate", "_model", "SelectionModel", "_activeSelectionMode", "_removeMouseDownListeners", "lineText", "startRowEndCol", "isLinuxMouseSelection", "_isClickInSelection", "_getMouseBufferCoords", "_areCoordsInSelection", "isCellInSelection", "_selectWordAtCursor", "allowWhitespaceOnlySelection", "getRangeLength", "_selectWordAt", "_getMouseEventScrollAmount", "offset", "terminalHeight", "macOptionClickForcesSelection", "timeStamp", "_handleIncrementalClick", "detail", "_handleSingleClick", "_handleDoubleClick", "_handleTripleClick", "_addMouseDownListeners", "_dragScrollIntervalTimer", "setInterval", "_dragScroll", "clearInterval", "hasWidth", "_selectLineAt", "previousSelectionEnd", "_selectToWordAt", "timeElapsed", "altClickMovesCursor", "coordinates", "moveToCellSequence", "_fireEventIfSelectionChanged", "_fireOnSelectionChange", "_convertViewportColToCharacterIndex", "charIndex", "_getWordAt", "followWrappedLinesAbove", "followWrappedLinesBelow", "charOffset", "leftWideCharCount", "rightWideCharCount", "leftLongCharOffset", "rightLongCharOffset", "charAt", "_isCharWordSeparator", "slice", "trim", "getCodePoint", "previousBufferLine", "previousLineWordPosition", "nextBufferLine", "nextLineWordPosition", "wordPosition", "wordSeparator", "wrappedRange", "getWrappedRangeForLine", "first", "last", "createDecorator", "DEFAULT_FOREGROUND", "DEFAULT_BACKGROUND", "DEFAULT_CURSOR", "DEFAULT_CURSOR_ACCENT", "DEFAULT_SELECTION", "DEFAULT_ANSI_COLORS", "freeze", "g", "b", "toCss", "toRgba", "_onChangeColors", "_contrastCache", "ColorContrastCache", "_colors", "selectionBackgroundTransparent", "blend", "selectionInactiveBackgroundTransparent", "_updateRestoreColors", "_setTheme", "theme", "parseColor", "selectionBackground", "selectionInactiveBackground", "NULL_COLOR", "isOpaque", "opacity", "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white", "brightBlack", "brightRed", "brightGreen", "brightYellow", "brightBlue", "brightMagenta", "brightCyan", "brightWhite", "extendedAnsi", "colorCount", "slot", "_restoreColor", "_restoreColors", "cssString", "fallback", "CircularList", "_maxLength", "onDeleteEmitter", "onDelete", "onInsertEmitter", "onInsert", "onTrimEmitter", "_array", "Array", "_startIndex", "_length", "maxLength", "newMaxLength", "newArray", "_getCyclicIndex", "newLength", "recycle", "isFull", "deleteCount", "items", "countToTrim", "trimStart", "shiftElements", "expandListBy", "clone", "val", "depth", "clonedObject", "isArray", "$r", "$g", "$b", "$a", "rgb", "toPaddedHex", "contrastRatio", "l1", "l2", "toChannels", "fgR", "fgG", "fgB", "bgR", "bgG", "bgB", "ratio", "rgbaColor", "factor", "$ctx", "$litmusColor", "isNode", "willReadFrequently", "globalCompositeOperation", "createLinearGradient", "match", "rgbaMatch", "parseFloat", "getImageData", "relativeLuminance2", "rs", "gs", "bs", "pow", "relativeLuminance", "reduceLuminance", "bgRgba", "fgRgba", "cr", "increaseLuminance", "bgL", "fgL", "resultA", "resultARatio", "resultB", "hasWriteSyncWarnHappened", "_onBinary", "onBinary", "_onData", "onData", "_onLineFeed", "_onResize", "_onWriteParsed", "onWriteParsed", "InstantiationService", "OptionsService", "BufferService", "LogService", "ILogService", "CoreService", "CoreMouseService", "ICoreMouseService", "unicodeService", "UnicodeService", "IUnicodeService", "_charsetService", "CharsetService", "ICharsetService", "OscLinkService", "InputHandler", "onRequestScrollToBottom", "_writeBuffer", "handleUserInput", "_handleWindowsModeOptionChange", "markRangeDirty", "scrollBottom", "WriteBuffer", "promiseResult", "parse", "_windowsMode", "_onScrollApi", "write", "writeSync", "maxSubsequentCalls", "LogLevelEnum", "WARN", "isNaN", "MINIMUM_COLS", "MINIMUM_ROWS", "scroll", "eraseAttr", "scrollPages", "pageCount", "scrollToTop", "scrollToLine", "registerEscHandler", "registerDcsHandler", "registerCsiHandler", "registerOscHandler", "windowsMode", "_enableWindowsMode", "disposables", "updateWindowsModeWrappedState", "final", "_listeners", "_disposed", "_event", "arg1", "arg2", "queue", "call", "from", "to", "GLEVEL", "MAX_PARSEBUFFER_LENGTH", "paramToWindowOption", "opts", "setWinLines", "restoreWin", "minimizeWin", "setWinPosition", "setWinSizePixels", "raiseWin", "lowerWin", "refreshWin", "setWinSizeChars", "maximizeWin", "fullscreenWin", "getWinState", "getWinPosition", "getWinSizePixels", "getScreenSizePixels", "getCellSizePixels", "getWinSizeChars", "getScreenSizeChars", "getIconTitle", "getWinTitle", "pushTitle", "popTitle", "$temp", "_coreMouseService", "_unicodeService", "_parser", "EscapeSequenceParser", "_parseBuffer", "Uint32Array", "_stringDecoder", "StringToUtf32", "_utf8Decoder", "Utf8ToUtf32", "_windowTitle", "_iconName", "_windowTitleStack", "_iconNameStack", "_curAttrData", "_eraseAttrDataInternal", "_onRequestBell", "_onRequestRefreshRows", "_onRequestReset", "_onRequestSendFocus", "_onRequestSyncScrollBar", "_onRequestWindowsOptionsReport", "_onA11yChar", "_onA11yTab", "_onColor", "_parseStack", "paused", "cursorStartX", "cursorStartY", "decodedLength", "_specialColors", "_dirtyRowTracker", "DirtyRowTracker", "setCsiHandlerFallback", "params", "identifier", "identToString", "toArray", "setEscHandlerFallback", "setExecuteHandlerFallback", "code", "setOscHandlerFallback", "setDcsHandlerFallback", "payload", "setPrintHandler", "print", "insertChars", "intermediates", "scrollLeft", "cursorUp", "scrollRight", "cursorDown", "cursorForward", "cursorBackward", "cursorNextLine", "cursorPrecedingLine", "cursorCharAbsolute", "cursorPosition", "cursorForwardTab", "eraseInDisplay", "prefix", "eraseInLine", "insertLines", "deleteLines", "deleteChars", "scrollUp", "scrollDown", "eraseChars", "cursorBackwardTab", "charPosAbsolute", "hPositionRelative", "repeatPrecedingCharacter", "sendDeviceAttributesPrimary", "sendDeviceAttributesSecondary", "linePosAbsolute", "vPositionRelative", "hVPosition", "tabClear", "setMode", "setModePrivate", "resetMode", "resetModePrivate", "charAttributes", "deviceStatus", "deviceStatusPrivate", "softReset", "setCursorStyle", "setScrollRegion", "saveCursor", "windowOptions", "restoreCursor", "insertColumns", "deleteColumns", "selectProtected", "requestMode", "setExecuteHandler", "BEL", "bell", "LF", "lineFeed", "VT", "FF", "carriageReturn", "BS", "backspace", "HT", "tab", "SO", "shiftOut", "SI", "shiftIn", "C1", "IND", "NEL", "nextLine", "HTS", "tabSet", "OscHandler", "setTitle", "setIconName", "setOrReportIndexedColor", "setHyperlink", "setOrReportFgColor", "setOrReportBgColor", "setOrReportCursorColor", "restoreIndexedColor", "restoreFgColor", "restoreBgColor", "restoreCursorColor", "reverseIndex", "keypadApplicationMode", "keypadNumericMode", "fullReset", "setgLevel", "selectDefaultCharset", "flag", "CHARSETS", "selectCharset", "screenAlignmentPattern", "setErrorHandler", "DcsHandler", "requestStatusString", "getAttrData", "_preserveStack", "_logSlowResolvingAsync", "p", "Promise", "race", "res", "rej", "catch", "err", "_getCurrentLinkId", "wasPaused", "DEBUG", "prototype", "split", "clearRange", "len", "decode", "chWidth", "charset", "wraparoundMode", "wraparound", "insertMode", "modes", "curAttr", "bufferRow", "markDirty", "setCellFromCodePoint", "wcwidth", "ch", "stringFromCodePoint", "addLineToLink", "_eraseAttrData", "insertCells", "getNullCell", "NULL_CELL_WIDTH", "addCodepointToCell", "precedingCodepoint", "convertEol", "reverseWraparound", "_restrictCursor", "originalX", "nextStop", "maxCol", "_setCursor", "_moveCursor", "diffToTop", "diffToBottom", "param", "tabs", "prevStop", "_eraseInBufferLine", "clearWrap", "respectProtect", "replaceCells", "_resetBufferLine", "clearMarkers", "scrollBackSize", "scrollBottomRowsOffset", "scrollBottomAbsolute", "deleteCells", "_is", "term", "termName", "setgCharset", "DEFAULT_CHARSET", "applicationKeypad", "activeEncoding", "activateAltBuffer", "activateNormalBuffer", "dm", "mouseProtocol", "mouseEncoding", "cs", "b2v", "m", "_updateAttrColor", "mode", "c1", "c2", "c3", "fromColorRGB", "_extractColor", "attr", "accu", "cSpace", "advance", "hasSubParams", "subparams", "getSubParams", "underlineColor", "_processUnderline", "updateExtended", "_processSGR0", "l", "savedX", "savedY", "savedCurAttrData", "savedCharset", "isBlinking", "bottom", "second", "_savedCharset", "slots", "idx", "spec", "exec", "args", "_createHyperlink", "_finishHyperlink", "parsedParams", "idParamIndex", "findIndex", "startsWith", "registerLink", "_setOrReportSpecialColor", "collectAndFlag", "scrollRegionHeight", "level", "yOffset", "markAllDirty", "isProtected", "_disposables", "unregister", "f", "array", "_data", "third", "fourth", "navigator", "userAgent", "platform", "isSafari", "majorVersion", "isIpad", "isIphone", "_getKey", "insert", "_search", "forEachByKey", "values", "mid", "midKey", "TaskQueue", "_tasks", "_i", "enqueue", "task", "_start", "_idleCallback", "_cancelCallback", "_requestCallback", "_process", "deadline", "taskDuration", "longestTask", "lastDeadlineRemaining", "timeRemaining", "deadlineRemaining", "PriorityTaskQueue", "_createDeadline", "duration", "IdleTaskQueue", "requestIdleCallback", "cancelIdleCallback", "_queue", "lastChar", "CHAR_DATA_CODE_INDEX", "WHITESPACE_CELL_CODE", "ExtendedAttrs", "newObj", "isBlink", "isFgRGB", "isBgRGB", "isFgPalette", "isBgPalette", "isFgDefault", "isBgDefault", "isAttributeDefault", "isEmpty", "getUnderlineColorMode", "isUnderlineColorPalette", "getUnderlineStyle", "ext", "_ext", "_urlId", "MAX_BUFFER_SIZE", "_hasScrollback", "_nullCell", "fromCharData", "NULL_CELL_CHAR", "_whitespaceCell", "WHITESPACE_CELL_WIDTH", "_isClearing", "_memoryCleanupQueue", "_memoryCleanupPosition", "_cols", "_rows", "_getCorrectBufferLength", "setupTabStops", "getWhitespaceCell", "BufferLine", "relativeY", "correctBufferLength", "scrollback", "fillViewportRows", "fillAttr", "newCols", "newRows", "nullCell", "dirtyMemoryLines", "addToY", "amountToTrim", "_isReflowEnabled", "_reflow", "_batchedMemoryCleanup", "normalRun", "counted", "cleanupMemory", "_reflowLarger", "_reflowSmaller", "toRemove", "reflowLargerGetLinesToRemove", "newLayoutResult", "reflowLargerCreateNewLayout", "reflowLargerApplyNewLayout", "layout", "_reflowLargerAdjustViewport", "countRemoved", "viewportAdjustments", "toInsert", "countToInsert", "wrappedLines", "absoluteY", "lastLineLength", "destLineLengths", "reflowSmallerGetNewLineLengths", "linesToAdd", "trimmedLines", "newLines", "newLine", "destLineIndex", "destCol", "srcLineIndex", "srcCol", "cellsToCopy", "copyCellsFrom", "wrappedLinesIndex", "getWrappedLineTrimmedLength", "setCell", "insertEvents", "originalLines", "originalLinesLength", "originalLineIndex", "nextToInsertIndex", "nextToInsert", "countInsertedSoFar", "nextI", "insertCountEmitted", "stringIndexToBufferIndex", "lineIndex", "stringIndex", "trimRight", "CHAR_DATA_WIDTH_INDEX", "CHAR_DATA_CHAR_INDEX", "tabStopWidth", "Marker", "onDispose", "_removeMarker", "iterator", "startOverscan", "endOverscan", "BufferStringIterator", "_buffer", "_trimRight", "_endIndex", "_startOverscan", "_endOverscan", "_current", "hasNext", "next", "$startIndex", "fillCellData", "_combined", "_extendedAttrs", "cp", "CHAR_DATA_ATTR_INDEX", "codePoint", "eAttrs", "byteLength", "uint32Cells", "keys", "extKeys", "copyFrom", "src", "applyInReverse", "srcData", "srcCombinedKeys", "bufferCols", "endsInNull", "followingLineStartsWithWide", "oldCols", "bufferAbsoluteY", "srcTrimmedTineLength", "srcRemainingCells", "destRemainingCells", "countToRemove", "nextToRemoveIndex", "nextToRemoveStart", "countRemovedSoFar", "newLayout", "newLayoutLines", "newLineLengths", "cellsNeeded", "reduce", "srcLine", "cellsAvailable", "oldTrimmedLength", "endsWithWide", "BufferSet", "_onBufferActivate", "_normal", "Buffer", "_alt", "inactiveBuffer", "obj", "combined", "DEFAULT_COLOR", "DEFAULT_ATTR", "DEFAULT_EXT", "isDisposed", "_id", "_nextId", "_onDispose", "disposable", "C", "NUL", "SOH", "STX", "EOT", "ENQ", "ACK", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "EM", "SUB", "FS", "GS", "RS", "US", "SP", "PAD", "HOP", "BPH", "NBH", "SSA", "ESA", "HTJ", "VTS", "PLD", "PLU", "RI", "SS2", "SS3", "DCS", "PU1", "PU2", "STS", "CCH", "MW", "SPA", "EPA", "SOS", "SGCI", "SCI", "CSI", "OSC", "PM", "APC", "KEYCODE_KEY_MAPPINGS", "applicationCursorMode", "modifiers", "keyMapping", "keyString", "toUpperCase", "toLowerCase", "_interim", "startPos", "interim", "Uint8Array", "byte1", "byte2", "byte3", "byte4", "discardInterim", "tmp", "missing", "fourStop", "BMP_COMBINING", "HIGH_COMBINING", "table", "version", "num", "ucs", "_action", "_callbacks", "_pendingData", "_bufferOffset", "_isSyncWriting", "_syncCalls", "_didUserInput", "chunk", "cb", "_innerWrite", "lastTime", "continuation", "resolve", "then", "RGB_REX", "HASH_REX", "pad", "bits", "s2", "low", "base", "adv", "PAYLOAD_LIMIT", "EMPTY_HANDLERS", "_handlers", "create", "_active", "_ident", "_handlerFb", "_stack", "loopPosition", "fallThrough", "registerHandler", "handlerList", "handlerIndex", "clearHandler", "setHandlerFallback", "unhook", "hook", "put", "utf32ToString", "success", "handlerResult", "EMPTY_PARAMS", "Params", "addParam", "_handler", "_params", "_hitLimit", "ret", "TransitionTable", "setDefault", "addMany", "codes", "NON_ASCII_PRINTABLE", "VT500_TRANSITION_TABLE", "blueprint", "apply", "unused", "PRINTABLES", "EXECUTABLES", "states", "_transitions", "handlers", "handlerPos", "transition", "chunkPos", "initialState", "currentState", "_collect", "_printHandlerFb", "_executeHandlerFb", "_csiHandlerFb", "_escHandlerFb", "_errorHandlerFb", "_printHandler", "_executeHandlers", "_csiHandlers", "_escHandlers", "_oscParser", "OscParser", "_dcsParser", "DcsParser", "_errorHandler", "_identifier", "finalRange", "intermediate", "finalCode", "reverse", "clearPrintHandler", "clearEscHandler", "clearExecuteHandler", "clearCsiHandler", "clearDcsHandler", "clearOscHandler", "clearErrorHandler", "collect", "abort", "addSubParam", "addDigit", "handlersEsc", "jj", "_state", "_put", "MAX_VALUE", "maxSubParamsLength", "Int32Array", "_subParams", "_subParamsLength", "_subParamsIdx", "Uint16Array", "_rejectDigits", "_rejectSubDigits", "_digitIsSub", "k", "newParams", "getSubParamsAll", "store", "cur", "_addons", "instance", "loadAddon", "terminal", "loadedAddon", "_wrappedAddonDispose", "init", "viewportY", "baseY", "getLine", "BufferLineApiView", "_line", "getCell", "startColumn", "endColumn", "_core", "_onBufferChange", "onBufferChange", "BufferApiView", "_alternate", "alternate", "addCsiHandler", "addDcsHandler", "addEscHandler", "addOscHandler", "provider", "versions", "activeVersion", "isUserScrolling", "_cachedBlankLine", "topRow", "bottomRow", "willBufferBeTrimmed", "oldYdisp", "scrollAmount", "glevel", "_charsets", "DEFAULT_PROTOCOLS", "NONE", "restrict", "X10", "VT200", "DRAG", "ANY", "eventCode", "isSGR", "S", "DEFAULT_ENCODINGS", "DEFAULT", "SGR", "SGR_PIXELS", "_protocols", "_encodings", "_activeProtocol", "_activeEncoding", "_lastEvent", "_onProtocolChange", "name", "addProtocol", "addEncoding", "encoding", "_equalEvents", "report", "triggerBinaryEvent", "down", "up", "drag", "move", "e1", "e2", "pixels", "DEFAULT_MODES", "DEFAULT_DEC_PRIVATE_MODES", "_onUserInput", "_onRequestScrollToBottom", "wasUserInput", "disableStdin", "$xmin", "$xmax", "_decorations", "SortedList", "_onDecorationRegistered", "_onDecorationRemoved", "Decoration", "markerDispose", "xmin", "xmax", "getKeyIterator", "_cachedBg", "_cachedFg", "foregroundColor", "ServiceCollection", "_entries", "service", "_services", "getService", "ctor", "serviceDependencies", "getServiceDependencies", "sort", "serviceArgs", "dependency", "firstServiceArgPos", "optionsKeyToLogLevel", "info", "INFO", "ERROR", "off", "OFF", "_updateLogLevel", "_evalLazyOptionalParams", "optionalParams", "_log", "message", "log", "DEFAULT_OPTIONS", "customGlyphs", "allowProposedApi", "allowTransparency", "FONT_WEIGHT_OPTIONS", "_onOptionChange", "defaultOptions", "_sanitizeAndValidateOption", "_setupOptions", "eventKey", "getter", "propName", "setter", "desc", "defineProperty", "_entriesWithId", "_dataByLinkId", "_removeMarkerFromLink", "castData", "_getEntryIdKey", "linkId", "every", "linkData", "storeServiceDependency", "serviceRegistry", "decorator", "arguments", "_providers", "_onChange", "onChange", "defaultProvider", "UnicodeV6", "_activeProvider", "getStringCellWidth", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__", "CONSTRUCTOR_ONLY_OPTIONS", "_addonManager", "AddonManager", "_publicOptions", "_checkReadonlyOptions", "_checkProposedApi", "parser", "ParserApi", "unicode", "UnicodeApi", "BufferNamespaceApi", "mouseTrackingMode", "applicationCursorKeysMode", "applicationKeypadMode", "originMode", "reverseWraparoundMode", "sendFocusMode", "columns", "_verifyIntegers", "registerMarker", "_verifyPositiveIntegers", "writeln", "addon", "strings", "Infinity"]
}
